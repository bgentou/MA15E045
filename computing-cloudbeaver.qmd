---
title: "Client CloudBeaver"

format:
  html:
    highlight-style: zenburn
---


# Démonstration

[Démo](https://demo.cloudbeaver.io)

# Installer 


# Docker




# Configurer une connexion

- Onglet `Main`
  - Connect by `Host`, 
    - Host: `localhost`, 
    - Port: `5434` (ou un autre nombre exotique)
    - Database: bd_2023-24 
    - Décocher `Show all databases
  - Authentification: `Database Native`
    - Username: `username` (ENT)
    - Password: xxxxxxx  (ENT) 
    - Cocher `Save password` 
  - 

- Onglet `PostgreSQL`

- Onglet `SSH`
  - Cocher `Use SSH Tunnel`
  - Settings
    - Host/IP: localhost
    - Port 22
    - Username: `username` (ENT)
    - Password: xxxxxxx  (ENT) 
    - Cocher `Save credentials`
  - Jump servers
    - Jump #1 etu-pgsql.math.univ-paris-diderot.fr  username Password
    - Target localhost:22  username Password
  
# Utiliser une connexion


# Définir et utiliser un projet

- Connections
- Bookmarks
- Dashboards
- Diagrams
- Scripts 


# Éditeur SQL



- 


# Connexions `ssh`  (Linux/MacOS)

Pour accéder au serveur `Postgres` (SGBD), il faut d'abord  se connecter à la machine qui héberge ce serveur `etu-pgsql.math.univ-paris-diderot.fr`. 

Pour se connecter à `etu-pgsql.math.univ-paris-diderot.fr`, on utilise le protocole [`ssh`](https://en.wikipedia.org/wiki/Secure_Shell), avec son identifiant et son mot de passe `ENT`.

```{.bash}
$ ssh username@etu-pgsql.math.univ-paris-diderot.fr
(username@etu-pgsql.math.univ-paris-diderot.fr) Password for username@etu-pgsql.math.univ-paris-diderot.fr:
Last login: ..................
....
....
This fortune brought to you by:
$FreeBSD$
[username@etu-pgsql ~]$ ...
```

Attention : pas d'écho lorsque vous saisissez votre  mot de passe.

On peut maintenant se connecter au serveur Postgres, toujours avec son identifiant et son mot de passe `ENT`

Ici, nous proposons d'utiliser le *client* `pgcli`  :
```{.bash}
[username@etu-pgsql ~]$ pgcli -d bd_2023-24 
Password for username: 
Server: PostgreSQL 13.8
Version: 3.5.0
Home: http://pgcli.com
userame@/tmp:bd_2023-24> 
```

::: {.callout-note}

### Pourquoi préciser `-d bd_2023-24` ?

`bd_2023-24` est un des *catalogues* hébergés par le serveur `PostGres`. `bd_2023-24` contient les
*schemas* sur lesquels nous travaillerons.

:::


Nous sommes maintenant dans une *session* du serveur 

```{.bash}
username@/tmp:bd_2023-24> \conninfo
You are connected to database "bd_2023-24" as user "username" on socket "/tmp" at port "None".
Time: 0.000s
```

Pour obtenir de l'aide, utiliser la commande `\d?` et laissez vous guider.


Nous nous intéresserons en général à un ensemble de tables formant un schéma. 
Ici, nous choisissons comme schéma par défaut `world` et nous affichons les tables du schéma. 


```{.bash}
username@/tmp:bd_2023-24> set search_path to world ;
SET
Time: 0.001s
username@/tmp:bd_2023-24> \dt
+--------+-----------------+-------+-----------+
| Schema | Name            | Type  | Owner     |
|--------+-----------------+-------+-----------|
| world  | city            | table | boucheron |
| world  | country         | table | boucheron |
| world  | countrylanguage | table | boucheron |
+--------+-----------------+-------+-----------+
SELECT 3
Time: 0.011s
username@/tmp:bd_2023-24> ...
```

# Connexions `ssh` sous `windows`

[]()

# Connexions `ssh` avec *tunnel*


```{.bash}
$ ssh -f username@etu-pgsql.math.univ-paris-diderot.fr -L 5436:localhost:5432 -N
(username@etu-pgsql.math.univ-paris-diderot.fr) Password for username@etu-pgsql.math.univ-paris-diderot.fr:
$ 
```


::: {.callout-note}

### Renvoi de port  `-L 5436:localhost:5432`


:::


::: {.callout-note}

### Pourquoi `-N` ?

:::

On peut maintenant lancer un client sur sa propre machine (`localhost`) en précisant qu'on s'adresse au port *local* 
`5436` (ou le port que vous choisissez), la requête de conexion au serveur PostGres distant sera transmise par le *tunnel* : elle sera envoyée sur le port *officiel* `5432`  de la machine distante. Une fois la *session* établie,
tout se passsera comme précédemment (ou presque).


```{.bash}
$ pgcli -d bd_2023-24 -h localhost -p 5436 -u username
Server: PostgreSQL 13.8
Version: 3.5.0
Home: http://pgcli.com
bd_2023-24> \dn
+----------------+--------------+
| Name           | Owner        |
|----------------+--------------|
...
...
```


# Client `dbeaver`

Le mécanisme du tunnel `ssh` peut être utilisé pour connecter un client plus ambitieux au serveur. 
Le client [`dbeaver`]() est particulièrement facile à utiliser. 





