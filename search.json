[
  {
    "objectID": "computing-pipelines.html",
    "href": "computing-pipelines.html",
    "title": "Pipelines",
    "section": "",
    "text": "Interroger une base de données avec R (via ODBC)\n\n\nInterroger une base de données avec Python (via ODBC)"
  },
  {
    "objectID": "weeks/week-1.html",
    "href": "weeks/week-1.html",
    "title": "Semaine 1",
    "section": "",
    "text": "Important\n\n\n\n\nCours magistral en Amphi 1 Olympe de Gouges\nTD/TP 2004-2006 Étage 2 Sophie Germain",
    "crumbs": [
      "Weekly materials",
      "Week 1"
    ]
  },
  {
    "objectID": "weeks/week-1.html#préparer",
    "href": "weeks/week-1.html#préparer",
    "title": "Semaine 1",
    "section": "Préparer",
    "text": "Préparer",
    "crumbs": [
      "Weekly materials",
      "Week 1"
    ]
  },
  {
    "objectID": "weeks/week-1.html#cours-magistral-diapositives",
    "href": "weeks/week-1.html#cours-magistral-diapositives",
    "title": "Semaine 1",
    "section": "Cours magistral : diapositives",
    "text": "Cours magistral : diapositives\nIntroduction aux Bases de Données\nIntroduction à l’algèbre relationnelle",
    "crumbs": [
      "Weekly materials",
      "Week 1"
    ]
  },
  {
    "objectID": "weeks/week-1.html#exercices-td-1",
    "href": "weeks/week-1.html#exercices-td-1",
    "title": "Semaine 1",
    "section": "Exercices : TD 1",
    "text": "Exercices : TD 1\nhtml pdf",
    "crumbs": [
      "Weekly materials",
      "Week 1"
    ]
  },
  {
    "objectID": "weeks/week-1.html#travail-personnel",
    "href": "weeks/week-1.html#travail-personnel",
    "title": "Semaine 1",
    "section": "Travail personnel",
    "text": "Travail personnel\nCC 1 2023-24\n\n\nretour à Agenda ⏎",
    "crumbs": [
      "Weekly materials",
      "Week 1"
    ]
  },
  {
    "objectID": "workshops/td10.html",
    "href": "workshops/td10.html",
    "title": "MA15Y030 - Automne 2024",
    "section": "",
    "text": "L3 MIASHS/Ingémath\nUniversité Paris Cité\nAnnée 2024-2025\nCourse Homepage\n\nMoodle\n\n\n\n\n\n\n\n\nExercice\nSoit \\(\\mathcal{A}=\\left\\{A,B,C,D,E\\right\\}\\) un schéma et soit \\(\\mathcal{A}_1=\\left\\{A,B,C\\right\\}\\). Pour chaque ensemble \\(\\Sigma\\) de dépendances fonctionnelles ci-dessous, déterminer un ensemble de DF équivalent à \\(\\pi_{\\mathcal{A}_1}(\\Sigma)\\).\n\n\\(\\Sigma=\\left\\{AB\\to DE, C\\to E, D\\to C, E\\to A\\right\\}\\)\n\\(\\Sigma=\\left\\{A\\to D, BD\\to E, AC\\to E, DE\\to B\\right\\}\\)\n\\(\\Sigma=\\left\\{AB\\to D, AC\\to E, BC\\to D, D\\to A, E\\to B\\right\\}\\)\n\\(\\Sigma=\\left\\{A\\to B, B\\to C, C\\to D, D\\to E, E\\to A\\right\\}\\)\n\n\n\nExercice\nSoit \\(\\mathcal{A}=\\left\\{A,B,C,D,E\\right\\}\\) un schéma et soit la décomposition \\(\\left\\{\\mathcal{A}_1,\\mathcal{A}_2,\\mathcal{A}_3\\right\\}\\) où \\[\\mathcal{A}_1=\\left\\{A,B,C\\right\\}\\quad \\mathcal{A}_2=\\left\\{B,C,D\\right\\}\\quad \\mathcal{A}_3=\\left\\{A,C,E\\right\\}\\] Pour chaque ensemble \\(\\Sigma\\) de dépendances fonctionnelles ci-dessous, déterminer quelles dépendances sont préservées par cette décomposition, c’est-à-dire quelles DF de \\(\\Sigma\\) sont impliquées par \\(\\bigcup_{i=1}^3 \\pi_{\\mathcal{A}_i}(\\Sigma)\\).\n\n\\(\\Sigma=\\left\\{b\\rightarrow E, CE\\rightarrow A\\right\\}\\)\n\\(\\Sigma=\\left\\{aC\\rightarrow E, BC\\to D\\right\\}\\)\n\\(\\Sigma=\\left\\{a\\rightarrow D, D\\to E, B\\to D\\right\\}\\)\n\\(\\Sigma=\\left\\{a\\rightarrow D, CD\\to E, E\\to D\\right\\}\\)\n\n\n\nExercice\nOn considère le schéma de relation suivant concernant la gestion de rendez-vous d’un service d’intervention hospitaliers. \\[\n\\mathcal{A}=\\left\\{\\texttt{IdM,NomM,PrenomM,DateRV,HeureRV,IdP,NomP,PrenomP,IdInterV}\\right\\}\n\\]\nChaque rendez-vous implique un médecin et un patient. Chaque médecin est identifié par un numéro, IdM, un nom NomM et un prénom PrenomM. Le rendez-vous est à une date, DateRV, et à une heure, HeureRV données. Chaque patient est identifié par un numéro, IdP, un nom NomP et un prénom PrenomP. Chaque rv est programmé pour un type d’intervention médical, IdInterV. On suppose que chaque jour, un médecin ne peut pratiquer qu’un seul type d’intervention médicale (consultation, type de chirurgie donnée).\nOn a les dépendances fonctionnelles \\(\\Sigma\\) suivantes:\nIdM, DateRV,HeureRV, IdInterV → IdP\nIdM, DateRV →  IdInterV\nIdM → NomM, PrenomM\nIdP → NomP, PrenomP\nIdP,DateRV,HeureRV → IdInterV\nIdP,DateRV,HeureRV →  IdM,NomM\n\nQuels sont les inconvénients d’une telle modélisation par une seule table en terme d’anomalies d’insertion ou de suppression ?\n\n\nCalculer \\([\\texttt{IdM}]^+_{\\Sigma}\\)\n\n\nProposez un ensemble d’attributs formant une clé de la relation.\n\n\nDonner un ensemble de dépendances fonctionnelles \\(\\Sigma'\\) équivalent à \\(\\Sigma\\) qui soit minimal (i.e. sans règles redondantes, notamment). Justifiez\n\nOn se donne la décomposition de \\(\\mathcal{A}\\) suivante~: \\[\n\\begin{array}{l}\n    \\mathcal{A}_1=\\left\\{\\texttt{IdM,HeureRV,DateRV,IdP,NomP,PrenomP}\\right\\},\\\\\n     \\mathcal{A}_2=\\left\\{\\texttt{IdM,DateRV,IdInterV}\\right\\},\\\\\n     \\mathcal{A}_3=\\left\\{\\texttt{IdM,NomM,PrenomM}\\right\\}\n\\end{array}\n\\]\n\nToutes les dépendances fonctionnelles sont-elles préservées par cette décomposition ?\nEst-elle sans perte d’information ?\nPour \\(i=1,2,3\\), déterminer si \\(\\mathcal{A}_i\\) est en forme normale de Boyce-Codd.\n\n\nMêmes questions pour la décomposition :\n\n\\[\n\\begin{array}{rl}\n\\mathcal{A}_1 &=\\left\\{\\texttt{IdM,HeureRV,DateRV,IdP}\\right\\}\\\\\n\\mathcal{A}_2 &=\\left\\{\\texttt{IdP,NomP,PrenomP}\\right\\}, \\\\\n\\mathcal{A}_3 &=\\left\\{\\texttt{IdM,DateRV,IdInterV}\\right\\},\\\\\n\\mathcal{A}_4 &=\\left\\{\\texttt{IdM,NomM,PrenomM}\\right\\}\n\\end{array}\n\\]\n\n\nExercice\nSoit une relation concernant des personnes résidant en France avec les attributs suivants:\nNom, Numéro de sécurité sociale, Commune, Département, Code postal, Numéro de téléphone\navec l’ensemble \\(\\Sigma\\) de DF suivantes~:\nNuméro de sécurité sociale → Nom, Commune, Département, Code postal, Numéro de téléphone \nCommune → Département \nCode postal → Commune, Département\n\nCe schéma est-il en forme normale de Boyce-Codd ?\n\nSoit la décomposition \\[\\mathcal{A}_1=\\left\\{\\texttt{Code postal}, \\texttt{Commune}, \\texttt{Département}\\right\\}\\] et \\[\\mathcal{A}_2=\\left\\{\\texttt{Numéro de sécurité sociale}, \\texttt{Nom}, \\texttt{Code postal},\\texttt{Numéro de téléphone}\\right\\}\\]\n\nChaque \\(\\mathcal{A}_i\\) est-elle en forme normale de Boyce-Codd ?\nCette décomposition préserve-t-elle les dépendances fonctionnelles ?\nCette décomposition est-elle sans perte d’information ?\nMêmes questions pour la décomposition \\[\\mathcal{A}_1=\\left\\{\\texttt{Commune}, \\texttt{Département}\\right\\}\\]\n\n\\[\\mathcal{A}_2=\\left\\{\\texttt{Numéro de sécurité sociale}, \\texttt{Nom}, \\texttt{Commune}, \\texttt{Code postal},\\texttt{Numéro de téléphone}\\right\\}\\]\n\n\nExercice\nSoit un schéma d’attributs \\(A_1, A_2,\\dots A_n\\) et un ensemble de dépendances fonctionnelles. Calculer le nombre de super-clefs (en fonction de \\(n\\)) dans les cas suivants~:\n\nLa seule clef est \\(\\left\\{A_1\\right\\}\\).\nLes seules clefs sont \\(\\left\\{A_1\\right\\}\\) et \\(\\left\\{A_2\\right\\}\\).\nLes seules clefs sont \\(\\left\\{A_1,A_2\\right\\}\\) et \\(\\left\\{A_3,A_4\\right\\}\\).\nLes seules clefs sont \\(\\left\\{A_1,A_2\\right\\}\\) et \\(\\left\\{A_1,A_3\\right\\}\\).\n\n\n\nExercice\nSoit le schéma \\(\\mathcal{A}=\\{A,B,C,D\\}\\) et l’ensemble de dépendances fonctionnelles \\[\\Sigma = \\{ A \\to B, B \\to C\\} \\]\n\nQuelle est la fermeture \\(\\{A\\}^+\\) de \\(\\{A\\}\\) ?\n\n\nQuelles sont les super-clés ? Les clés ?\n\n\n\nExercice\nSoit le schéma \\(\\mathcal{A}=\\{A,B,C,D,E,F\\}\\) et l’ensemble de dépendances fonctionnelles \\[\\Sigma = \\Bigl\\{ \\left\\{A,B\\right\\}\\to C, \\left\\{B,C\\right\\}\\to \\left\\{A,D\\right\\}, D\\to E, \\left\\{C,F\\right\\}\\to B \\Bigr\\}\\]\n\nCalculer la fermeture \\(\\left\\{A,B\\right\\}^+\\) de \\(\\left\\{A,B\\right\\}\\).\nEst-ce que \\(\\Sigma\\) implique la dépendance fonctionnelle \\(\\left\\{A,B\\right\\}\\to D\\)~?\nEst-ce que \\(\\Sigma\\) implique la dépendance fonctionnelle \\(D\\to A\\)~?\n\n\n\n\nExercice\nOn considère une schéma \\(\\mathcal{A}\\) avec les attributs\nPropriétaire, Occupant, Adresse, Noapt, Nbpièces, Nbpersonnes\nUn nuplet/tuple (p, o, a, n, nb1, nb2) ayant la signification suivante : La personne o habite avec nb2 personnes l’appartement de numéro n ayant nb1 pièces dont le propriétaire est p.\nUne analyse de cette relation nous fournit un ensemble initial \\(\\Sigma\\) de dépendances fonctionnelles\nOccupant → Adresse\nOccupant → Noapt\nOccupant → Nbpersonnes\nAdresse, Noapt → Proprietaire\nAdresse, Noapt → Occupant\nAdresse, Noapt → Nbpieces\n\nDéterminer les clés du schémas\nLes schéma est-il en FN3 ?\nSi la réponse est Non, décomposer sans perte d’information et sans perte de dépendances fonctionnelles.\n\n\n\nExercice\n\nSoit le schéma \\[\\mathcal{A}=\\{\\texttt{IdLivre, Titre, Langue, Pays, IdTraducteur, Nom, Date}\\}\\] et l’ensemble de DF\nIdLivre → Titre \nLangue → Pays \nIdTraducteur → Nom \nIdLivre, IdTraducteur, Langue → Date\nIdLivre, IdTraducteur → Langue\nAppliquer l’algorithme de décomposition vu en cours pour obtenir une décomposition de \\(\\mathcal{A}\\) qui respecte la FNBC et est sans perte d’information. Déterminer quelles DF sont préservées.\n\n\nExercice\nSoit le schéma \\[\\mathcal{A}=\\left\\{\\texttt{A,B,C,D,E,F,G,H}\\right\\}\\] et l’ensemble de DF\nBE → AC  \nB → H  \nF → CD  \nD → G\n\nAppliquer l’algorithme de décomposition vu en cours pour obtenir une décomposition de \\(\\mathcal{A}\\) qui respecte la FNBC et est sans perte d’information. Déterminer quelles DF sont préservées.\nPeut-on, en ajoutant un sous-schéma à la décomposition, obtenir une décomposition FNBC sans perte d’information et sans perte de DF ?\n\n\n\nExercice\nReprendre les questions de l’exercice précédent pour le schéma \\[\\mathcal{A}=\\left\\{\\texttt{A,B,C,D,E,F,G,H}\\right\\}\\] et l’ensemble de DF\nBE → AC  \nB → H\nF → CD\nD → G\nA→ E"
  },
  {
    "objectID": "workshops/td-admin.html#administration-sous-postgres",
    "href": "workshops/td-admin.html#administration-sous-postgres",
    "title": "MA15Y030 - Automne 2024",
    "section": "Administration sous Postgres",
    "text": "Administration sous Postgres\nDes outils d’administration importants d’une base de données postgres se trouvent dans deux schémas appelés :\n\ninformation_schema\npg_catalog\n\nCes deux schémas et les tables qu’ils contiennent permettent de retrouver toutes les informations concernant les schémas, tables, utilisateurs, fonctions, etc présentes dans la base de données.\nPour faciliter l’administration de la base et obtenir un certain nombre d’informations basiques, des commandes sont définies dans postgres. On peut en avoir la liste par l’instruction \\? (vous connaissez déjà \\d). Ces commandes sont, en fait, des raccourcis (des macros) en lieu et place de requêtes SQL plus ou moins complexes portant sur les objets des schémas information_schema et pg_catalog.\nLes questions ci-dessous permettent de faire connaissance avec les schémas d’administration à travers quelques requêtes à générer.\n\nDans information_schema la table tables contient le nom (et bien plus) des tables de la base. Examinez la structure de la table tables par l’instruction \\d information_schema.tables (il faut au préalable fixer le search_path pour y inclure information_schema).\n\nLister juste les noms de toutes les tables.\n\nEn utilisant seulement la table tables de information_schema, lister les noms des tables du schema world puis du schéma information_schema\n\n\nD’après la requête précédente, une des tables du schéma information_schema s’appelle schemata.\n\nExaminer cette table et en déduire une liste de tous les schémas de la base\n\nUne des tables du schéma information_schema s’appelle columns. Essayez de comprendre la nature des informations présentes dans cette table. Écrire une requête qui renvoie les mêmes informations que l’instruction \\d world.country. Améliorer votre requête pour qu’elle affiche exactement la même chose que \\d world.country.\n\n\nListez les noms de tables qui apparaissent dans au moins deux schémas. On donnera aussi les (deux) schémas concernés dans le résultat.\n\n\nListez les noms de colonnes (attributs) qui apparaissent dans au moins deux tables du même schéma. On donnera aussi le nom des tables et du schéma dans le résultat (on pourra exclure information_schema et pg_catalog).\n\n\nListez les définitions de toutes les vues que vous avez écrites. Listez celles qui commencent pas ‘q’.\n\n\nLa vue pg_roles contient les identifiants des différents rôles. Trouvez celui du rôle isifar2022.\n\n\nÀ l’aide de la réponse à la question précédente, listez les noms des schémas des utilisateurs (rôles) qui ont aussi le rôle isifar2022"
  },
  {
    "objectID": "workshops/td-admin.html#droits",
    "href": "workshops/td-admin.html#droits",
    "title": "MA15Y030 - Automne 2024",
    "section": "Droits",
    "text": "Droits\n\nCréer dans votre schéma une table matable_etudiant par copie de la table datatpadmin du schema durand. Sélectionner les tuples de la table crée : il contiennent des informations (aléatoire) pour chacun des utilisateurs du groupe.\n\nDonner les droits de sélection sur cette table à l’utilisateur de votre choix ou au groupe entier). Vérifier que cela marche.\nEnlever les droits de sélection à cet utilisateur\n\nOn suppose maintenant que vous souhaitez accorder des droits de sélection à chacun des étudiants du groupe mais uniquement pour les données qui le concerne. Par exemple, s’il existe des tuples dont la valeur pour identifiant est johnsmith, l’utilisateur johnsmith doit pouvoir sélectionner ces tuples mais aucun autre. Proposez une manière de réaliser cette politique de sécurité ?\n\nIndication: on pourra s’appuyer sur la création d’une vue. Regardez aussi la documentation de la variable CURRENT_USER.\n\nDans la continuité de la question précédente, accordez à chaque utilisateur le droit de modifier les tuples qui le concerne dans votre table."
  },
  {
    "objectID": "workshops/td1.html#schémas",
    "href": "workshops/td1.html#schémas",
    "title": "Récapitulatif",
    "section": "Schémas",
    "text": "Schémas\nLes schémas sont une abstraction spécifique à PostgreSQL. Les schémas permettent de faire cohabiter sur une même base de données (ou catalogue dans le jargon PostgreSQL) plusieurs ensembles d’informations de nature différentes. On peut indiquer à pgcli, psql ou un autre client (dbeaver ou autre) quels schémas on veut utiliser par défaut.\nDans ce TP, nous allons nous concentrer sur le schéma world qui contient des informations concernant des villes et des pays/territoires du monde entier. Au cours de ce semestre, nous serons amenés à utiliser d’autres schémas : pagila qui contient des informations concernant des films, …\nPour lister et modifier les schémas de votre environnement de travail:\nbd_2023-24&gt; SHOW search_path ;                  -- lister\nbd_2023-24&gt; SET search_path TO world, public ;  -- modifier\nbd_2023-24&gt; SHOW search_path ;       -- visualiser \nLister les schémas du catalogue bd_2023-24.\n\\dn\nPour lister les tables des schemas inscrits sur votre search_path.\nbd_2023-24&gt; \\d\n+----------+---------------------+--------+----------+\n| Schema   | Name                | Type   | Owner    |\n|----------+---------------------+--------+----------|\n| world    | city                | table  | postgres |\n| world    | country             | table  | postgres |\n| world    | countrylanguage     | table  | postgres |\n+----------+---------------------+--------+----------+\nVue d’ensemble du schéma world"
  },
  {
    "objectID": "workshops/td1.html#suggestion",
    "href": "workshops/td1.html#suggestion",
    "title": "Récapitulatif",
    "section": "Suggestion",
    "text": "Suggestion\nSi vous travaillez avec pgcli/psql, utilisez en local votre éditeur préféré (emacs, vi, sublime text, visual studio code, …), transférez votre script sql grâce à scp, et chargez le script dans votre session psql/pgcli à l’aide de \\\\i."
  },
  {
    "objectID": "workshops/td1.html#tables",
    "href": "workshops/td1.html#tables",
    "title": "Récapitulatif",
    "section": "Tables",
    "text": "Tables\nPour voir la définition (c’est-à-dire les différentes colonnes) d’une table:\nbd_2023-24&gt; \\d world.country\n\n+--------------------+---------------+-------------+\n| Column             | Type          | Modifiers   |\n|--------------------+---------------+-------------|\n| countrycode        | character(3)  |  not null   |\n| name_country       | text          |  not null   |\n| continent          | text          |  not null   |\n| region             | text          |  not null   |\n| surfacearea        | real          |  not null   |\n| indepyear          | smallint      |             |\n| population_country | integer       |  not null   |\n| lifeexpectancy     | real          |             |\n| gnp                | numeric(10,2) |             |\n| gnpold             | numeric(10,2) |             |\n| localname          | text          |  not null   |\n| governmentform     | text          |  not null   |\n| headofstate        | text          |             |\n| capital            | integer       |             |\n| code2              | character(2)  |  not null   |\n+--------------------+---------------+-------------+"
  },
  {
    "objectID": "workshops/td1.html#explorer-les-possibilités-de-psql-ou-de-pgcli",
    "href": "workshops/td1.html#explorer-les-possibilités-de-psql-ou-de-pgcli",
    "title": "Récapitulatif",
    "section": "Explorer les possibilités de psql ou de pgcli",
    "text": "Explorer les possibilités de psql ou de pgcli\nbd_2023-24&gt; \\?\nDans la deuxième partie du TP, on s’intéresse aux requêtes, c’est-à-dire, les moyens d’extraire une information pertinente d’une base de données."
  },
  {
    "objectID": "workshops/td4bis.html#over-partition-by",
    "href": "workshops/td4bis.html#over-partition-by",
    "title": "Fonctions fenêtres/Window functions",
    "section": "OVER (PARTITION BY …)",
    "text": "OVER (PARTITION BY …)\nCette construction peut être combinée avec n’importe quelle fonction d’aggrégation.\nCette requête indique pour chaque ville, la “population moyenne” des villes de ce pays (cette moyenne n’a aucun sens).\nSELECT id, name_city, population_city, \n       avg(population_city) OVER (PARTITION BY countrycode)  AS avg_pop\nFROM world.city;  \nSans le mécanisme de fenêtrage, on pourrait obtenir le résultat au prix d’une jointure\n WITH tmp AS (\n  SELECT c.countrycode, AVG(c.population_city) AS avg_pop\n  FROM world.city c\n  GROUP BY c.countrycode\n ) \n  SELECT cc.id, cc.name_city, cc.population_city, tmp.avg_pop\n  FROM world.city cc NATURAL JOIN tmp;"
  },
  {
    "objectID": "workshops/td4bis.html#over-partition-by-order-by",
    "href": "workshops/td4bis.html#over-partition-by-order-by",
    "title": "Fonctions fenêtres/Window functions",
    "section": "OVER (PARTITION BY … ORDER BY)",
    "text": "OVER (PARTITION BY … ORDER BY)\nOn peut partitioner et trier.\nCette construction est très pratique pour ranger les tuples d’un sous-groupe.\nDans world, si on veut ranger les langues parlées dans un pays par popularité décroissante, on peut procéder ainsi.\nSELECT countrycode, LANGUAGE, \nRANK() OVER (PARTITION BY countrycode ORDER BY percentage DESC)  AS rnk\nFROM world.countrylanguage ;"
  },
  {
    "objectID": "workshops/td4bis.html#rank-over",
    "href": "workshops/td4bis.html#rank-over",
    "title": "Fonctions fenêtres/Window functions",
    "section": "RANK() OVER ()",
    "text": "RANK() OVER ()\nOn peut ne pas partitionner en utilisant l’expression OVER (). Par exemple, si on veut obtenir le rang des tuples d’une table sur un tri particulier.\nSELECT countrycode, name_country, \n       RANK() OVER (ORDER BY population_country DESC)  AS rnk\nFROM world.country ;"
  },
  {
    "objectID": "workshops/td4bis.html#autres-types-de-fenêtres",
    "href": "workshops/td4bis.html#autres-types-de-fenêtres",
    "title": "Fonctions fenêtres/Window functions",
    "section": "Autres types de fenêtres",
    "text": "Autres types de fenêtres\nLa construction OVER ( ...) n’est pas utilisée exclusivement avec des partitions (peut-être triviales), on peut aussi définir des fenêtres glissantes.\nLes fonctions fenêtre ne sont autorisées que dans la liste SELECT et la clause ORDER BY de la requête. Elles sont interdites ailleurs, par exemple dans les clauses GROUP BY, HAVING et WHERE."
  },
  {
    "objectID": "workshops/td4bis.html#forme-générale",
    "href": "workshops/td4bis.html#forme-générale",
    "title": "Fonctions fenêtres/Window functions",
    "section": "Forme générale",
    "text": "Forme générale\nCREATE OR REPLACE FUNCTION  schema_name.func_name(p_arg1 p_arg1_datatype, ..., [OUT o_arg1 o_arg1_datatype, ...])\nRETURNS some type | RECORD | SETOF some type | TABLE (..) \nLANGUAGE SQL AS\n$$\nSQL statement ;\nSQL statement ;\n...\nSQL statement ;\n$$ ;"
  },
  {
    "objectID": "workshops/td4bis.html#fonctions-qui-retournent-un-type-simple",
    "href": "workshops/td4bis.html#fonctions-qui-retournent-un-type-simple",
    "title": "Fonctions fenêtres/Window functions",
    "section": "Fonctions qui retournent un type simple",
    "text": "Fonctions qui retournent un type simple\nDans le schéma world, on veut écrire une fonction qui prend en argument une région et renvoie la population maximale parmi les capitales de la région (voir td2 requête 1).\nCREATE OR REPLACE FUNCTION username.taille_max_capitale_region(p_region text)\nRETURNS INTEGER LANGUAGE SQL AS\n$$\nSELECT MAX(population_city) AS max_pop\nFROM world.country c JOIN world.city cc ON (c.capital=cc.id)\nWHERE c.region=p_region AND cc.population_city IS NOT NULL;\n$$ ;"
  },
  {
    "objectID": "workshops/td4bis.html#fonctions-qui-retournent-un-type-composé",
    "href": "workshops/td4bis.html#fonctions-qui-retournent-un-type-composé",
    "title": "Fonctions fenêtres/Window functions",
    "section": "Fonctions qui retournent un type composé",
    "text": "Fonctions qui retournent un type composé\nDans le schéma world, on veut écrire une fonction qui prend en argument une région et renvoie le nom et la population de la capitale la plus peuplée de cette région (voir td2 requête 1).\nOn peut utiliser le qualifiant OUT pour désigner des paramètres de sortie.\nCREATE OR REPLACE FUNCTION username.capitale(p_region text, OUT o_name_capital TEXT, OUT o_population_capital INTEGER)\nRETURNS RECORD  LANGUAGE SQL AS\n$$\nWITH r AS(\n  SELECT cc.*, RANK() OVER (PARTITION BY c.region \n                            ORDER BY cc.population_city DESC) AS rnk\n  FROM world.country c JOIN world.city cc ON (c.capital=cc.id)\n  WHERE c.region=p_region)\nSELECT r.name_city,  r.population_city\nFROM r \nWHERE r.rnk = 1 ;\n$$ ;"
  },
  {
    "objectID": "workshops/td4bis.html#fonctions-qui-retournent-un-type-composé-défini-par-les-lignes-dune-table",
    "href": "workshops/td4bis.html#fonctions-qui-retournent-un-type-composé-défini-par-les-lignes-dune-table",
    "title": "Fonctions fenêtres/Window functions",
    "section": "Fonctions qui retournent un type composé défini par les lignes d’une table",
    "text": "Fonctions qui retournent un type composé défini par les lignes d’une table\nDans le schéma world, on veut écrire une fonction qui prend en argument une région et renvoie la description de la capitale la plus peuplée de cette région (voir td2 requête 1).\nCREATE OR REPLACE FUNCTION username.capitale(p_region text)\nRETURNS world.city  LANGUAGE SQL AS\n$$\nWITH r AS(\n  SELECT cc.*, RANK() OVER (PARTITION BY c.region \n                            ORDER BY cc.population_city DESC) AS rnk\n  FROM world.country c JOIN world.city cc ON (c.capital=cc.id)\n  WHERE c.region=p_region\n)\nSELECT r.id, r.name_city, r.countrycode, r.district, r.population_city\nFROM r \nWHERE r.rnk = 1 ;\n$$ ;"
  },
  {
    "objectID": "workshops/td4bis.html#fonctions-qui-retournent-une-table",
    "href": "workshops/td4bis.html#fonctions-qui-retournent-une-table",
    "title": "Fonctions fenêtres/Window functions",
    "section": "Fonctions qui retournent une table",
    "text": "Fonctions qui retournent une table\nDans le schéma world, on veut écrire une fonction qui prend en argument une région et renvoie la table des capitales de la région (voir td2 requête 1).\n\nTable de schéma explicite\nOn se contente d’abord de renvoyer le nom de la capitale. On explicite le schéma de la table résultat\nCREATE OR REPLACE FUNCTION username.capitales_region(p_region text)\nRETURNS TABLE (name_capital text) LANGUAGE SQL AS\n$$\nSELECT cc.name_city \nFROM world.country c JOIN world.city cc ON (c.capital=cc.id)\nWHERE c.region=p_region ;\n$$ ;\n\n\nTable de même schéma qu’une autre table\nDocumentation\nOn veut maintenant récupérer une table de même schéma que city.\n\n\n\n\n\n\nLa solution est très simple. On profite de ce qu’à chaque table correspond un type de même nom et on utilise le mot-clé SETOF.\n\n\n\nCREATE OR REPLACE FUNCTION username.capitales_region_large(p_region text)\nRETURNS SETOF world.city  LANGUAGE SQL AS\n$$\nSELECT cc.* \nFROM world.country c JOIN world.city cc ON (c.capital=cc.id)\nWHERE c.region=p_region ;\n$$ ;"
  },
  {
    "objectID": "workshops/td11.html",
    "href": "workshops/td11.html",
    "title": "MA15Y030 - Automne 2024",
    "section": "",
    "text": "L3 MIASHS/Ingémath\nUniversité Paris Cité\nAnnée 2024-2025\nCourse Homepage\n\nMoodle\n\n\n\n\n\n\n\n\nExercice\nSoit le schéma \\[\\mathcal{A}=\\left\\{\\texttt{A,B,C,D,E,F,G,H}\\right\\}\\] et l’ensemble de DF\nBE → AC  \nB → H  \nF → CD  \nD → G\n\nAppliquer l’algorithme de décomposition vu en cours pour obtenir une décomposition de \\(\\mathcal{A}\\) qui respecte la FNBC et est sans perte d’information. Déterminer quelles DF sont préservées.\nPeut-on, en ajoutant un sous-schéma à la décomposition, obtenir une décomposition FNBC sans perte d’information et sans perte de DF ?\n\n\n\nExercice\nReprendre les questions de l’exercice précédent pour le schéma \\[\\mathcal{A}=\\left\\{\\texttt{A,B,C,D,E,F,G,H}\\right\\}\\] et l’ensemble de DF\nBE → AC  \nB → H\nF → CD\nD → G\nA→ E"
  },
  {
    "objectID": "workshops/td2.html#schéma-world-rappel",
    "href": "workshops/td2.html#schéma-world-rappel",
    "title": "MA15Y030 - Automne 2024",
    "section": "Schéma world (rappel)",
    "text": "Schéma world (rappel)\nUtiliser les commandes suivantes pour retrouver les schémas de tables country, countrylanguage et city.\nbd_2023&gt; \\d world.\"nom de table\"\nVue d’ensemble du schéma world"
  },
  {
    "objectID": "workshops/td2.html#écriture-de-requêtes",
    "href": "workshops/td2.html#écriture-de-requêtes",
    "title": "MA15Y030 - Automne 2024",
    "section": "Écriture de requêtes",
    "text": "Écriture de requêtes\nPour extraire des informations d’une base de données, on utilise l’algèbre relationnelle (pour la théorie) et le langage SQL (pour la pratique).\n\n\n\n\n\n\n\n\nOpération\nAlgèbre rel.\nSQL\n\n\n\n\nProjection\n\\(\\Pi_{\\text{liste d'attributs}}(R)\\)\nSELECT attributs FROM  R\n\n\nSélection\n\\({\\Large \\sigma}_{\\text{condition}}{R}\\)\nSELECT * FROM R WHERE condition\n\n\nRenommage\n\\(\\rho_{\\text{nom1} \\rightarrow \\text{nom2}}(R)\\)\nSELECT nom1 AS nom2 FROM table1 AS table2\n\n\nUnion\n\\(R \\cup S\\)\n(SELECT * FROM R) UNION (SELECT * FROM S)\n\n\nDifférence\n\\(R - S\\)\n(SELECT * FROM R) EXCEPT (SELECT * FROM S)\n\n\nProduit\n\\(R \\times S\\)\nSELECT * FROM R,S\n\n\nIntersection\n\\(R \\cap S\\)\n(SELECT * FROM R) INTERSECT (SELECT * FROM S)"
  },
  {
    "objectID": "workshops/td2.html#opérations-avancées",
    "href": "workshops/td2.html#opérations-avancées",
    "title": "MA15Y030 - Automne 2024",
    "section": "Opérations avancées",
    "text": "Opérations avancées\n\nJointures\nLa jointure est une opération qui permet de recoller deux relations ensemble. On la note avec le signe \\(\\bowtie_C\\) où \\(C\\) est une condition. Formellement, ce n’est qu’une sélection selon la condition \\(C\\) d’un produit cartésien, c’est-à-dire, par définition : \\[R {\\Large \\bowtie}_C S = {\\Large \\sigma}_{C}{(R \\times S)}.\\]\nCette opération est très courante dans les requêtes. Cela vient du fait que les bases de données sont conçues pour ne pas avoir d’information redondante.\nPrenons l’exemple du schéma world et des tables world.country et world.city. La table world.country possède une colonne capital qui contient le numéro d’identification d’une ville de la table world.city. Par exemple, pour la France, la colonne capital vaut 2974 et la ville numéro 2974 est Paris:\nbd_2023-24&gt; SELECT capital \nFROM world.country \nWHERE countrycode='FRA';\nbd_2023-24&gt; SELECT name \nFROM world.city \nWHERE id = 2974;\nPour lister les noms des capitales mondiales, on va avoir besoin de recoller les deux tables en prenant soin de respecter la condition d’égalité entre la capitale et le numéro d’identification de la ville. Cela peut s’écrire en SQL comme suit:\nSELECT name\nFROM world.city AS V JOIN \n     world.country AS P ON \n     V.id = P.capital;\nParfois, on veut recoller deux tables avec la condition que les colonnes qui ont le même nom doivent être égales. Cela arrive souvent si la base de données a bien été conçue. On appelle cette jointure une jointure naturelle, qu’on peut écrire avec NATURAL JOIN. La requête\nSELECT name \nFROM world.city NATURAL JOIN world.country\nWHERE continent = 'Oceania';\nrenvoie la liste des villes d’Océanie. La jointure est faite implicitement sur la condition\nworld.city.countrycode = world.country.countrycode\nla table résultante n’aura qu’une seule colonne countrycode. Si l’on souhaite ne faire la jointure naturelle que sur un sous-ensemble a1,...,ak des attributs communs, on peut utiliser JOIN ... USING (a1,...,ak).\n\n\nRequêtes nommées : utilisation de WITH\nLorsque les requêtes se compliquent, il est parfois commode de la découper en plusieurs requêtes qu’on manipulera par la suite. Par exemple, trouver le nom des capitales européennes ayant plus d’un million d’habitants peut se découper ainsi: on résout la requête CAP qui contient le nom, le continent et la population des capitales. Puis on résout la requête finale en filtrant CAP. Cela peut s’écrire avec l’opérateur WITH:\nWITH CAP AS (\nSELECT name, continent, population\nFROM world.city AS V JOIN \n     world.country AS P ON  V.id=P.capital\n)\n\nSELECT name\nFROM CAP\nWHERE continent = 'Europe' AND population &gt; 1000000;"
  },
  {
    "objectID": "workshops/td2.html#requêtes",
    "href": "workshops/td2.html#requêtes",
    "title": "MA15Y030 - Automne 2024",
    "section": "Requêtes",
    "text": "Requêtes\n\nQuels sont les noms des capitales Sud-Américaines ? (14 lignes)\n\n\nQuels sont les noms des pays où le français est langue officielle ? (18 lignes)\n\n\nQuels sont les pays dont le gouvernement est monarchique (constitutionnelle ou pas) ? (43 lignes)\n\n\nQuelles sont les monarchies d’Europe dont la capitale compte moins d’un million d’habitants ? (8 lignes)\n\n\nQuelles sont les régions où on ne trouve pas de monarchie ? (9 lignes)\n\n\nQuelles sont les langues qui ne sont langues officielles dans aucun pays ? (355 lignes)\n\n\nQuels sont les pays qui n’ont pas de langue officielle ? (49 lignes)\n\n\nQuels sont les pays dont la seule langue officielle est le français ? (9 lignes)\n\n\nLes noms des pays où le français n’est pas la seule langue officielle. (9 lignes)\n\n\nQuelles sont les régions qui ne comportent qu’une seule forme de gouvernement ? (3 lignes)\n\n\nQuelles sont les langues officielles des pays dont la capitale compte plus de 5 000 000 d’habitants ? (12 lignes)\n\n\nQuels sont les pays où au moins trois langues sont parlées chacune par strictement plus de \\(10\\%\\) de la population ? (35 lignes)\n\n\nQuelles sont les régions où il existe deux pays dont les espérances de vie diffèrent par au moins \\(10\\) ans ? (16 lignes)\n\n\nQuels sont les pays où l’anglais et le français sont des langues officielles ? (3 lignes)\n\n\nMontrer comment calculer l’intersection de deux tables avec une jointure (sous certaines conditions)."
  },
  {
    "objectID": "cours-equipe.html",
    "href": "cours-equipe.html",
    "title": "Équipe enseignante",
    "section": "",
    "text": "S. Boucheron Professeur de Mathématiques à l’Université Paris Cité/Laboratoire de Probabilités, Statistiques et Modélisatiion LPSM.",
    "crumbs": [
      "Course information",
      "Équipe"
    ]
  },
  {
    "objectID": "cours-equipe.html#cours",
    "href": "cours-equipe.html#cours",
    "title": "Équipe enseignante",
    "section": "",
    "text": "S. Boucheron Professeur de Mathématiques à l’Université Paris Cité/Laboratoire de Probabilités, Statistiques et Modélisatiion LPSM.",
    "crumbs": [
      "Course information",
      "Équipe"
    ]
  },
  {
    "objectID": "cours-equipe.html#travaux-dirigés",
    "href": "cours-equipe.html#travaux-dirigés",
    "title": "Équipe enseignante",
    "section": "Travaux dirigés",
    "text": "Travaux dirigés\n\n\n\n\n\n\n\n\n\n\nNom\nHoraire\nSalle\n\n\n\n\n\nStéphane Boucheron\nVendredi 14h45 - 17h15\n2004 Sophie Germain\n\n\n\nSylvain Schmitz\nVendredi 14h45 - 17h15\n2005 Sophie Germain\n\n\n\nxxx xxx\nVendredi 14h45 - 17h15\n2006 Sophie Germain",
    "crumbs": [
      "Course information",
      "Équipe"
    ]
  },
  {
    "objectID": "exams/cc3-2023-12-08.html",
    "href": "exams/cc3-2023-12-08.html",
    "title": "MA15Y030 - Automne 2024",
    "section": "",
    "text": "L3 MIASHS/Ingémath\nUniversité Paris Cité\nAnnée 2023-2024\nCourse Homepage\n\nMoodle\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPas de documents autorisés\nPas de téléphone portable\n\n\n\n\n\n\n\n\n\n\nRappel de notation\n\n\n\nDans le formalisme Entité-Association, nous utilisons les pattes de corbeau (crowfoot) pour décrire les contraintes de cardinalités.\n\n\n\n\n\n\n\n\n\n\n\n\n\nerDiagram\n\nA }|..|{ B : foo\n\n\n\n\n\n\nL’entité A est reliée à l’entité B par l’association foo. Une instance de A peut apparaître de \\(1\\) à \\(n\\) fois parmi les instances de l’association foo, de même une instance de B peut apparaître de \\(1\\) à \\(n\\) fois parmi les instances de l’association foo.\n\n\n\n\n\n\n\nerDiagram\n\nA }|..o| B : bar\n\n\n\n\n\n\nL’entité A est reliée à l’entité B par l’association bar. Une instance de A peut apparaître de \\(0\\) à \\(1\\) fois parmi les instances de l’association bar, une instance de B peut apparaître de \\(1\\) à \\(n\\) fois parmi les instances de l’association bar.\n\n\n\n\n\n\n\n\n\nNotez que la contrainte portant sur le nombre de participations des instances d’une entité à une association apparaît à l’opposé de l’entité.\n\n\n\n\nUn système d’information pour l’administration\nUn pays (par exemple France) est organisé en régions (par exemple Bretagne, …). Les régions sont identifiées par leur nom. Ces régions sont-elles même divisées en départements (par exemple Finistère). Les départements sont identifiés par de numéros (par exemple 29 pour le Finistère). Les départments possèdent aussi un nom qui les distingue.\nDans chaque département, il y a des communes qui portent des noms, éventuellement précédés d’un article (par exemple Le Mans, Le Bourget, …). Pour chaque département, les communes sont numérotées à l’aide de leur rang dans l’ordre alphabétique construit sur les noms privés de l’éventuel article (dans la Sarthe, 72, Le Mans est au rang 181 entre Mamers et Mansigné).\nPour chaque commune et chaque année, on connaît le montant total perçu au titre de la taxe foncière.\nChaque année, on procède à un recensement dans chaque commune. On en connaît la population.\nChaque région a une préfecture de région, et chaque département a une préfecture de département.\nOn a cherché à modéliser cette description en formalisme Entité-Association comme suit.\n\n\n\n\n\n%%{init: { \"sequence\": { \"wrap\": true} } }%%\nerDiagram \n    DEPARTEMENT }|..|{ REGION : contient\n    DEPARTEMENT {\n        string nom\n        int departement \n    }\n    REGION ||..o| VILLE : prefecture\n    REGION {\n        string nom   \n    }\n    REGION ||..|{ VILLE : contient\n    DEPARTEMENT |o..|| VILLE : prefecture\n    VILLE {\n        string nom\n        string article\n        int numero       \n    }\n    \n    RECENSEMENT ||..|{ VILLE : concerne\n    RECENSEMENT {\n      int annee \n      int population\n    }\n    TAXE ||..|{ VILLE : rapporte\n    TAXE {\n      int annee\n      int valeur\n    }\n\n\n\n\n\n\n\n\n\n\n\n\nQuestion 1\n\n\n\n\nUn certain nombre d’erreurs se sont glissées dans ce schéma Entité-Association. Corrigez-le.\nProposez un identifiant pour chaque entité.\nDésignez les entités faibles.\n\n\n\n\nSoit le schéma \\(\\mathcal{A}=\\left\\{\\texttt{A},\\texttt{B},\\texttt{C},\\texttt{D},\\texttt{E},\\texttt{F}\\right\\}\\) et l’ensemble \\(\\Sigma\\) de DF\n   A,B → C\n     B → F  \n   C,E → A  \n     F → E\n\n\n\n\n\n\nQuestion 2\n\n\n\nCalculer la clôture/fermeture \\(\\{\\texttt{A},\\texttt{B}\\} = [\\{\\texttt{A},\\texttt{B}\\}]_{\\Sigma}^+\\) de \\(\\{\\texttt{A},\\texttt{B}\\}\\) en utilisant l’ensemble de DF \\(\\Sigma\\).\n\n\n\n\n\n\n\n\nQuestion 3\n\n\n\nQuelles sont les clefs du schéma \\(\\mathcal{A}\\) en utilisant l’ensemble de DF \\(\\Sigma\\) ?\n\n\n\nOn travaillera par la suite sur le schéma relationnel villes et les tables définies par le code SQL suivant.\n\n\n\n\nCREATE SCHEMA villes;\n\nCREATE TABLE villes.region (\n  nom varchar NOT NULL PRIMARY KEY,\n  prefecture_num int4 NULL,\n  prefecture_dep int4 NULL\n);\n\nCREATE TABLE villes.departement (\n  nom varchar NULL UNIQUE,\n  departement int4 NOT NULL PRIMARY KEY,\n  region varchar NULL REFERENCES villes.region(nom)\n    ON DELETE SET NULL ON UPDATE CASCADE,\n  numero int4 NULL\n);\n\nCREATE TABLE villes.ville (\n  nom varchar NULL,\n  article varchar NULL,\n  departement int4 NOT NULL REFERENCES villes.departement\n    ON DELETE RESTRICT ON UPDATE CASCADE,\n  numero int4 NOT NULL,\n  CONSTRAINT ville_pkey PRIMARY KEY (departement, numero)\n);\n\nALTER TABLE villes.region ADD \n  CONSTRAINT region_prefecture_fk FOREIGN KEY (prefecture_dep,prefecture_num) \n  REFERENCES villes.ville(departement,numero) \n  ON DELETE RESTRICT ON UPDATE CASCADE;\n\nALTER TABLE villes.departement ADD \n  CONSTRAINT departement_prefecture_fk FOREIGN KEY (departement,numero) \n  REFERENCES villes.ville(departement,numero) \n  ON DELETE SET NULL ON UPDATE CASCADE;\n\nCREATE TABLE villes.recensement (\n  annee year NOT NULL,\n  departement int4 NOT NULL,\n  numero int4 NOT NULL,\n  population int4 NULL,\n  CONSTRAINT recensement_pk PRIMARY KEY (annee, departement, numero),\n  CONSTRAINT recensement_fk FOREIGN KEY (departement,numero) \n    REFERENCES villes.ville(departement,numero) \n    ON DELETE RESTRICT ON UPDATE CASCADE\n);\n\nCREATE TABLE villes.taxe (\n  annee year NOT NULL,\n  departement int4 NOT NULL,\n  numero int4 NOT NULL,\n  valeur int4 NULL,\n  CONSTRAINT taxe_pk PRIMARY KEY (annee, departement, numero),\n  CONSTRAINT taxe_fk  FOREIGN KEY (departement,numero) \n    REFERENCES villes.ville(departement,numero) \n    ON DELETE RESTRICT ON UPDATE CASCADE\n);\n\n\n\n\n\n\n\nToutes les questions qui suivent se rapportent au schéma villes.\nPour chaque question, proposer une requête écrite en algèbre relationnelle ou en SQL.\n\n\n\n\n\n\n\n\n\nQuestion 4\n\n\n\nLister par région le nombre de communes.\n\n\n\n\n\n\n\n\nQuestion 5\n\n\n\nQuel département contient le plus de communes ?\n\n\n\n\n\n\n\n\nQuestion 6\n\n\n\nQuel département a connu la plus forte croissance démographique relative entre 2010 et 2020 ?\n\n\n\n\n\n\n\n\nQuestion 7\n\n\n\nPour chaque région, quelle est la proportion de la population qui vit dans des préfectures départementales en 2020 ?"
  },
  {
    "objectID": "exams/cc2-2023-11-24.html",
    "href": "exams/cc2-2023-11-24.html",
    "title": "MA15Y030 - Automne 2024",
    "section": "",
    "text": "CC 2 2023-11-24 16h30-18h45\nL3 MIASHS/Ingémath\nUniversité Paris Cité\nAnnée 2023-2024\nCourse Homepage\n\nMoodle\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPas de documents autorisés\nPas de téléphone portable\n\n\n\n\n\n\n\n\n\n\nPour chaque question, proposer une requête écrite en algèbre relationnelle ou en SQL.\n\n\n\n\n\n\n\n\n\nQuestion 1\n\n\n\nDans le schéma world, lister les pays où les dix plus grandes villes ont chacune au moins 10 millions d’habitants.\n\n\n\n\n\n\n\n\nQuestion 2\n\n\n\nDans le schéma world, pour chaque pays, donner les trois langues les plus parlées.\n\n\n\n\n\n\n\n\nQuestion 3\n\n\n\nDans le schéma world, lister les langues parlées sur tous les continents.\n\n\n\n\n\n\n\n\nQuestion 4\n\n\n\nDans le schéma world, lister par région le nombre de langues officielles distinctes.\n\n\n\n\n\n\n\n\nQuestion 5\n\n\n\nDans le schéma world, lister pour chaque forme de gouvernement, la population des villes des pays qui subissent cette forme de gouvernement.\n\n\n\n\n\n\n\n\nQuestion 6\n\n\n\nDans le schéma world, lister les pays où la capitale est la ville la plus peuplée.\n\n\n\n\n\n\n\n\nQuestion 7\n\n\n\nDans le schéma world, lister les pays où \\(90\\%\\) de la population parle une langue officielle (il peut y avoir plusieurs langues officielles, dont la somme des locuteurs et locutrices dépasse \\(90\\%\\) de la population).\n\n\n\nToutes les questions portent sur le schéma world.\n\n\n\nSchéma world"
  },
  {
    "objectID": "exams/cc3-2022-11-03.html",
    "href": "exams/cc3-2022-11-03.html",
    "title": "MA15Y030 - Automne 2024",
    "section": "",
    "text": "L3 MIASHS/Ingémath\nUniversité Paris Cité\nAnnée 2023-2024\nCourse Homepage\n\nMoodle\n\n\n\n\n\n\n\nCréer les fonctions SQL et vues correspondant aux questions suivantes.\nLes questions portent sur le schéma nycflights13 issu de https://github.com/tidyverse/nycflights13.\nVoir Documentation package R nycflights13\nDiagramme synthétique en pattes de corbeaux :\n\n\n\nDiagramme en pattes de corbeaux\n\n\nDiagramme sur bd_2023 :\n\n\n\nDiagramme sur bd_2023\n\n\n\nExercice\n\nNombre vols retardés d’un délai minimal à l’arrivée à un aéroport donné\nDonnés sur schéma nycflights13\n\nÉcrire une fonction SQL nommée cc_fonc_11 qui prend en argument un code d’aéroport p_faa de type text, une année p_year (int4), un mois p_month (int4), un délai plancher p_delay (int4) et renvoie le nombre de vols retardés de strictement plus de p_delay minutes à l’arrivée à l’aéroport faa, pendant le mois month de l’année year.\nLa fonction retourne un entier (bigint)\n\n\n\n\n\n\nRéponse attendue pour\nSELECT * \nFROM cc_fonc_11('LAX', 2013, 3, 40) ;` \n73\n\n\n\n\n\n\nExercice\nDonnés sur schéma nycflights.\nÉcrire une fonction SQL nommée cc_fonc_12 qui prend en argument une année p_year, un mois p_month, une compagnie aérienne p_carrier (text) et renvoie le nombre de couples aéroport d’origine origin/aéroports de destination dest distincts desservis par cette compagnie p_carrier pendant le mois p_month de l’année p_year.\nLa fonction retourne un entier (bigint)\nRéponse attendue pour SELECT * FROM cc_fonc_12('UA', 2013, 2);\n39\n\n\n\nExercice\nDonnées dans le schéma nycflights13\nÉcrire une vue nommée cc_vue_13 de schema (origin, dest, year, month, carrier, model, maxspeed) qui indique pour chaque couple (origin, dest), pour chaque couple (year,month), la vitesse maximale maxspeed (numeric) d’un vol reliant origin à dest pendant le mois month de l’année year, le modèle de l’avion qui a réalisé le vol le plus rapide, et la compagnie aérienne qui a assuré ce vol.\nmaxspeed sera exprimée en km/h. distance est exprimée en milles nautiques (1 mille = 1.852 km).\nÉcrire une vue nommée cc_vue_13 de schéma:\n(year INT4, month INT4, origin TEXT, dest TEXT, name TEXT, model TEXT, maxspeed numeric)\nRéponse attendue pour\nSELECT *\nFROM cc_vue_13\nWHERE dest='LAX' AND month=4 ;\n+----+-----+------+----+---------------------+--------+-----------------+\n|year|month|origin|dest|name                 |model   |maxspeed         |\n+----+-----+------+----+---------------------+--------+-----------------+\n|2013|    4|EWR   |LAX |United Air Lines Inc.|A320-232|921.6133333333335|\n|2013|    4|JFK   |LAX |United Air Lines Inc.|757-222 |951.9362068965518|\nPrécision pour maxspeed : (1 km/h)\n\n\n\nExercice\nDonnés sur schéma nycflights13.\nCréer dans votre schéma, une vue nommée cc_vue_14 de schéma:\n(origin , year int4, month int4, day int4, hour int4, avg_depdelay bigint, n_cancelled bigint, n_scheduled_flights bigint)\nqui donne pour chaque aéroport d’origine origin, chaque heure yyyy:mm:dd hh:00:00, le retard moyen au départ avg_depdelay des vols qui ont (effectivement) décollé de origin pendant l’heure qui a précédé yyyy:mm:dd hh:00:00, et n_canceled le nombre de vols annulés sur cet aéroport pendant cette heure, et enfin n_scheduled_flights le nombre de vols prévus pendant cette heure.\nRéponse attendue pour :\nSELECT date_time,\n       round(avg_delay::numeric, 1) as avg_delay,\n       n_cancelled,\n       n_scheduled_flights\nFROM cc_vue_14\nWHERE origin='JFK' AND\n      n_cancelled &gt; .25 * n_scheduled_flights\nORDER BY date_time\nLIMIT 10 ;\n+-----------------------+---------+-----------+-------------------+\n|date_time              |avg_delay|n_cancelled|n_scheduled_flights|\n+-----------------------+---------+-----------+-------------------+\n|2013-01-30 20:00:00.000|     30.7|          7|                 23|\n|2013-02-08 12:00:00.000|      5.8|          5|                 11|\n|2013-02-08 15:00:00.000|     25.9|          7|                 17|\n|2013-02-08 16:00:00.000|     10.6|         17|                 24|\n|2013-02-08 17:00:00.000|      6.7|         19|                 25|\n|2013-02-08 18:00:00.000|         |         24|                 24|\n|2013-02-08 19:00:00.000|         |         24|                 24|\n|2013-02-08 20:00:00.000|         |         23|                 23|\n|2013-02-08 21:00:00.000|         |         17|                 17|\n|2013-02-08 22:00:00.000|         |          6|                  6|\n\n\n\nExercice\nDonnés sur schéma nycflights13.\nCréer une vue cc_vue_15 de schéma:\n(tailnum text, year int4, woy int4, cumdist numeric, model text)\nqui recense pour chaque semaine (commencant le dimanche) les avions (identifiés par tailnum) qui ont parcouru la plus grande distance durant cette semaine, la distance parcourue pendant la semaine (en milles nautiques), on indiquera aussi le modèle (model) de l’avion\nRéponse attendue pour :\nSELECT  *\nFROM cc_vue_15\nWHERE  woy&gt;=26 AND woy &lt;= 30\n+-------+----+---+-------+-------+\n|tailnum|year|woy|cumdist|model  |\n+-------+----+---+-------+-------+\n|N320AA |2013| 30|22497.0|767-223|\n|N324AA |2013| 28|22497.0|767-223|\n|N327AA |2013| 26|23697.0|767-223|\n|N327AA |2013| 27|22386.0|767-223|\n|N332AA |2013| 29|23475.0|767-223|\n\nIndications\nManipulation du temps\n\nDoc PostgreSQL : types\nDoc PostgreSQL : fonctions\n\nSELECT extract(week from now()), now(), now() + '1 week'::interval ;\n+---------+-----------------------------+-----------------------------+\n|date_part|now                          |?column?                     |\n+---------+-----------------------------+-----------------------------+\n|     46.0|2022-11-20 11:46:59.322 +0100|2022-11-27 11:46:59.322 +0100|\nVoir aussi datetime pour Python ou lubridate pour R."
  },
  {
    "objectID": "exams/cc3-2022-11-13.html",
    "href": "exams/cc3-2022-11-13.html",
    "title": "MA15Y030 - Automne 2024",
    "section": "",
    "text": "L3 MIASHS/Ingémath\nUniversité Paris Cité\nAnnée 2023-2024\nCourse Homepage\n\nMoodle\n\n\n\n\n\n\n\nÉcrire une fonction SQL nommée cc_fonc_16 qui prend en argument une année p_year, un mois p_month un jour p_day et un aéroport de départ p_origin et renvoie une table de schéma\n(avg_temp float8, avg_visib float8,  avg_wind_speed float8, avg_month_temp float8)\nqui contient pour la journée définie par p_year, p_month et p_day, l’aéroport défini par p_origin, la température moyenne de la journée avg_temp, la visibilité moyenne de la journée avg_visib, la vitesse moyenne du vent avg_wind_speed de la journée, et la température moyenne du mois avg_month_temp.\nRéponse attendue pour :\nSELECT round(avg_temp::numeric, 2) AS avg_temp, \n       round(avg_visib::numeric, 2) AS avg_visib,\n       round(avg_wind_speed::numeric, 2) AS avg_wind_speed,\n       round(avg_month_temp::NUMERIC, 2) AS avg_month_temp\nFROM cc_fonc_16(2013, 2, 16, 'EWR');\n+--------+---------+--------------+--------------+\n|avg_temp|avg_visib|avg_wind_speed|avg_month_temp|\n+--------+---------+--------------+--------------+\n|   36.07|     9.71|         12.37|         34.26|\nCREATE OR REPLACE FUNCTION correction_cc3.cc_fonc_16(\n    p_year int4,  p_month int4, p_day int4, p_origin text)\n    RETURNS TABLE(avg_temp float8, avg_visib float8,  avg_wind_speed float8, avg_month_temp float8)\n    LANGUAGE sql\nAS $function$\nWITH v AS (\n    SELECT AVG(w.temp) AS avg_month_temp\n    FROM nycflights13.weather w \n    WHERE w.\"year\"=p_year AND w.\"month\"=p_month AND w.origin=p_origin\n),\nx AS (\n    SELECT AVG(w.temp) AS avg_temp,\n           AVG(w.visib) AS avg_visib,\n           AVG(w.wind_speed) AS avg_wind_speed\n    FROM nycflights13.weather w \n    WHERE w.\"year\"=p_year AND w.\"month\"=p_month AND w.\"day\"=p_day AND w.origin=p_origin\n) \nSELECT x.avg_temp, x.avg_visib, x.avg_wind_speed, v.avg_month_temp\nFROM x, v \n$function$ ;\n\nDonnées dans le schéma nycflights13.\nÉcrire une fonction SQL nommée cc_fonc_17 qui prend en argument un constructeur d’avion et qui renvoie une table de schéma\n(n_planes int8, n_carriers int8)\nchaque ligne donne pour chaque modèle vendu par le constructeur,\n\nle nombre d’avions de ce modèle qui ont circulé sur des vols domestiques partis de New York d’après la table flights\nle nombre de compagnies qui exploitent ce modèle (d’après la base nycflights13)\nle nombre de vols effectués par les exemplaires du modèle à partir de New York d’après la table flights\n\nRéponse attendue pour :\nSELECT * \nFROM cc_fonc_17('AIRBUS') \nWHERE model='A330-243' ;\n+--------+--------+----------+---------+\n|model   |n_planes|n_carriers|n_flights|\n+--------+--------+----------+---------+\n|A330-243|      14|         1|      342|\n\nDonnées dans le schéma nycflights13\nÉcrire une vue nommée cc_vue_18 de schéma\n(origin  text, time_hour timestamptz, flight int4, dep_delay float8, next_flight int4, next_dep_delay float8)\nPour chaque vol effectué f, la vue contient l’aéroport de départ (origin), la date et l’heure de départ programmée arrondie (time_hour), le numéro du vol flight, le retard au départ dep_delay, et aussi le numéro next_flight et le retard au départ du vol next_dep_delay, qui a décollé juste après le vol f du même aéroport de départ.\nRéponse attendue pour\nSELECT r.origin, r.time_hour::timestamp, r.flight, r.dep_time, r.dep_delay, r.next_flight, r.next_dep_delay\nFROM cc_vue_18 AS r \nWHERE  r.origin ='EWR' AND r.time_hour = to_timestamp('2013-01-01 06:00:00', 'YYYY-MM-DD HH:MI:SS') \nLIMIT 5 ;\n+------+-----------------------+------+--------+---------+-----------+--------------+\n|origin|time_hour              |flight|dep_time|dep_delay|next_flight|next_dep_delay|\n+------+-----------------------+------+--------+---------+-----------+--------------+\n|EWR   |2013-01-01 06:00:00.000|   507|     555|     -5.0|       1124|          -2.0|\n|EWR   |2013-01-01 06:00:00.000|  1124|     558|     -2.0|       1187|          -1.0|\n|EWR   |2013-01-01 06:00:00.000|  1187|     559|     -1.0|        343|           1.0|\n|EWR   |2013-01-01 06:00:00.000|   343|     601|      1.0|       1895|          -4.0|\n|EWR   |2013-01-01 06:00:00.000|  1895|     606|     -4.0|       1077|           0.0|\n\nNB: précision demandée pour la popularité 0.01\n\nDonnées dans le schéma nycflights13\nÉcrire une vue nommée cc_vue_19 de schéma:\n`(origin text, dest text, year int4, month int4, carrier text)\nPour chaque liaison (origin, dest), chaque mois (year, month), carrier contient le code de la compagnie du mois, celles dont le retard moyen à l’arrivée sur cette liaison, pendant ce mois est minimal.\nSELECT * \nFROM cc_vue_19 t\nWHERE t.origin='JFK' AND t.dest='ATL' \nORDER BY t.\"year\", t\"month\" \nLIMIT 5\n;\n+--------+------+------+-------+---------+\n| origin | dest | year | month | carrier |\n|--------+------+------+-------+---------|\n| JFK    | ATL  | 2013 | 1     | 9E      |\n| JFK    | ATL  | 2013 | 2     | DL      |\n| JFK    | ATL  | 2013 | 3     | DL      |\n| JFK    | ATL  | 2013 | 4     | DL      |\n| JFK    | ATL  | 2013 | 5     | DL      |\n\nDonnées dans le schéma babynames\nCréer une vue cc_vue_20 de schéma\n(origin TEXT, dest TEXT, flight int4, time_hour  TIMESTAMP, arr_delay , carrier TEXT, model TEXT, speedy_model TEXT, speedy_carrier TEXT)\nqui liste pour chaque vol de la table flights, l’aéroport de départ, l’aéroport de destination, la date et l’heure de départ prévues trinquée à l’heure (time_hour), le modèle (model) de l’avion, sa compagnie (carrier), son retard à l’arrivée, ainsi que pour un des vols les plus rapides sur cette liaison pendant le mois défini par time_hour, le modèle speedy_model et la compagnie speedy_carrier."
  },
  {
    "objectID": "exams/cc3-2022-10-21.html#popularité",
    "href": "exams/cc3-2022-10-21.html#popularité",
    "title": "MA15Y030 - Automne 2024",
    "section": "Popularité",
    "text": "Popularité\nÉcrire une fonction SQL nommée cc_fonc_6 qui prend en argument une année yyyy et un entier n et renvoie une table (sexe TEXT, prenom TEXT, nombre int4, rang int4) qui contient, selon la table babynames.bebes, les n prénoms les plus populaires (attribués) de l’année yyyy pour chaque sexe."
  },
  {
    "objectID": "exams/cc3-2022-10-21.html#nombre-de-naissances",
    "href": "exams/cc3-2022-10-21.html#nombre-de-naissances",
    "title": "MA15Y030 - Automne 2024",
    "section": "Nombre de naissances",
    "text": "Nombre de naissances\nDonnées dans le schéma babynames."
  },
  {
    "objectID": "exams/cc3-2022-10-21.html#popularité-relative-et-rang-de-popularité",
    "href": "exams/cc3-2022-10-21.html#popularité-relative-et-rang-de-popularité",
    "title": "MA15Y030 - Automne 2024",
    "section": "Popularité relative et rang de popularité",
    "text": "Popularité relative et rang de popularité\nDonnées dans le schéma babynames"
  },
  {
    "objectID": "exams/cc3-2022-10-21.html#requête-fenêtre",
    "href": "exams/cc3-2022-10-21.html#requête-fenêtre",
    "title": "MA15Y030 - Automne 2024",
    "section": "Requête fenêtre",
    "text": "Requête fenêtre\nDonnées dans le schéma world"
  },
  {
    "objectID": "exams/cc3-2022-10-21.html#fenêtre-glissante",
    "href": "exams/cc3-2022-10-21.html#fenêtre-glissante",
    "title": "MA15Y030 - Automne 2024",
    "section": "Fenêtre glissante",
    "text": "Fenêtre glissante\nDonnées dans le schéma babynames"
  },
  {
    "objectID": "cours-liens.html",
    "href": "cours-liens.html",
    "title": "Useful links",
    "section": "",
    "text": "RStudio containers\n🔗 on Duke Container Manager\n\n\nCourse GitHub organization\n🔗 on GitHub\n\n\nDiscussion forum\n🔗 on Sakai\n\n\nLecture streaming and recordings\n🔗 on Panopto\n\n\nGradebook\n🔗 on Sakai\n\n\nVirtual meetings\n🔗 on Sakai",
    "crumbs": [
      "Course information",
      "Liens"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "MA15Y030: Introduction aux Bases de données",
    "section": "",
    "text": "L’agenda sera sans doute ajusté au cours du semestre.\n\n\n\nLeçon\nDiapos\nDiapos(pdf)\nDate\n\n\n\n\nIntroduction + Algèbre relationnelle\n + \nMoodle\n2024-09-13\n\n\nAlgèbre Relationnelle + SQL I\n\nMoodle SQL 1\n2024-09-20\n\n\nRequêtes SQL II\n\nMoodle SQL 2\n2024-09-27\n\n\nRequêtes SQL III\n\nMoodle SQL 2\n2024-10-04\n\n\nDéfinition de données\n\nMoodle SQL 3\n2024-10-11\n\n\nContraintes, Vues, Fonctions\n \n\n2024-10-18\n\n\nContraintes, Vues, Fonctions (bis)\n\n\n2024-10-25\n\n\nModélisation I\n\n\n2024-11-08\n\n\nModélisation II\n\n\n2024-11-15\n\n\nNormalisation(s)\n\n\n2024-11-22\n\n\nNormalisation(s) II\n\n\n2024-11-29\n\n\nNormalisation(s) III\n\n\n2024-12-06",
    "crumbs": [
      "Course information",
      "Agenda"
    ]
  },
  {
    "objectID": "cours-apercu.html",
    "href": "cours-apercu.html",
    "title": "MA15Y030: Introduction aux Bases de Données",
    "section": "",
    "text": "twitter\n  \n  \n    \n     Github\n  \n\n  \n  \nApprendre à interroger une base de données relationnelle\nApprendre à lire un schéma de base de données\nApprendre à concevoir une base de données\nApprendre à améliorer une base de données",
    "crumbs": [
      "Course information",
      "Aperçu"
    ]
  },
  {
    "objectID": "slides/DF_norm_1.html#conception-du-modèle-relationnel",
    "href": "slides/DF_norm_1.html#conception-du-modèle-relationnel",
    "title": "BD xxx : Normalisation I",
    "section": "Conception du modèle relationnel",
    "text": "Conception du modèle relationnel\nUne première approche pour concevoir un modèle relationnel (l’ensemble des schémas d’une bd) consiste à :\n\nIdentifier les attributs d’intérêt\nRépartir les attributs dans plusieurs relations\n\n–\n\nComment savoir si le modèle relationnel est bon ?\nSi ce n’est pas le cas : y a-t-il des techniques pour le transformer en un bon modèle?"
  },
  {
    "objectID": "slides/DF_norm_1.html#qualité-dun-schéma",
    "href": "slides/DF_norm_1.html#qualité-dun-schéma",
    "title": "BD xxx : Normalisation I",
    "section": "Qualité d’un schéma",
    "text": "Qualité d’un schéma\nQuelles sont de bonnes propriétés d’un schéma ?\nExemple\nAttributs relatifs à des vendeurs, produits et livraisons\n\n\n\nAttribut\nUsage\n\n\n\n\n.red[V#] :\nnuméro du vendeur\n\n\nVnom :\nnom du vendeur\n\n\nVville :\nville du vendeur\n\n\n.red[P#] :\nnuméro du produit\n\n\nPnom :\nnom du produit\n\n\nPville :\nville où le produit est stocké\n\n\nQte :\nquantité de produit livrée au vendeur"
  },
  {
    "objectID": "slides/DF_norm_1.html#qualité-dun-schéma-1",
    "href": "slides/DF_norm_1.html#qualité-dun-schéma-1",
    "title": "BD xxx : Normalisation I",
    "section": "Qualité d’un schéma",
    "text": "Qualité d’un schéma\nUn schéma relationnel possible : une seule relation R avec tous les attributs\nR(V#, Vnom, Vville, P#, Pnom, Pville, Qte)\n–\n\n C’est une mauvaise modélisation.\n Pourquoi ?"
  },
  {
    "objectID": "slides/DF_norm_1.html#qualité-dun-schéma-relationnel",
    "href": "slides/DF_norm_1.html#qualité-dun-schéma-relationnel",
    "title": "BD xxx : Normalisation I",
    "section": "Qualité d’un schéma relationnel",
    "text": "Qualité d’un schéma relationnel\n\nRedondance\n\n\n\n\nV#\nVnom\nVville\nP#\nPnom\nPville\nQte\n\n\n\n\n3\nMagicV\nParis\n…\n…\n…\n…\n\n\n3\nMagicV\nParis\n…\n…\n…\n…\n\n\n2\nIdealB\nLyon\n…\n…\n…\n…\n\n\n2\nIdealB\nLyon\n…\n…\n…\n…\n\n\n\nVnom et Vville sont déterminés parV# :\nsi deux livraisons ont le même V#, elles ont aussi le même Vville et le même Vnom"
  },
  {
    "objectID": "slides/DF_norm_1.html#section",
    "href": "slides/DF_norm_1.html#section",
    "title": "BD xxx : Normalisation I",
    "section": "",
    "text": "Anomalies de mise à jour\n\nVnom ou Vville pourrait être mis à jour dans une livraison et pas dans une autre, ce qui donnerait une incohérence. Pour éviter cela, la mise à jour est coûteuse\n\nAnomalies d’insertion\n\nOn ne peut pas enregistrer un vendeur s’il ne reçoit pas de livraison\n\nAnomalies de suppression\n\nSi on supprime toutes les livraisons à un vendeur, on perd toute l’information sur ce vendeur"
  },
  {
    "objectID": "slides/DF_norm_1.html#qualité-dun-schéma-relationnel-1",
    "href": "slides/DF_norm_1.html#qualité-dun-schéma-relationnel-1",
    "title": "BD xxx : Normalisation I",
    "section": "Qualité d’un schéma relationnel",
    "text": "Qualité d’un schéma relationnel\n\nUn bon schéma\n\nVendeur(V#, Vnom, Vville)    Clef : V#\nProduit(P#, Pnom, Pville)    Clef : P#\nLivraison(V#, P#, Qte)       Clef : (V#,P#)\n\nPlus d’anomalie ! Comment y arriver?\n\n–\nLa théorie de la normalisation des BD relationnelles fournit\n\nla notion de forme normale : propriétés d’un schéma qui garantissent l’absence de redondance et des anomalies qui en dérivent. Ces propriétés sont définies par rapport à un ensemble de contraintes\ndes techniques de normalisation : passage d’un schéma arbitraire (mauvais) à un schéma en forme normale (obtenu typiquement par décomposition)"
  },
  {
    "objectID": "slides/DF_norm_1.html#dépendances-fonctionnelles",
    "href": "slides/DF_norm_1.html#dépendances-fonctionnelles",
    "title": "BD xxx : Normalisation I",
    "section": "Dépendances fonctionnelles",
    "text": "Dépendances fonctionnelles\nUne dépendance fonctionnelle est une forme particulière de .red[contrainte d’intégrité] portant sur une relation/table : il s’agit d’une forme particulière contrainte d’exclusion EXCLUDE\nC’est la réalité modélisée qui impose ces contraintes\n–\nExemple :\nR(V#, Vnom, Vville, P#, Pnom, Pville, Qte)\nUn ensemble de dépendances fonctionnelles qu’on peut raisonnablement supposer :\nV# ⟶ Vnom Vville\nP# ⟶ Pnom Pville\nV# P# ⟶ Qte\n\nCela signifie que l’on ne considère que des relations R qui satisfont :\nsi 2 tuples de R ont la même valeur de V# alors ils ont la même valeur de Vnom et Vville\nsi 2 tuples de R ont la même valeur de P# alors ils ont la même valeur de Pnom et Pville\n…"
  },
  {
    "objectID": "slides/DF_norm_1.html#df-exemple",
    "href": "slides/DF_norm_1.html#df-exemple",
    "title": "BD xxx : Normalisation I",
    "section": "DF exemple",
    "text": "DF exemple\n\n\n\nV#\nVnom\nVville\nP#\nPnom\nPville\nQte\n\n\n\n\n3\nMagicV\nParis\n322\nmanteau\nLille\n2\n\n\n1\nStarV\nRome\n546\nveste\nRome\n1\n\n\n3\nMagicV\nParis\n322\nmanteau\nLille\n5\n\n\n2\nIdealB\nLyon\n145\njupe\nParis\n7\n\n\n2\nIdealB\nLyon\n234\njupe\nLille\n1\n\n\n\n–\n\nR satisfait V# ⟶ Vnom Vville et P# ⟶ Pnom Pville\nR viole V# P# ⟶ Qte"
  },
  {
    "objectID": "slides/DF_norm_1.html#exemple",
    "href": "slides/DF_norm_1.html#exemple",
    "title": "BD xxx : Normalisation I",
    "section": "Exemple",
    "text": "Exemple\nSchéma Films(titre, année, durée, genre, producteur, acteur)\n\n\n\n\n\n\n\n\n\n\n\ntitre\nannée\ndurée\ngenre\nproducteur\nacteur\n\n\n\n\nStar Wars\n1977\n124\nSciFi\nFox\nCarrie Fisher\n\n\nStar Wars\n1977\n124\nSciFi\nFox\nMark Hamill\n\n\nStar Wars\n1977\n124\nSciFi\nFox\nHarrison Ford\n\n\nGone With The Wind\n1939\n231\ndrame\nMGM\nVivien Leigh\n\n\nWayne’s World\n1992\n95\ncomédie\nParamount\nDana Carvey\n\n\nWayne’s World\n1992\n95\ncomédie\nParamount\nMike Meyers\n\n\n\n\nOn sait qu’il n’y a pas 2 films de même nom qui sortent la même année. On a donc la dépendance suivante\n\ntitre, année ⟶ durée, genre, producteur\n\nLa DF\n\ntitre, année ⟶ acteur\nest certainement fausse puisqu’un film fait intervenir en général plusieurs acteurs\n\nA-t-on la DF\n\ntitre, acteur ⟶ année, durée, genre, producteur ?"
  },
  {
    "objectID": "slides/DF_norm_1.html#définition-dune-dépendance-fonctionnelle",
    "href": "slides/DF_norm_1.html#définition-dune-dépendance-fonctionnelle",
    "title": "BD xxx : Normalisation I",
    "section": "Définition d’une dépendance fonctionnelle",
    "text": "Définition d’une dépendance fonctionnelle\n\nSoit \\(\\mathcal{A}\\) un schéma de relation (\\(\\mathcal{A}\\) est un ensemble d’attributs)\nUne dépendance fonctionnelle sur \\(\\mathcal{A}\\) est une expression de la forme\n\n\\[X \\rightarrow Y\\]\noù \\(X\\subset \\mathcal{A}\\) et \\(Y\\subset \\mathcal{A}\\)\n\nUne relation \\(R\\) de schéma \\(\\mathcal{A}\\) satisfait \\(X \\rightarrow Y\\) si pour tous tuples \\(s,t \\in R\\) on a\n\n\\[\\bigl(\\forall A\\in X\\ s.A=t.A\\bigr) \\Longrightarrow \\bigl(\\forall A\\in Y\\ s.A=t.A\\bigr)\\]\n(si \\(s\\) et \\(t\\) coïncident sur \\(X\\) alors \\(s\\) et \\(t\\) coïncident sur \\(Y\\))\n\nUne relation \\(R\\), de schéma \\(\\mathcal{A}\\), satisfait un ensemble \\(\\Sigma\\) de DF si \\(R\\) satisfait chaque DF de \\(\\Sigma\\)"
  },
  {
    "objectID": "slides/DF_norm_1.html#exemples-et-dépendance-élémentaire",
    "href": "slides/DF_norm_1.html#exemples-et-dépendance-élémentaire",
    "title": "BD xxx : Normalisation I",
    "section": "Exemples et dépendance élémentaire",
    "text": "Exemples et dépendance élémentaire\nExemple\nDans la base Sakila, relation Actor :\n\nActor_id ⟶ last_name, first_name\ncar Actor_id est une clé…"
  },
  {
    "objectID": "slides/DF_norm_1.html#dépendance-fonctionnelle-triviale",
    "href": "slides/DF_norm_1.html#dépendance-fonctionnelle-triviale",
    "title": "BD xxx : Normalisation I",
    "section": "Dépendance fonctionnelle triviale",
    "text": "Dépendance fonctionnelle triviale\nUne DF triviale est une DF satisfaite par toute relation\nDéfinition (dépendance triviale)\nSoient \\(X,Y\\subset \\mathcal{A}\\)\n\n\\(X\\rightarrow Y\\) est une dépendance triviale si \\(Y \\subset X\\)\n\nExemple\n\nNo_insee ⟶ No_insee est triviale"
  },
  {
    "objectID": "slides/DF_norm_1.html#implication-pour-les-df",
    "href": "slides/DF_norm_1.html#implication-pour-les-df",
    "title": "BD xxx : Normalisation I",
    "section": "Implication pour les DF",
    "text": "Implication pour les DF\n\nSoit \\(\\mathcal{A}\\) un schéma de relation ( \\(\\mathcal{A}\\) est un ensemble d’attributs) et \\(\\Sigma\\) un ensemble de DF sur \\(\\mathcal{A}\\)\nExemple : \\(\\mathcal{A}=\\{A,B,C\\}\\) et \\(\\Sigma=\\{A\\rightarrow B, B\\rightarrow C\\}\\)\nLes DF données impliquent d’autres DF additionnelles\n\n–\n\nExemple : \\(A\\rightarrow B\\) et \\(B\\rightarrow C\\) impliquent \\(A\\rightarrow C\\)\n\nc’est-à-dire : toute relation de schéma \\(\\mathcal{A}\\) qui satisfait \\(A\\rightarrow B\\) et \\(B\\rightarrow C\\) satisfait également \\(A\\rightarrow C\\)\n–\n\nAutre exemple :\n\n\\(A\\rightarrow C\\), \\(BC\\rightarrow D\\), \\(AD\\rightarrow E\\) impliquent \\(AB\\rightarrow E\\)"
  },
  {
    "objectID": "slides/DF_norm_1.html#implication-df",
    "href": "slides/DF_norm_1.html#implication-df",
    "title": "BD xxx : Normalisation I",
    "section": "Implication DF",
    "text": "Implication DF\nDéfinition\nUn ensemble \\(\\Sigma\\) de DF implique une autre DF \\(X\\rightarrow Y\\) si toute relation qui satisfait \\(\\Sigma\\) satisfait également \\(X\\rightarrow Y\\).\nNotation\npour \\(\\Sigma\\) implique \\(X\\rightarrow Y\\) : \\(\\Sigma \\models X \\rightarrow Y\\)\nExemple\n\\(\\Sigma=\\{A\\rightarrow B, B\\rightarrow C\\}\\) implique\n\\(A\\rightarrow B\\), \\(B\\rightarrow C\\), \\(A\\rightarrow C\\), \\(A,B\\rightarrow C\\), …\nmais aussi les DF triviales \\(A\\rightarrow A\\), \\(AB\\rightarrow A\\), …"
  },
  {
    "objectID": "slides/DF_norm_1.html#règles-darmstrong",
    "href": "slides/DF_norm_1.html#règles-darmstrong",
    "title": "BD xxx : Normalisation I",
    "section": "Règles d’Armstrong",
    "text": "Règles d’Armstrong\nTrois règles d’inférence (facile à vérifier) :\n\nTransitivité : \\(\\{ X\\rightarrow Y, Y\\rightarrow Z\\} \\models X\\rightarrow Z\\)\nAugmentation : \\(X\\rightarrow Y \\models \\{X,Z\\} \\rightarrow \\{Y,Z\\}\\)\nRéflexivité : \\(\\varnothing \\models \\{X,Y\\}\\rightarrow X\\) (DF triviale)"
  },
  {
    "objectID": "slides/DF_norm_1.html#théorème",
    "href": "slides/DF_norm_1.html#théorème",
    "title": "BD xxx : Normalisation I",
    "section": "Théorème",
    "text": "Théorème\n\\(\\Sigma \\models X\\rightarrow Y\\)\nsi et seulement si\n\\(X\\rightarrow Y\\) peut-être dérivée de \\(\\Sigma\\) par applications successives des trois règles d’Armstrong"
  },
  {
    "objectID": "slides/DF_norm_1.html#clef-et-super-clef",
    "href": "slides/DF_norm_1.html#clef-et-super-clef",
    "title": "BD xxx : Normalisation I",
    "section": "Clef et super-clef",
    "text": "Clef et super-clef\nSoit \\(\\mathcal{A}\\) un schéma et \\(\\Sigma\\) une ensemble de DF sur \\(\\mathcal{A}\\)\nDéfinition\nUn ensemble d’attributs \\(X\\) est une super-clef si\n\\(\\Sigma \\models X \\rightarrow \\mathcal{A}\\)\nc-à-d si \\(X\\) détermine tous les attributs de \\(\\mathcal{A}\\)\n–\nDéfinition\nUn ensemble d’attributs \\(X\\) est une clef si \\(X\\) est une super-clef et si tout sous-ensemble \\(Y\\subset X\\) tel que \\(Y\\not=X\\) n’est pas une super-clef\n–\nExemple\n\\(R(A,B,C) \\qquad \\Sigma=\\{A\\rightarrow B, B\\rightarrow C\\}\\)\nSuper-clefs : \\(A\\), \\(AB\\), \\(AC\\), \\(ABC\\)\nClef : \\(A\\) (la seule)"
  },
  {
    "objectID": "slides/DF_norm_1.html#implication-dun-ensemble-de-df-par-un-autre",
    "href": "slides/DF_norm_1.html#implication-dun-ensemble-de-df-par-un-autre",
    "title": "BD xxx : Normalisation I",
    "section": "Implication d’un ensemble de DF par un autre",
    "text": "Implication d’un ensemble de DF par un autre\nSoit \\(\\Sigma\\) et \\(\\Sigma'\\) deux ensemble de DF sur un schéma \\(\\mathcal{A}\\)\nOn dit que \\(\\Sigma\\) implique \\(\\Sigma'\\) si \\(\\Sigma\\) implique toutes les DF de \\(\\Sigma'\\)\nOn le note \\(\\Sigma \\models \\Sigma'\\)"
  },
  {
    "objectID": "slides/DF_norm_1.html#exemples",
    "href": "slides/DF_norm_1.html#exemples",
    "title": "BD xxx : Normalisation I",
    "section": "Exemples",
    "text": "Exemples\n\\(\\mathcal{A}=\\{A,B,C,D\\}\\),\n\\(\\Sigma= \\{AB\\rightarrow C, C\\rightarrow A, BC\\rightarrow D\\}\\)|\n\\(\\Sigma'=\\{AB\\rightarrow D\\}\\)\n\\(\\Sigma\\models\\Sigma'\\)"
  },
  {
    "objectID": "slides/DF_norm_1.html#définition-3",
    "href": "slides/DF_norm_1.html#définition-3",
    "title": "BD xxx : Normalisation I",
    "section": "Définition",
    "text": "Définition\n\\(\\Sigma\\) est équivalent à \\(\\Sigma'\\)\nssi\n\\(\\Sigma\\models\\Sigma'\\) et \\(\\Sigma'\\models\\Sigma\\)\n–\nExemples\n\n\\(X\\rightarrow A_1,...,A_n\\) est équivalent à \\(X\\rightarrow A_1\\), …, \\(X\\rightarrow A_n\\)|\n\\(XY\\rightarrow YZ\\) est équivalent à \\(XY\\rightarrow Z\\)"
  },
  {
    "objectID": "slides/DF_norm_1.html#question-principale",
    "href": "slides/DF_norm_1.html#question-principale",
    "title": "BD xxx : Normalisation I",
    "section": "Question principale",
    "text": "Question principale\n\nComment vérifier si un ensemble \\(\\Sigma\\) de DF implique une DF \\(X\\rightarrow Y\\)~?\nPar les équivalences présentées précédemment, la question se ramène à :\n\nComment vérifier si un ensemble \\(\\Sigma\\) de DF implique une DF \\(X\\rightarrow A\\) où \\(A\\) est un attribut~?"
  },
  {
    "objectID": "slides/DF_norm_1.html#fermeture-dun-ensemble-dattributs-1",
    "href": "slides/DF_norm_1.html#fermeture-dun-ensemble-dattributs-1",
    "title": "BD xxx : Normalisation I",
    "section": "Fermeture d’un ensemble d’attributs",
    "text": "Fermeture d’un ensemble d’attributs\nSoit \\(X \\subset\\mathcal{A}\\) un sous-ensemble d’attributs et \\(\\Sigma\\) un ensemble de DF sur \\(\\mathcal{A}\\)\nDéfinition\nLa fermeture de \\(X\\) par rapport à \\(\\Sigma\\) est\n\\[X^+=\\{ A\\in\\mathcal{A} \\mid \\Sigma\\models X\\rightarrow A \\}\\]\nAutrement dit \\(X^+\\) est l’ensemble des attributs déterminés par \\(X\\)\n–\nExemple\n\n\\(R(ABCDE)\\)\n\\(\\Sigma=\\{AB\\rightarrow C, C\\rightarrow D, E\\rightarrow D\\}\\)\n\\(\\{A,B\\}^+=\\{A,B,C,D\\}\\)"
  },
  {
    "objectID": "slides/DF_norm_1.html#algorithme-pour-calculer-une-fermeture",
    "href": "slides/DF_norm_1.html#algorithme-pour-calculer-une-fermeture",
    "title": "BD xxx : Normalisation I",
    "section": "Algorithme pour calculer une fermeture",
    "text": "Algorithme pour calculer une fermeture\nSoit \\(\\Sigma\\) un ensemble de DF sur un schéma \\(\\mathcal{A}\\) et \\(X\\subset\\mathcal{A}\\)\nAlgorithme\n```{verbatim, lang=“r”} Xc &lt;- X\nwhile (exists Y -&gt; Z in Σ with Y ⊂ Xc and not Z ⊄ Xc) { Xc &lt;- Xc ∪ Z }\nreturn Xc\n\n\n\n--\n\n- `Xc` grandit à chaque itération\n\nComme $\\mathcal{A}$ est fini, l'algorithme se termine en au plus $|\\mathcal{A}|$ itérations\n\n\n---\n\n\n\n## Exemple de calcul de fermeture\n\n$\\mathcal{A}=\\{ABCDEF\\}$ $\\Sigma=\\{A\\rightarrow C, BC\\rightarrow D, AD\\rightarrow E\\}$ $X=\\{A,B\\}$\n\n- $X_c=\\{A,B\\}$\n\n- $A\\rightarrow C$ donc on obtient $X_c=\\{A,B,C\\}$\n\n- $BC\\rightarrow D$ donc on obtient $X_c=\\{A,B,C,D\\}$\n\n- $AD\\rightarrow E$ donc on obtient $X_c=\\{A,B,C,D, E\\}$\n\n- On obtient $X^+=\\{A,B,C,D, E\\}$\n\n\n\n---\n\n\n\n\n## Correction de l'algorithme de fermeture\n\n- L'algorithme calcule uniquement des attributs dans la fermeture car\non a toujours $X_c\\subset X^+$\n\n- L'algorithme calcule tous les attributs dans la fermeture:  $X_c=X^+$ quand l'algorithme se termine\n\n---\n\n\n**Preuve** :\n\nSupposons que $A\\notin X_c$ quand l'algorithme se termine\n\nLa relation $R=\\{t_1,t_2\\}$ suivante (où $c\\neq d$ )\n\n\n|       | $X_c$   | A |  ...| ... |\n|:------|:-------:|:----:|:------:|\n| $t_1$ | aa... a | c | cc... c |\n| $t_2$ | aa... a | d | dd... d |\n\nsatisfait $\\Sigma$\n\ncar pour toute DF $Y\\rightarrow Z$ telle que $Y\\subset X_c$ on a $Z\\subset X_c$.\n\nMais $R$ ne satisfait pas $X\\rightarrow A$. Donc $A\\notin X^+$.\n\n\n\n---\n\n\n\n## Calcul de la fermeture transitive : exemple\n\n::: {.columns}\n::: {.column}\n\nSoit $R$ d'ensemble d'attributs\n\n$$\\mathcal{A} =\\{A,B,C,D,E,F,G\\}$$\n\nSoit $X=\\{B,D\\} \\subset \\mathcal{A}$\n\nEt $Σ$ l'ensemble de dépendances fonctionnelles ci-contre\n\n:::\n::: {.column}\n\n|   $\\Sigma$   |\n|:---------------------:|\n| $A,B \\rightarrow C$ |\n| $C \\rightarrow A$ |\n| $B,C \\rightarrow D$ |\n| $A,C,D \\rightarrow B$ |\n| $F\\rightarrow A,C$|\n| $D \\rightarrow E,G$ |\n| $B,E \\rightarrow C$ |\n| $C,G \\rightarrow B,D$ |\n| $C,E \\rightarrow A,G$ |\n\n:::\n::: &lt;!-- end columns --&gt;\n\n\nMontrer que  $X^+=\\{A,B,C,D,E,G\\}$\n\nDonner une clef de $R$\n\n\n\n---\n\n\n# Forme normale de Boyce-Codd\n\n\n---\n\n\n## Forme normale de Boyce-Codd (FNBC)\n\n#### Définition\n\nUn schéma $\\mathcal{A}$ est en FNBC par rapport à un ensemble de dépendances fonctionnelles $\\Sigma$ sur $\\mathcal{A}$\n\nsi\n\npour toute DF $X\\rightarrow Y$ impliquée par $\\Sigma$ avec $Y\\not\\subset X$, $X$ est une super-clef\n\n--\n\n-  $(\\mathcal{A},\\Sigma)$ est en FNBC si pour toute DF non triviale impliquée par $\\Sigma$, le membre de gauche est une super-clef\n\n---\n\n#### Proposition\n\nSoit $\\Sigma'$ un ensemble de DF équivalent à $\\Sigma$.\n\n$(\\mathcal{A},\\Sigma)$ est en FNBC si et seulement si pour toute DF non triviale de $\\Sigma'$, le membre de gauche est une super-clef\n\n\nEn effet  toute DF impliquée par $\\Sigma$ peut être obtenue à partir des DF de $\\Sigma'$ en utilisant les règles d'Armstrong\n\n\n---\n\n\n\n## FNBC : exemple 1\n\n- Schéma $\\mathcal{A}=\\{\\text{V#, Vnom, Vville, P#, Pnom, Pville, Qte}\\}$\n\nEnsemble de dépendances fonctionnelles $\\Sigma$ :\n\n\n\n```{verbatim}\nV# ⟶ Vnom Vville\nP# ⟶ Pnom Pville\nV# P# ⟶ Qte\n–\n\\(\\mathcal{A}\\) n’est pas en FNBC par rapport \\(\\Sigma\\).\nEn effet ni V# ni P# ne sont des super-clefs"
  },
  {
    "objectID": "slides/DF_norm_1.html#fnbc-exemple-2",
    "href": "slides/DF_norm_1.html#fnbc-exemple-2",
    "title": "BD xxx : Normalisation I",
    "section": "FNBC : exemple 2",
    "text": "FNBC : exemple 2\nSchéma Films(titre, année, durée, genre, producteur, acteur)\n\nOn a la dépendance suivante titre, année ⟶ durée, genre, producteur\ntitre, année, acteur est la seule clef\nLa DF titre, année ⟶ durée, genre, producteur} viole la condition de FNBC"
  },
  {
    "objectID": "slides/DF_norm_1.html#fnbc-exemple-3",
    "href": "slides/DF_norm_1.html#fnbc-exemple-3",
    "title": "BD xxx : Normalisation I",
    "section": "FNBC : exemple 3",
    "text": "FNBC : exemple 3\nTrois schémas en FNBC :\n\n\n\nRelation\nClef\n\n\n\n\nVendeur(V#, Vnom, Vville)\nV#\n\n\nProduit(P#, Pnom, Pville)\nP#\n\n\nLivraison(V#, P#, Qte)\n(V#,P#)"
  },
  {
    "objectID": "slides/DF_norm_1.html#schéma-avec-deux-attributs",
    "href": "slides/DF_norm_1.html#schéma-avec-deux-attributs",
    "title": "BD xxx : Normalisation I",
    "section": "Schéma avec deux attributs",
    "text": "Schéma avec deux attributs\nProposition\nSoit \\(\\mathcal{A}=\\{A,B\\}\\) un schéma avec deux attributs et \\(\\Sigma\\) un ensemble de DF non triviales.\n\\(\\mathcal{A}\\) est toujours en FNBC par rapport à \\(\\Sigma\\)\n–\nPreuve :\nOn distingue 4 cas\n\n\\(\\Sigma=\\emptyset\\)\n\\(\\Sigma=\\{A\\rightarrow B\\}\\)\n\\(\\Sigma=\\{B\\rightarrow A\\}\\)\n\\(\\Sigma=\\{A\\rightarrow B, B\\rightarrow A\\}\\)"
  },
  {
    "objectID": "slides/DF_norm_1.html#décomposition-dun-schéma-de-relation",
    "href": "slides/DF_norm_1.html#décomposition-dun-schéma-de-relation",
    "title": "BD xxx : Normalisation I",
    "section": "Décomposition d’un schéma de relation",
    "text": "Décomposition d’un schéma de relation\nSoit \\(\\mathcal{A}\\) un schéma de relation\nUn décomposition de \\(\\mathcal{A}\\) est un ensemble \\(\\{\\mathcal{A}_1,..., \\mathcal{A}_k\\}\\) de sous-ensembles de \\(\\mathcal{A}\\) tel que\n\\[\\mathcal{A}_i\\not=\\emptyset, 1\\le i\\le k, \\quad \\text{ et } \\quad \\mathcal{A} = \\bigcup_{i=1}^k \\mathcal{A}_i\\]"
  },
  {
    "objectID": "slides/DF_norm_1.html#exemple-2",
    "href": "slides/DF_norm_1.html#exemple-2",
    "title": "BD xxx : Normalisation I",
    "section": "Exemple",
    "text": "Exemple\nVendeur(V#, Vnom, Vville)\nProduit(P#, Pnom, Pville)\nLivraison(V#, P#, Qte)\nest une décomposition du schéma\nR(V#, Vnom, Vville, P#, Pnom, Pville, Qte)"
  },
  {
    "objectID": "slides/DF_norm_1.html#exemple-de-décomposition",
    "href": "slides/DF_norm_1.html#exemple-de-décomposition",
    "title": "BD xxx : Normalisation I",
    "section": "Exemple de décomposition",
    "text": "Exemple de décomposition\nSchéma :\nFilms(titre, année, durée, genre, producteur, acteur)\nUne décomposition :\nFilms1(titre, année, durée, genre, producteur)\nFilms2(titre, année, acteur)\n\nFilms1 est FNBC par rapport à \\(\\Sigma_1=\\{\\texttt{titre, année ⟶ durée, genre, producteur}\\}\\)\nFilms2 est en FNBC par rapport à \\(\\Sigma_2=\\emptyset\\)"
  },
  {
    "objectID": "slides/DF_norm_1.html#propriétés-dune-décomposition",
    "href": "slides/DF_norm_1.html#propriétés-dune-décomposition",
    "title": "BD xxx : Normalisation I",
    "section": "Propriétés d’une décomposition",
    "text": "Propriétés d’une décomposition\nOn ne peut pas décomposer arbitrairement,\nToutes les décompositions ne sont pas intéressantes\n–\nConditions pour une décomposition raisonnable :\n\nDécomposition .red[sans perte d’information]\nDécomposition sans perte de dépendance fonctionnelle"
  },
  {
    "objectID": "slides/DF_norm_1.html#décomposition-sans-perte-dinformation-1",
    "href": "slides/DF_norm_1.html#décomposition-sans-perte-dinformation-1",
    "title": "BD xxx : Normalisation I",
    "section": "Décomposition sans perte d’information",
    "text": "Décomposition sans perte d’information\nIdée : Si on remplace le schéma\n(V#, Vnom, Vville, P#, Pnom, Pville, Qte)\npar les trois schémas\nVendeur(V#, Vnom, Vville)\nProduit(P#, Pnom, Pville)\nLivraison(V#, P#, Qte)\nalors au lieu de stocker une relation R(V#, Vnom, Vville, P#, Pnom, Pville, Qte), on stockera ses projections\n\\[\\pi_{\\texttt{V#,Vnom,Vville}}(\\texttt{R}) \\qquad \\pi_{\\texttt{P#,Pnom,Pville}}(\\texttt{R}) \\quad \\pi_{\\texttt{V#,P#,Qte}}(\\texttt{R})\\]\n Peut-on retrouver R à partir de ces trois projections ?"
  },
  {
    "objectID": "slides/DF_norm_1.html#décomposition-sans-perte-dinformation-2",
    "href": "slides/DF_norm_1.html#décomposition-sans-perte-dinformation-2",
    "title": "BD xxx : Normalisation I",
    "section": "Décomposition sans perte d’information",
    "text": "Décomposition sans perte d’information\n\nLa décomposition doit garantir que pour toute relation R, ses projections contiennent la même information que R au sens que l’on doit pouvoir reconstruire R à partir de ses projections\nComment tenter de reconstruire R à partir de ses projections ?\n\nOn considère la jointure naturelle\n\\[\\pi_{\\texttt{V#,Vnom,Vville}}(\\texttt{R}) \\bowtie \\pi_{\\texttt{P#,Pnom,Pville}}(\\texttt{R}) \\bowtie \\pi_{\\texttt{V#,P#,Qte}}(\\texttt{R})\\]"
  },
  {
    "objectID": "slides/DF_norm_1.html#décomposition-sans-perte-dinformation-3",
    "href": "slides/DF_norm_1.html#décomposition-sans-perte-dinformation-3",
    "title": "BD xxx : Normalisation I",
    "section": "Décomposition sans perte d’information",
    "text": "Décomposition sans perte d’information\nLa propriété souhaitée s’écrit donc\n\\[R = \\pi_{\\texttt{V#,Vnom,Vville}}(\\texttt{R}) \\bowtie \\pi_{\\texttt{P#,Pnom,Pville}}(\\texttt{R}) \\bowtie \\pi_{\\texttt{V#,P#,Qte}}(\\texttt{R})\\]\npour toute relation R(V#, Vnom, Vville, P#, Pnom, Pville, Qte) satisfaisant les DF\n\nEst ce vrai?\nIntuitivement, oui : à partir d’un tuple de Livraison(V#,P#,Qte)\nV# permet de récupérer toutes les informations sur le vendeur (V# ⟶ Vnom Vville)\nP# permet de récupérer toutes les informations sur le produit (P# ⟶ Pnom Pville)\n.red[La propriété d’être sans perte d’information est liée à l’ensemble de DF considéré]"
  },
  {
    "objectID": "slides/DF_norm_1.html#décomposition-sans-perte-dinformation-lossless-join",
    "href": "slides/DF_norm_1.html#décomposition-sans-perte-dinformation-lossless-join",
    "title": "BD xxx : Normalisation I",
    "section": "Décomposition sans perte d’information (lossless join)",
    "text": "Décomposition sans perte d’information (lossless join)\nDéfinition\nSoit \\(\\mathcal{A}\\) un schéma de relation et \\(\\Sigma\\) un ensemble de DF sur \\(\\mathcal{A}\\).\nUne décomposition \\(\\{\\mathcal{A}_1,..., \\mathcal{A}_k\\}\\) est sans perte d’information par rapport à \\(\\Sigma\\) si pour toute relation \\(R\\) de schéma \\(\\mathcal{A}\\) satisfaisant \\(\\Sigma\\) on a\n\\[R= \\pi_{\\mathcal{A}_1}(R) \\bowtie \\pi_{\\mathcal{A}_2}(R) \\bowtie...\\bowtie\\pi_{\\mathcal{A}_k}(R)\\]"
  },
  {
    "objectID": "slides/DF_norm_1.html#exemple-de-décomposition-avec-perte-dinformation",
    "href": "slides/DF_norm_1.html#exemple-de-décomposition-avec-perte-dinformation",
    "title": "BD xxx : Normalisation I",
    "section": "Exemple de décomposition avec perte d’information",
    "text": "Exemple de décomposition avec perte d’information\n\\(\\mathcal{A}=\\{A,B,C\\} \\quad  \\Sigma=\\{AB\\rightarrow C\\}\\)\nDécomposition \\(\\mathcal{A}_1=\\{A,B\\}  \\quad  \\mathcal{A}_2=\\{B,C\\}\\)\n.fl.w-30.pa2[ Soit \\(R\\) la relation\n\n\n\nA\nB\nC\n\n\n\n\n1\n2\n3\n\n\n4\n2\n5\n\n\n\n] .fl.w-30.pa2[ \\(\\pi_{AB}(R)=\\)\n\n\n\nA\nB\n\n\n\n\n1\n2\n\n\n4\n2\n\n\n\n]\n.fl.w-30.pa2[ \\(\\pi_{BC}(R)=\\)\n\n\n\nB\nC\n\n\n\n\n2\n3\n\n\n2\n5\n\n\n\n]\n\\(\\pi_{AB}(R) \\bowtie \\pi_{BC}(R)=\\)\n\n\n\nA\nB\nC\n\n\n\n\n1\n2\n3\n\n\n4\n2\n5\n\n\n.red[1]\n.red[2]\n.red[5]\n\n\n.red[4]\n.red[2]\n.red[3]"
  },
  {
    "objectID": "slides/DF_norm_1.html#algorithme-de-poursuite-1",
    "href": "slides/DF_norm_1.html#algorithme-de-poursuite-1",
    "title": "BD xxx : Normalisation I",
    "section": "Algorithme de poursuite",
    "text": "Algorithme de poursuite\n\nComment déterminer si une décomposition est sans perte d’information?\nSi \\(R\\) est une relation de schéma \\(\\mathcal{A}\\) on a toujours que\n\n\\[R\\subset \\pi_{\\mathcal{A}_1}(R) \\bowtie \\pi_{\\mathcal{A}_2}(R) \\bowtie...\\bowtie\\pi_{\\mathcal{A}_k}(R)\\]\npar définition de la jointure naturelle et de la projection\n\nLe seul problème est que les jointures peut générer des tuples supplémentaires\nMais comme \\(R\\) est supposée vérifier les DF de \\(\\Sigma\\), l’inclusion inverse est garantie dans certains cas\nPour le savoir, un algorithme simple existe appelé algorithme de poursuite"
  },
  {
    "objectID": "slides/DF_norm_1.html#algorithme-de-poursuite-exemple",
    "href": "slides/DF_norm_1.html#algorithme-de-poursuite-exemple",
    "title": "BD xxx : Normalisation I",
    "section": "Algorithme de poursuite : exemple",
    "text": "Algorithme de poursuite : exemple\nSi on remplace le schéma (V#, Vnom, Vville, P#, Pnom, Pville, Qte) par\nVendeur(V#, Vnom, Vville)}\nProduit(P#, Pnom, Pville)}\nLivraison(V#, P#, Qte)\nA-t-on\n\\[\\pi_{\\texttt{V#,Vnom,Vville}}(\\texttt{R}) \\bowtie \\pi_{\\texttt{P#,Pnom,Pville}}(\\texttt{R}) \\bowtie \\pi_{\\texttt{V#,P#,Qte}}(R) \\subset \\texttt{R} \\quad ?\\]\n???\nSoit \\(t\\) un tuple dans la jointure\n\n\n\nV#\nVnom\nVville\nP#\nPnom\nPville\nQte\n\n\n\n\n\\(a\\)\n\\(b\\)\n\\(c\\)\n\\(d\\)\n\\(e\\)\n\\(f\\)\n\\(g\\)"
  },
  {
    "objectID": "slides/DF_norm_1.html#algorithme-de-poursuite-exemple-1",
    "href": "slides/DF_norm_1.html#algorithme-de-poursuite-exemple-1",
    "title": "BD xxx : Normalisation I",
    "section": "Algorithme de poursuite : exemple",
    "text": "Algorithme de poursuite : exemple\nSoit \\(t\\) un tuple dans la jointure\n\n\n\nV#\nVnom\nVville\nP#\nPnom\nPville\nQte\n\n\n\n\n\\(a\\)\n\\(b\\)\n\\(c\\)\n\\(d\\)\n\\(e\\)\n\\(f\\)\n\\(g\\)\n\n\n\n\n\\((a, b, c)\\in \\pi_{\\texttt{V#,Vnom,Vville}}(\\texttt{R})\\) donc il existe \\(e_1, f_1, g_1\\) tels que \\((a, b, c, d_1, e_1, f_1, g_1) \\in \\texttt{R}\\)\n\\((d,e,f) \\in \\pi_{\\texttt{P#,Pnom,Pville}}(\\texttt{R})\\) donc il existe \\(a_2, b_2, c_2, g_2\\) tels que \\((a_2, b_2, c_2, d, e, f, g_2)\\in \\texttt{R}\\)\n\\((a,d,g)\\in \\pi_{\\texttt{V#,P#,Qte}}(R)\\) donc il existe \\(b_3,c_3,e_3,f_3\\) tels que \\((a,b_3,c_3,d,e_3,f_3,g)\\in \\texttt{R}\\)\nOn peut le représenter comme ceci :\n\n\n\n\n\n\n\n\n\n\n\n\n\nV#\nVnom\nVville\nP#\nPnom\nPville\nQte\n\n\n\n\nVendeur\n.red[ \\(a\\) ]\n.red[ \\(b\\) ]\n.red[ \\(c\\) ]\n\\(d_1\\)\n\\(e_1\\)\n\\(f_1\\)\n\n\nProduit\n\\(a_2\\)\n\\(b_2\\)\n\\(c_2\\)\n.red[ \\(d\\) ]\n.red[ \\(e\\) ]\n.red[ \\(f\\) ]\n\n\nLivraison\n.red[ \\(a\\) ]\n\\(b_3\\)\n\\(c_3\\)\n.red[ \\(d\\) ]\n\\(e_3\\)\n\\(f_3\\)"
  },
  {
    "objectID": "slides/DF_norm_1.html#algorithme-de-poursuite-exemple-2",
    "href": "slides/DF_norm_1.html#algorithme-de-poursuite-exemple-2",
    "title": "BD xxx : Normalisation I",
    "section": "Algorithme de poursuite : exemple",
    "text": "Algorithme de poursuite : exemple\n\n\n\n\n\n\n\n\n\n\n\n\nV#\nVnom\nVville\nP#\nPnom\nPville\nQte\n\n\n\n\nVendeur\n.red[ \\(a\\) ]\n.red[ \\(b\\) ]\n.red[ \\(c\\) ]\n\\(d_1\\)\n\\(e_1\\)\n\\(f_1\\)\n\n\nProduit\n\\(a_2\\)\n\\(b_2\\)\n\\(c_2\\)\n.red[ \\(d\\) ]\n.red[ \\(e\\) ]\n.red[ \\(f\\) ]\n\n\nLivraison\n.red[ \\(a\\) ]\n\\(b_3\\)\n\\(c_3\\)\n.red[ \\(d\\) ]\n\\(e_3\\)\n\\(f_3\\)\n\n\n\n\nV# ⟶ Vnom, Vville donc \\(b_3=b\\) et \\(c_3=c\\)\n\n\n\n\n\n\n\n\n\n\n\n\n\nV#\nVnom\nVville\nP#\nPnom\nPville\nQte\n\n\n\n\nVendeur\n.red[ \\(a\\) ]\n.red[ \\(b\\) ]\n.red[ \\(c\\) ]\n\\(d_1\\)\n\\(e_1\\)\n\\(f_1\\)\n\n\nProduit\n\\(a_2\\)\n\\(b_2\\)\n\\(c_2\\)\n.red[ \\(d\\) ]\n.red[ \\(e\\) ]\n.red[ \\(f\\) ]\n\n\nLivraison\n.red[ \\(a\\) ]\n\\(b\\)\n\\(c\\)\n.red[ \\(d\\) ]\n\\(e_3\\)\n\\(f_3\\)"
  },
  {
    "objectID": "slides/DF_norm_1.html#algorithme-de-poursuite-exemple-suite",
    "href": "slides/DF_norm_1.html#algorithme-de-poursuite-exemple-suite",
    "title": "BD xxx : Normalisation I",
    "section": "Algorithme de poursuite : exemple (suite)",
    "text": "Algorithme de poursuite : exemple (suite)\n\nP#⟶ Pnom, Pville donc \\(e_3=e\\) et \\(f_3=f\\)\n\n\n\n\n\n\n\n\n\n\n\n\n\nV#\nVnom\nVville\nP#\nPnom\nPville\nQte\n\n\n\n\nVendeur\n.red[ \\(a\\) ]\n.red[ \\(b\\) ]\n.red[ \\(c\\) ]\n\\(d_1\\)\n\\(e_1\\)\n\\(f_1\\)\n\n\nProduit\n\\(a_2\\)\n\\(b_2\\)\n\\(c_2\\)\n.red[ \\(d\\) ]\n.red[ \\(e\\) ]\n.red[ \\(f\\) ]\n\n\nLivraison\n.red[ \\(a\\) ]\n\\(b\\)\n\\(c\\)\n.red[ \\(d\\) ]\n\\(e\\)\n\\(f\\)\n\n\n\n\nOn a obtenu une ligne égale au tuple \\(t=(a,b,c,d,e,f,g)\\) donc \\(t\\in \\texttt{R}\\).\n\nOn en déduit que la décomposition est Sans Perte d’Information (SPI)"
  },
  {
    "objectID": "slides/DF_norm_1.html#algorithme-de-poursuite-cas-général",
    "href": "slides/DF_norm_1.html#algorithme-de-poursuite-cas-général",
    "title": "BD xxx : Normalisation I",
    "section": "Algorithme de poursuite : cas général",
    "text": "Algorithme de poursuite : cas général\n\nEntrée : un schéma \\(\\mathcal{A}\\), une décomposition \\(\\{\\mathcal{A}_1,...,\\mathcal{A}_k\\}\\) et un ensemble \\(\\Sigma\\) de DF\nPour chaque attribut de \\(\\mathcal{A}\\), choisir un symbole (par exemple \\(a\\), \\(b\\), \\(c\\),…). La correspondance doit être injective.\nConstruire un tableau dont les colonnes sont les attributs de \\(\\mathcal{A}\\)\n\nLe tableau a une ligne pour chaque \\(\\mathcal{A}_i\\)\nSur la ligne associée à \\(\\mathcal{A}_i\\), les positions correspondant à \\(\\mathcal{A}_i\\) sont remplies avec les symboles choisis.\nLes autres positions sont remplies avec les symboles indicés par \\(i\\)\n\nRépéter tant que possible : s’il existe une DF \\(X\\rightarrow Y\\) dans \\(\\Sigma\\) et deux lignes du tableau en accord sur \\(X\\), égaliser ces deux lignes sur \\(Y\\)\nSortie : Si on obtient une ligne sans valeur indicée, la décomposition est sans perte d’information, sinon il y a perte d’information"
  },
  {
    "objectID": "slides/DF_norm_1.html#algorithme-de-poursuite-exemple-2-1",
    "href": "slides/DF_norm_1.html#algorithme-de-poursuite-exemple-2-1",
    "title": "BD xxx : Normalisation I",
    "section": "Algorithme de poursuite : exemple 2",
    "text": "Algorithme de poursuite : exemple 2\nConsidérons l’exemple : \\(\\mathcal{A}=\\{A,B,C,D\\}\\) avec \\(\\mathcal{A}_1=\\{A,B\\}\\), \\(\\mathcal{A}_2=\\{B,C\\}\\) et \\(\\mathcal{A}_3=\\{C,D\\}\\)\nSoit \\(\\Sigma=\\{{C}\\rightarrow{D}; {B}\\rightarrow{A}\\}\\).\nSoit \\(t=(a,b,c,d)\\). Soit \\(t_1,t_2,t_3\\) les tuples de \\(R\\) suivants:\n\n\n\n\nA\nB\nC\nD\n\n\n\n\n\\(t_2\\)\n\\(a_2\\)\nb\nc\n\\(d_2\\)\n\n\n\\(t_3\\)\n\\(a_3\\)\n\\(b_3\\)\nc\nd\n\n\n\nOn a pris \\(c_1,d_1, a_2,d_2, a_3,b_3\\) comme valeurs variables et a,b,c,d comme constantes"
  },
  {
    "objectID": "slides/DF_norm_1.html#algorithme-de-poursuite---exemple-2",
    "href": "slides/DF_norm_1.html#algorithme-de-poursuite---exemple-2",
    "title": "BD xxx : Normalisation I",
    "section": "Algorithme de poursuite - exemple 2",
    "text": "Algorithme de poursuite - exemple 2\n\n\n\n\nA\nB\nC\nD\n\n\n\n\n\\(t_1\\)\na\nb\n\\(c_1\\)\n\\(d_1\\)\n\n\n\\(t_2\\)\n\\(a_2\\)\nb\nc\n\\(d_2\\)\n\n\n\\(t_3\\)\n\\(a_3\\)\n\\(b_3\\)\nc\nd\n\n\n\nPar la dépendance \\({B}\\rightarrow{A}\\), il vient :\n\n\n\n\nA\nB\nC\nD\n\n\n\n\n\\(t_1\\)\na\nb\n\\(c_1\\)\n\\(d_1\\)\n\n\n\\(t_2\\)\n.red[ a ]\nb\nc\n\\(d_2\\)\n\n\n\\(t_3\\)\n\\(a_3\\)\n\\(b_3\\)\nc\nd"
  },
  {
    "objectID": "slides/DF_norm_1.html#algorithme-de-poursuite-exemple-2-2",
    "href": "slides/DF_norm_1.html#algorithme-de-poursuite-exemple-2-2",
    "title": "BD xxx : Normalisation I",
    "section": "Algorithme de poursuite : exemple 2",
    "text": "Algorithme de poursuite : exemple 2\nPar la dépendance \\({C}\\rightarrow{D}\\), il vient :\n\n\n\n\nA\nB\nC\nD\n\n\n\n\n\\(t_1\\)\na\nb\n\\(c_1\\)\n\\(d_1\\)\n\n\n\\(t_2\\)\na\nb\nc\nd\n\n\n\\(t_3\\)\n\\(a_3\\)\n\\(b_3\\)\nc\nd\n\n\n\nOn a bien fait apparaître \\(t\\) qui appartient donc à \\(R\\)."
  },
  {
    "objectID": "slides/DF_norm_1.html#algorithme-de-poursuite---exemple-3",
    "href": "slides/DF_norm_1.html#algorithme-de-poursuite---exemple-3",
    "title": "BD xxx : Normalisation I",
    "section": "Algorithme de poursuite - exemple 3",
    "text": "Algorithme de poursuite - exemple 3\nConsidérons toujours l’exemple : \\(\\mathcal{A}=\\{A,B,C,D\\}\\) avec\n\\(\\mathcal{A}_1=\\{A,B\\}\\), \\(\\mathcal{A}_2=\\{B,C\\}\\) et \\(\\mathcal{A}_3=\\{C,D\\}\\)\nMais avec \\(\\Sigma=\\{{B}\\rightarrow{AD}\\}\\).\n\n\n\nA\nB\nC\nD\n\n\n\n\na\nb\n\\(c_1\\)\n\\(d_1\\)\n\n\n\\(a_2\\)\nb\nc\n\\(d_2\\)\n\n\n\\(a_3\\)\n\\(b_3\\)\nc\nd\n\n\n\nDans ce cas, en utilisant la seule DF \\({B}\\rightarrow{AD}\\), on obtient \\(a_2=a\\) et \\(d_1=d_2\\) :\n\n\n\nA\nB\nC\nD\n\n\n\n\na\nb\n\\(c_1\\)\n\\(d_1\\)\n\n\na\nb\nc\n\\(d_1\\)\n\n\n\\(a_3\\)\n\\(b_3\\)\nc\nd\n\n\n\nMais on ne peut aller plus loin : la jointure des projections contient des tuples qui ne sont pas dans la relation originelle"
  },
  {
    "objectID": "slides/LDD_0.html#exemple",
    "href": "slides/LDD_0.html#exemple",
    "title": "BD II: SQL LDD",
    "section": "Exemple",
    "text": "Exemple\nSchéma:\nfournisseur(nomf, villef),\npiece(nomp, prix, couleur),\nlivraison(numliv, nomf, nomp, dateliv, quantite)\nCREATE TABLE fournisseur(\n    nomf VARCHAR(20),\n    villef VARCHAR(20)\n);\n\nCREATE TABLE piece(\n    nomp VARCHAR(20),\n    prix REAL,\n    couleur VARCHAR(15)\n);\n\nCREATE TABLE livraison(\n    numLiv INT,\n    nomf VARCHAR(20),\n    nomp VARCHAR(20),\n    dateliv DATE DEFAULT NOW(),\n    quantite INT DEFAULT 1\n);"
  },
  {
    "objectID": "slides/LDD_0.html#exemple-schéma-world-smaller",
    "href": "slides/LDD_0.html#exemple-schéma-world-smaller",
    "title": "BD II: SQL LDD",
    "section": "Exemple : schéma world {smaller}",
    "text": "Exemple : schéma world {smaller}\nCREATE TABLE world.city (\n    id int4 NOT NULL,\n    name_city text NOT NULL,\n    countrycode bpchar(3) NOT NULL,\n    district text NOT NULL,\n    population_city int4 NOT NULL,\n    CONSTRAINT city_pkey\n        PRIMARY KEY (id)\n);\n\n\nCREATE TABLE world.code_continent (\n    continent name NOT NULL,\n    codecontinent float4 NULL,\n    CONSTRAINT code_continent_pk\n        PRIMARY KEY (continent)\n);\n\nCREATE TABLE world.countrylanguage (\n    countrycode bpchar(3) NOT NULL,\n    \"language\" text NOT NULL,\n    isofficial bool NOT NULL,\n    percentage float4 NOT NULL,\n    CONSTRAINT countrylanguage_pkey\n        PRIMARY KEY (countrycode, language)\n);"
  },
  {
    "objectID": "slides/LDD_0.html#exemple-schéma-world-suite-smaller",
    "href": "slides/LDD_0.html#exemple-schéma-world-suite-smaller",
    "title": "BD II: SQL LDD",
    "section": "Exemple: schéma world (suite) {smaller}",
    "text": "Exemple: schéma world (suite) {smaller}\nCREATE TABLE world.country (\n    countrycode bpchar(3) NOT NULL,\n    name_country text NOT NULL,\n    continent text NOT NULL,\n    region text NOT NULL,\n    surfacearea float4 NOT NULL,\n    indepyear int2 NULL,\n    population_country int4 NOT NULL,\n    lifeexpectancy float4 NULL,\n    gnp numeric(10, 2) NULL,\n    gnpold numeric(10, 2) NULL,\n    localname text NOT NULL,\n    governmentform text NOT NULL,\n    headofstate text NULL,\n    capital int4 NULL,\n    code2 bpchar(2) NOT NULL,\n    CONSTRAINT country_continent_check CHECK (\n        ((continent = 'Asia'::text) OR (\n            continent = 'Europe'::text) OR\n            (continent = 'North America'::text) OR\n            (continent = 'Africa'::text) OR\n            (continent = 'Oceania'::text) OR\n            (continent = 'Antarctica'::text) OR\n            (continent = 'South America'::text))),\n    CONSTRAINT country_pkey PRIMARY KEY (countrycode)\n);"
  },
  {
    "objectID": "slides/LDD_0.html#suppression-dune-table",
    "href": "slides/LDD_0.html#suppression-dune-table",
    "title": "BD II: SQL LDD",
    "section": "Suppression d’une table",
    "text": "Suppression d’une table\nDROP TABLE fournisseur;\nDROP TABLE piece;\nDROP TABLE livraison;"
  },
  {
    "objectID": "slides/LDD_0.html#contenu-des-relations",
    "href": "slides/LDD_0.html#contenu-des-relations",
    "title": "BD II: SQL LDD",
    "section": "Contenu des relations",
    "text": "Contenu des relations\nOn peut gérer le contenu des tables directement dans le langage SQL.\nOn peut donc :\n\nAjouter des tuples à une table : INSERT INTO ...\nMettre à jour des tuples d’une relation : UPDATE ...\nSupprimer des tuples : DELETE FROM ..."
  },
  {
    "objectID": "slides/LDD_0.html#insertion-de-tuples",
    "href": "slides/LDD_0.html#insertion-de-tuples",
    "title": "BD II: SQL LDD",
    "section": "Insertion de tuples",
    "text": "Insertion de tuples\nINSERT INTO &lt;nom_relation&gt;\n    [(nom_attrib [, nom_attrib]*)]\n    VALUES (valeur [, valeur]*);\nExemple\nINSERT INTO piece VALUES('x21', 1.51, 'rouge');\n\nINSERT INTO piece (nomp,couleur) VALUES('x22', 'vert');\n\n+--------+--------+-----------+\n| nomp   | prix   | couleur   |\n|--------+--------+-----------|\n| x21    | 1.51   | rouge     |\n| x22    | &lt;null&gt; | vert      |\n+--------+--------+-----------+\n\nLes valeurs doivent être fournies dans l’ordre de déclaration des attributs\nLes valeurs non spécifiées sont affectées à NULL."
  },
  {
    "objectID": "slides/LDD_0.html#insertion-exemple-smaller",
    "href": "slides/LDD_0.html#insertion-exemple-smaller",
    "title": "BD II: SQL LDD",
    "section": "Insertion, exemple {smaller}",
    "text": "Insertion, exemple {smaller}\nINSERT INTO world.country\n(countrycode, name_country, continent,\n region, surfacearea, indepyear, population_country,\n lifeexpectancy, gnp, gnpold,\n localname, governmentform, headofstate, capital, code2)\nVALUES(\n    'SYL', 'Syldavia', 'Europe',\n    'Eastern Europe', 200000, 1918, 21345717,\n    81.2, 25213, 24878,\n    'Syldavie', 'Constitutional Monarchy', 'Ottokar II', 0, 'SY'\n);"
  },
  {
    "objectID": "slides/LDD_0.html#insertion-de-tuples-1",
    "href": "slides/LDD_0.html#insertion-de-tuples-1",
    "title": "BD II: SQL LDD",
    "section": "Insertion de tuples",
    "text": "Insertion de tuples\nINSERT INTO livraison\n    VALUES\n    (1, 'fournisseur1', 'x21', '2019-07-13', 2);\n\n-- Avec des colonnes pas renseignées\n\nINSERT INTO livraison\n   (numliv, dateliv, quantite)\n    VALUES\n   (2, '2018-07-29', 10);\n\n+----------+--------------+--------+------------+------------+\n| numliv   | nomf         | nomp   | dateliv    | quantite   |\n|----------+--------------+--------+------------+------------|\n| 1        | fournisseur1 | x21    | 2019-07-13 | 2          |\n| 2        | &lt;null&gt;       | &lt;null&gt; | 2018-07-29 | 10         |\n+----------+--------------+--------+------------+------------+\n\nLes valeurs doivent être fournies dans l’ordre de déclaration des attributs\nLes valeurs non spécifiées sont affectées à NULL."
  },
  {
    "objectID": "slides/LDD_0.html#insertion-de-tuples-par-requête",
    "href": "slides/LDD_0.html#insertion-de-tuples-par-requête",
    "title": "BD II: SQL LDD",
    "section": "Insertion de tuples par requête",
    "text": "Insertion de tuples par requête\n\nOn peut faire une insertion par le biais d’une requête\nLa clause VALUES est remplacée par une requête\nLes résultats de la requête sont insérés comme valeurs dans la table\n\nExemple : Alimentation d’une nouvelle table à l’aide des données d’une autre\nINSERT INTO FournisseursParisiens\n    (SELECT *\n     FROM Fournisseur\n     WHERE VilleF='Paris'\n);"
  },
  {
    "objectID": "slides/LDD_0.html#mise-à-jour",
    "href": "slides/LDD_0.html#mise-à-jour",
    "title": "BD II: SQL LDD",
    "section": "Mise à jour",
    "text": "Mise à jour\n\nOn peut mettre à jour des tuples existants par le biais d’une requête\n\nSoit tous les tuples de la table,\nSoit l’ensemble des tuples vérifiants une condition donnée\n\n\nUPDATE nom_relation\nSET nom_attribut = &lt;expression de valeur&gt;\n[ , nom_attribut = &lt;expression de valeur&gt; ]*\n[ WHERE &lt;condition de recherche&gt; ];"
  },
  {
    "objectID": "slides/LDD_0.html#mise-à-jour-de-tuples",
    "href": "slides/LDD_0.html#mise-à-jour-de-tuples",
    "title": "BD II: SQL LDD",
    "section": "Mise à jour de tuples",
    "text": "Mise à jour de tuples\nLe WHERE permet de sélectionner les tuples à mettre à jour\nUPDATE Fournisseur\n    SET VilleF='St.Petersburg'\n    WHERE VilleF='Leningrad';\nOn peut aussi effectuer des opérations sur les tuples à mettre à jour.\nLa clause &lt;expression de valeur&gt; peut être :\n\nNULL\nUne constante (explicite ou via une requête)\nUne expression arithmétique sur les attributs de la table à modifier"
  },
  {
    "objectID": "slides/LDD_0.html#mise-à-jour-de-tuples-exemple",
    "href": "slides/LDD_0.html#mise-à-jour-de-tuples-exemple",
    "title": "BD II: SQL LDD",
    "section": "Mise à jour de tuples (exemple)",
    "text": "Mise à jour de tuples (exemple)\nAugmentation du prix d’une pièce\nUPDATE Piece\nSET Prix = Prix * 1.05\n    WHERE NomP = 'x21';"
  },
  {
    "objectID": "slides/LDD_0.html#mise-à-jour-par-requête",
    "href": "slides/LDD_0.html#mise-à-jour-par-requête",
    "title": "BD II: SQL LDD",
    "section": "Mise à jour par requête",
    "text": "Mise à jour par requête\nUPDATE Piece\nSET Prix = (\n    SELECT Prix\n    FROM Piece\n    WHERE NomP = 'x21'\n)\nWHERE Prix &lt;= 1000;"
  },
  {
    "objectID": "slides/LDD_0.html#suppression-de-tuples-syntaxe",
    "href": "slides/LDD_0.html#suppression-de-tuples-syntaxe",
    "title": "BD II: SQL LDD",
    "section": "Suppression de tuples : syntaxe",
    "text": "Suppression de tuples : syntaxe\nDELETE FROM &lt;nom_relation&gt;\n[WHERE &lt;condition de recherche&gt;];\nExemple\nDELETE FROM Fournisseur\nWHERE NomF = 'FastDelivery';\nOn supprime dans Fournisseur les tuples correspondant au fournisseur nommé 'FastDelivery'"
  },
  {
    "objectID": "slides/LDD_0.html#suppression-de-tuples-avec-requête-imbriquée",
    "href": "slides/LDD_0.html#suppression-de-tuples-avec-requête-imbriquée",
    "title": "BD II: SQL LDD",
    "section": "Suppression de tuples avec requête imbriquée",
    "text": "Suppression de tuples avec requête imbriquée\nDELETE FROM Livraison\nWHERE NomP IN (\n    SELECT NomP\n    FROM Piece\n    WHERE Couleur='Rouge'\n);"
  },
  {
    "objectID": "slides/LDD_0.html#delete-from-table-using-t-where-...-smaller",
    "href": "slides/LDD_0.html#delete-from-table-using-t-where-...-smaller",
    "title": "BD II: SQL LDD",
    "section": "DELETE FROM <table> USING <t> WHERE ... {smaller}",
    "text": "DELETE FROM &lt;table&gt; USING &lt;t&gt; WHERE ... {smaller}\n\nSouvent, lorsque vous supprimez des données d’une table, vous souhaitez supprimer ces données en fonction de leur présence dans un autre ensemble de données. Spécifiez cet ensemble supplémentaire avec le prédicat USING\n\nCREATE TABLE chaprot.city () INHERITS (world.city) ;\nCREATE TABLE chaprot.country () INHERITS (world.country) ;\n\nINSERT INTO chaprot.country (\n    SELECT * FROM world.country\n    WHERE continent = 'Europe' \n);\n\nINSERT INTO chaprot.city (\n    SELECT ci.*  FROM world.city ci NATURAL JOIN world.country co\n    WHERE co.continent = 'Europe'\n) ;"
  },
  {
    "objectID": "slides/LDD_0.html#delete-from-table-using-t-where-...",
    "href": "slides/LDD_0.html#delete-from-table-using-t-where-...",
    "title": "BD II: SQL LDD",
    "section": "DELETE FROM <table> USING <t> WHERE ...",
    "text": "DELETE FROM &lt;table&gt; USING &lt;t&gt; WHERE ...\n\nSouvent, lorsque vous supprimez des données d’une table, vous souhaitez supprimer ces données en fonction de leur présence dans un autre ensemble de données. Spécifiez cet ensemble supplémentaire avec le prédicat USING\n\nDELETE FROM chaprot.city \nUSING chaprot.country AS co\nWHERE city.countrycode = co.countrycode AND \n      co.region= 'Eastern Europe' AND \n      co.indepyear = 1991 ;"
  },
  {
    "objectID": "slides/LDD_0.html#maintien-de-lintégrité-référentielle-un-problème",
    "href": "slides/LDD_0.html#maintien-de-lintégrité-référentielle-un-problème",
    "title": "BD II: SQL LDD",
    "section": "Maintien de l’intégrité référentielle (un problème)",
    "text": "Maintien de l’intégrité référentielle (un problème)\nLa dernière requête renvoie à un problème plus général que l’on illustre à l’aide des tables Livraison et Piece, notées L et P.\nIl y a problème quand :\n\nOn cherche à insérer dans L un tuple dont la valeur de NomP n’existe pas dans P\nOn cherche à mettre à jour un tuple de L avec une valeur de NomP qui n’existe pas dans P\nOn efface de P, un tuple dont la valeur du champs NomP apparait comme valeur d’un tuple de L\nOn met à jour le champs NomP d’un tuple de P alors que l’ancienne valeur de ce champs est présente comme valeur de NomP dans L"
  },
  {
    "objectID": "slides/LDD_0.html#maintien-de-lintégrité-référentielle-politiques-possibles",
    "href": "slides/LDD_0.html#maintien-de-lintégrité-référentielle-politiques-possibles",
    "title": "BD II: SQL LDD",
    "section": "Maintien de l’intégrité référentielle (politiques possibles)",
    "text": "Maintien de l’intégrité référentielle (politiques possibles)\nPlusieurs politiques possibles pour régler ces problèmes\n\nPar défaut : le système rejette toute modification ne respectant pas les contraintes d’intégrité\n\n\n\nEn cascade : les modifications sur l’attribut référencé sont effectués aussi sur l’attribut qui référence (la clé étrangère)\n\nExemple : mise à jour de P.NomP répercutée sur L.NomP. Effacement répercuté aussi..\n\n\n\nSet-Null : les modifications sur l’attribut référencé sont répercuté sur l’attribut qui référence en mettant sa valeur à NULL."
  },
  {
    "objectID": "slides/LDD_0.html#maintien-de-lintégrité-référentielle-exemple",
    "href": "slides/LDD_0.html#maintien-de-lintégrité-référentielle-exemple",
    "title": "BD II: SQL LDD",
    "section": "Maintien de l’intégrité référentielle (exemple)",
    "text": "Maintien de l’intégrité référentielle (exemple)\nExemple de syntaxe\nCREATE TABLE Livraison (\n    NumLiv INT(10) PRIMARY KEY,\n    NomF VARCHAR(30) NOT NULL REFERENCES Fournisseur,\n    DateLiv DATE,\n    Quantite INT(8);\n    NomP VARCHAR(30) REFERENCES Piece\n      ON DELETE SET NULL\n      ON UPDATE CASCADE\n)\nCette déclaration force :\n\nà répercuter l’effacement d’un tuple dans Piece en mettant tous les champs L.NomP à NULL lorsque ceux-ci avait pour valeur celle de P.NomP effacée.\nà répercuter la mise à jour d’un tuple dans Piece (pour ce qui concerne le champs NomP) dans les tuples de Livraison concernés."
  },
  {
    "objectID": "slides/LDD_0.html#famille-de-contraintes",
    "href": "slides/LDD_0.html#famille-de-contraintes",
    "title": "BD II: SQL LDD",
    "section": "Famille de contraintes",
    "text": "Famille de contraintes\n\nContrainte de type (attribut)\nContrainte de non-nullité (attribut)\nContrainte de vérification (tuple)\nContrainte de clé primaire (table)\nContrainte d’unicité (table)\nContrainte d’unicité avancée (table)\nContraintes d’exclusion (table)\nContrainte de clé étrangère (multi-tables)"
  },
  {
    "objectID": "slides/LDD_0.html#contraintes-élémentaires",
    "href": "slides/LDD_0.html#contraintes-élémentaires",
    "title": "BD II: SQL LDD",
    "section": "Contraintes élémentaires",
    "text": "Contraintes élémentaires\nSpécifier le type d’un attribut, c’est le contraindre\n Consulter la liste des constructions de type possible\nhttp://www.postgresql.org/docs/9.4/interactive/datatype.html\nIl faut essayer d’utiliser autant que possible ces types pour préciser les contenus des colonnes."
  },
  {
    "objectID": "slides/LDD_0.html#les-valeurs-nulles",
    "href": "slides/LDD_0.html#les-valeurs-nulles",
    "title": "BD II: SQL LDD",
    "section": "Les valeurs nulles",
    "text": "Les valeurs nulles\nImposer qu’une colonne soit toujours renseignée\n La présence possible des valeurs nulles rend beaucoup d’opérations complexes\nIl faut avoir en tête que en SQL, les booléens peuvent avoir trois valeurs : TRUE, FALSE et NULL et que le fait qu’une expression ne vaille pas FALSE ne veut pas dire qu’elle vaut TRUE …\n Pour imposer qu’une colonne soit renseignée\nPréciser, après le type : NOT NULL"
  },
  {
    "objectID": "slides/LDD_0.html#contraintes-élémentaires-clé-primaire",
    "href": "slides/LDD_0.html#contraintes-élémentaires-clé-primaire",
    "title": "BD II: SQL LDD",
    "section": "Contraintes élémentaires : clé primaire",
    "text": "Contraintes élémentaires : clé primaire\nQuand on précise que code est clé primaire de country_code, on impose que la requête suivante renvoie toujours une table vide:\nSELECT cc1.code, cc2.code\nFROM country_code cc1 JOIN\n     country_code cc2\nWHERE cc1.code = cc2.code AND\n      cc1.country &lt;&gt; cc2.country  ;\nLa requête est une jointure de la table sur elle-même"
  },
  {
    "objectID": "slides/LDD_0.html#quelques-remarques",
    "href": "slides/LDD_0.html#quelques-remarques",
    "title": "BD II: SQL LDD",
    "section": "Quelques remarques",
    "text": "Quelques remarques\n\nUne contrainte d’attribut concerne un seul attribut\nSi valeur NULL impossible : NOT NULL\nSi l’attribut est une clé : PRIMARY KEY\nUnicité de l’attribut : UNIQUE\nContrainte référentielle :\n\n.f6[REFERENCES &lt;relation référencée&gt;[(&lt;attribut référencé&gt;)]]\n\nDéfinir une valeur par défaut : DEFAULT &lt;valeur&gt;\n\n\n\n\n\n\n\nAttention\n\n\nles types disponibles (mais pas seulement) diffèrent grandement suivant les SGBD (Mysql, Postgresql, Oracle, SQL Server, …)"
  },
  {
    "objectID": "slides/LDD_0.html#exemple-de-contrainte-de-clé-primaire",
    "href": "slides/LDD_0.html#exemple-de-contrainte-de-clé-primaire",
    "title": "BD II: SQL LDD",
    "section": "Exemple de contrainte de clé primaire",
    "text": "Exemple de contrainte de clé primaire\nFournisseur (NomF, VilleF, AdresseF)\nPiece(NomP, Prix, Couleur)\nLivraison(NumLiv,NomP,NomF,DateLiv,Quantite)\nCREATE TABLE Piece (\n    NomP    VARCHAR(30) PRIMARY KEY,\n    Prix    INT(10),\n    Couleur VARCHAR(15));\nou bien :\nCREATE TABLE Piece (\n    NomP    VARCHAR(30),\n    Prix    INT(10),\n    Couleur VARCHAR(15),\n    PRIMARY KEY(NomP));"
  },
  {
    "objectID": "slides/LDD_0.html#contraintes-dunicité",
    "href": "slides/LDD_0.html#contraintes-dunicité",
    "title": "BD II: SQL LDD",
    "section": "Contraintes d’unicité",
    "text": "Contraintes d’unicité\nCREATE TABLE sakila.\"language\" (\n    language_id serial4 NOT NULL,\n    \"name\" bpchar(20) NOT NULL,\n    last_update timestamp NOT NULL DEFAULT now(),\n    CONSTRAINT language_pkey PRIMARY KEY (language_id)\n);\nOn voudrait aussi imposer que \"name\" satisfît une contrainte d’unicité\n\nCREATE TABLE uname.\"language\" (\n    language_id int4 NULL,\n    \"name\" bpchar(20) NULL,\n    last_update timestamp NULL,\n    CONSTRAINT language_un UNIQUE (\"name\"),\n    CONSTRAINT language_pk PRIMARY KEY (language_id)\n);"
  },
  {
    "objectID": "slides/LDD_0.html#contraintes-dunicité-avancées",
    "href": "slides/LDD_0.html#contraintes-dunicité-avancées",
    "title": "BD II: SQL LDD",
    "section": "Contraintes d’unicité avancées",
    "text": "Contraintes d’unicité avancées\nINSERT INTO colors(color, hex)\n    VALUES \n        ('blue', '0000FF'), \n        ('red', 'FF0000'), \n        ('green', '00FF00')\n    ON CONFLICT DO NOTHING ;\nSomeone could come and put in a different case ‘Blue’ in our system, and we’d then have two different cased blues.\n\nTo remedy this, we can put a unique index on our table:\nCREATE UNIQUE INDEX uidx_colors_lcolor \n    ON colors \n    USING btree(lower(color));\n\n\nAs before, if we tried to insert a ‘Blue’, we’d be prevented from doing so and the ON CONFLICT DO NOTHING would result in nothing happening.\nIf we really wanted to spell the colors as given to us, we could use code like that given in Example 7-18.\nON CONFLICT DO UPDATE\nINSERT INTO colors(color, hex)\n    VALUES\n        ('Blue', '0000FF'), \n        ('Red', 'FF0000'), \n        ('Green', '00FF00')\nON CONFLICT(lower(color))\n\nDO UPDATE SET color = EXCLUDED.color, hex = EXCLUDED.hex;"
  },
  {
    "objectID": "slides/LDD_0.html#contraintes-référentiellesclé-étrangère",
    "href": "slides/LDD_0.html#contraintes-référentiellesclé-étrangère",
    "title": "BD II: SQL LDD",
    "section": "Contraintes référentielles/clé étrangère",
    "text": "Contraintes référentielles/clé étrangère\nUne contrainte de clé étrangère sur une collection de colonnes stipule que\n\n\npour tout tuple de la table émettrice, la combinaison des valeurs des colonnes impliquées se trouve aussi dans un tuple la table cible"
  },
  {
    "objectID": "slides/LDD_0.html#exemple-de-contrainte-référentielle",
    "href": "slides/LDD_0.html#exemple-de-contrainte-référentielle",
    "title": "BD II: SQL LDD",
    "section": "Exemple de contrainte référentielle",
    "text": "Exemple de contrainte référentielle\nFournisseur (NomF, VilleF, AdresseF)\nPiece(NomP, Prix, Couleur)\nLivraison(NumLiv,NomP,NomF,DateLiv,Quantite)\nCREATE TABLE Livraison (\n    NumLiv int(10) PRIMARY KEY,\n    NomF VARCHAR(30) NOT NULL REFERENCES Fournisseur,\n    NomP VARCHAR(30) NOT NULL REFERENCES Piece,\n    DateLiv DATE,\n    Quantite Int(8);"
  },
  {
    "objectID": "slides/DF_norm_4.html#rappel-propriétés-dune-décomposition",
    "href": "slides/DF_norm_4.html#rappel-propriétés-dune-décomposition",
    "title": "BD xxx : Normalisation II",
    "section": "Rappel : Propriétés d’une décomposition",
    "text": "Rappel : Propriétés d’une décomposition\n\nSoit \\({\\mathcal A}\\) un schéma de relation et \\(\\Sigma\\) un ensemble de DF sur \\({\\mathcal A}\\).\nSoit \\(\\left\\{{\\mathcal A}_1,\\dots, {\\mathcal A}_k\\right\\}\\) une décomposition du schéma \\({\\mathcal A}\\) \\(\\text{${\\mathcal A}_i\\not=\\emptyset$, $1\\le i\\le k$ et }{\\mathcal A}= \\bigcup_{i=1}^k {\\mathcal A}_i\\)\nOn ne peut pas décomposer arbitrairement, toutes les décompositions ne sont pas intéressantes\n\nConditions pour une décomposition “raisonnable” :\n\nDécomposition sans perte d’information\nDécomposition sans perte de dépendance fonctionnelle"
  },
  {
    "objectID": "slides/DF_norm_4.html#projection-dun-ensemble-de-df",
    "href": "slides/DF_norm_4.html#projection-dun-ensemble-de-df",
    "title": "BD xxx : Normalisation II",
    "section": "Projection d’un ensemble de DF",
    "text": "Projection d’un ensemble de DF\n\nSoit \\({\\mathcal A}\\) un schéma de relation (\\({\\mathcal A}\\) est un ensemble d’attributs) et \\(\\Sigma\\) un ensemble de DF sur \\({\\mathcal A}\\)\nSoit \\({\\mathcal A}_1\\subset{\\mathcal A}\\) un sous-ensemble d’attributs\nDéfinition \\[{\\color{blue}\\pi^{}_{{\\mathcal A}_1}(\\Sigma)=\\left\\{ X\\to Y \\mid \\Sigma\\models X\\to Y \\text{ et } X,Y\\subset{\\mathcal A}_1\\right\\}}\\] Autrement dit \\(\\pi^{}_{{\\mathcal A}_1}(\\Sigma)\\) est l’ensemble des DF de la forme \\(X\\to Y\\) impliquée par \\(\\Sigma\\) et telle que \\(X\\subset{\\mathcal A}_1\\) et \\(Y\\subset {\\mathcal A}_1\\)\nCaractérisation : si \\(X\\subset {\\mathcal A}_1\\) on l’équivalence \\[X\\to Y \\in \\pi_{{\\mathcal A}_1}(\\Sigma) \\iff Y\\subset\\left\\{X\\right\\}^+\\cap{\\mathcal A}_1\\]"
  },
  {
    "objectID": "slides/DF_norm_4.html#exemple",
    "href": "slides/DF_norm_4.html#exemple",
    "title": "BD xxx : Normalisation II",
    "section": "Exemple",
    "text": "Exemple\n\n\\({\\mathcal A}=\\left\\{A,B,C\\right\\}\\) et \\(\\Sigma=\\left\\{A\\to B, B\\to C, C\\to A\\right\\}\\)\n\\(\\pi^{}_{\\left\\{A,B\\right\\}}(\\Sigma)\\) est équivalent à \\(\\left\\{A\\to B, B\\to A\\right\\}\\)"
  },
  {
    "objectID": "slides/DF_norm_4.html#calcul-de-pi_mathcal-a_1sigma",
    "href": "slides/DF_norm_4.html#calcul-de-pi_mathcal-a_1sigma",
    "title": "BD xxx : Normalisation II",
    "section": "Calcul de \\(\\pi_{{\\mathcal A}_1}(\\Sigma)\\)\n",
    "text": "Calcul de \\(\\pi_{{\\mathcal A}_1}(\\Sigma)\\)\n\nOn calcule un ensemble de DF équivalent à \\(\\pi_{{\\mathcal A}_1}(\\Sigma)\\)\n\nAlgorithme \\(P := \\emptyset\\)\npour tout \\(X\\subset {\\mathcal A}_1\\) tel que \\(X\\not=\\emptyset\\) et \\(X\\not={\\mathcal A}_1\\)\ncalculer \\(Y=X^+\\cap{\\mathcal A}_1\\) et ajouter \\(X\\to Y\\) à \\(P\\)\nrenvoyer \\(P\\)\n\nL’ensemble de DF obtenu est équivalent à \\(\\pi_{{\\mathcal A}_1}(\\Sigma)\\)Très coûteux ! Le nombre de sous-ensembles \\(X\\) considérés est \\(2^{\\#{\\mathcal A}_1}-2\\) :::"
  },
  {
    "objectID": "slides/DF_norm_4.html#exemple-1",
    "href": "slides/DF_norm_4.html#exemple-1",
    "title": "BD xxx : Normalisation II",
    "section": "Exemple",
    "text": "Exemple\n\n\\({\\mathcal A}=\\left\\{A,B,C,D,E\\right\\}\\) et \\(\\Sigma=\\left\\{A\\to C, BC\\to D, AD\\to E\\right\\}\\)\n\\(\\pi_{AC}(\\Sigma)\\) est équivalent à \\(\\left\\{A\\to C\\right\\}\\)\ncar \\(\\left\\{A\\right\\}^+=\\left\\{A,C\\right\\}\\) et \\(\\left\\{C\\right\\}^+=\\left\\{C\\right\\}\\)\n\\(\\pi_{ABD}(\\Sigma)\\) est équivalent à \\(\\left\\{AB\\to D\\right\\}\\)\ncar \\(\\left\\{A\\right\\}^+=\\left\\{A,C\\right\\}\\), \\(\\left\\{B\\right\\}^+=\\left\\{D\\right\\}\\), \\(\\left\\{D\\right\\}^+=\\left\\{D\\right\\}\\), \\(\\left\\{A,B\\right\\}^+=\\left\\{A,B,C,D,E\\right\\}\\), \\(\\left\\{A,D\\right\\}^+=\\left\\{A,D,C,E\\right\\}\\), \\(\\left\\{B,D\\right\\}^+=\\left\\{B,D\\right\\}\\)\n\\(\\pi_{ABCE}(\\Sigma)\\) est équivalent à \\(\\left\\{A\\to C, AB \\to CE, AE\\to C, ABC\\to E, ABE\\to C\\right\\}\\)\\(A^+=AC \\quad B^+=B \\quad C^+=C \\quad E^+=E\\)\\(AB^+=ABCDE \\quad AC^+=AC \\quad AE^+=AEC\\)\\(BC^+=BCD \\quad BE^+=BE \\quad CE^+=CE\\)\\(ABC^+=ABCDE \\quad ABE^+=ABECD\\)\\(BCE^+=BCED \\quad ACE^+=ACE\\)\nSimplification : \\(\\pi_{ABCE}(\\Sigma)\\) équivaut à \\(\\left\\{A\\to C, AB\\to E\\right\\}\\)"
  },
  {
    "objectID": "slides/DF_norm_4.html#définition",
    "href": "slides/DF_norm_4.html#définition",
    "title": "BD xxx : Normalisation II",
    "section": "Définition",
    "text": "Définition\n\nSoit \\({\\mathcal A}\\) un schéma de relation et \\(\\Sigma\\) un ensemble de DF sur \\({\\mathcal A}\\).\nSoit \\(\\left\\{{\\mathcal A}_1,\\dots, {\\mathcal A}_k\\right\\}\\) une décomposition du schéma \\({\\mathcal A}\\) \\(\\text{${\\mathcal A}_i\\not=\\emptyset$, $1\\le i\\le k$ et }{\\mathcal A}= \\bigcup_{i=1}^k {\\mathcal A}_i\\)\n\n\nDéfinition La décomposition \\(\\left\\{{\\mathcal A}_1,\\dots, {\\mathcal A}_k\\right\\}\\) préserve \\(\\Sigma\\) si l’ensemble des dépendances fonctionnelles locales \\(\\bigcup_{i=1}^k \\pi_{{\\mathcal A}_i}(\\Sigma)\\) est équivalent à \\(\\Sigma\\)\n\nPuisque \\(\\Sigma\\) implique \\(\\bigcup_{i=1}^k \\pi_{{\\mathcal A}_i}(\\Sigma)\\), la décomposition préserve \\(\\Sigma\\) si et seulement si toutes les DF de \\(\\Sigma\\) sont impliquées par les DF locales"
  },
  {
    "objectID": "slides/DF_norm_4.html#algorithme",
    "href": "slides/DF_norm_4.html#algorithme",
    "title": "BD xxx : Normalisation II",
    "section": "Algorithme",
    "text": "Algorithme\n\nC’est une extension de l’algorithme de fermeture permet de tester si une décomposition est sans perte de DF (sans devoir calculer les \\(\\pi_{{\\mathcal A}_i}(\\Sigma)\\))\nSoit \\(X\\to Y\\) une DF de \\(\\Sigma\\)"
  },
  {
    "objectID": "slides/DF_norm_4.html#algorithme-pour-tester-si-xto-y-est-impliquée-par",
    "href": "slides/DF_norm_4.html#algorithme-pour-tester-si-xto-y-est-impliquée-par",
    "title": "BD xxx : Normalisation II",
    "section": "Algorithme pour tester si \\(X\\to Y\\) est impliquée par",
    "text": "Algorithme pour tester si \\(X\\to Y\\) est impliquée par\n\\(\\bigcup_{i=1}^k \\pi_{{\\mathcal A}_i}(\\Sigma)\\)\n\n\\(Z := X\\)\n\ntant que $Z$ change faire\n    pour tout $i=1,\\dots, k$ faire\n        $Z:= Z \\cup \\bigl( (Z\\cap {\\mathcal A}_i)^+ \\cap {\\mathcal A}_i\\bigr)$\n    fin pour tout\nfin tant que\n\nSi \\(Y\\not\\subset Z\\) la réponse est NON, sinon la réponse est OUI"
  },
  {
    "objectID": "slides/DF_norm_4.html#exemple-2",
    "href": "slides/DF_norm_4.html#exemple-2",
    "title": "BD xxx : Normalisation II",
    "section": "Exemple",
    "text": "Exemple\n\n\\({\\mathcal A}=\\left\\{A,B,C,D\\right\\}\\), \\({\\mathcal A}_1=\\left\\{A,B\\right\\}\\), \\({\\mathcal A}_2=\\left\\{B,C\\right\\}\\), \\({\\mathcal A}_3=\\left\\{C,D\\right\\}\\)\n\\(\\Sigma=\\left\\{A\\to B, B\\to C, C\\to D, D\\to A\\right\\}\\)\nEst-ce que la décomposition \\(\\left\\{{\\mathcal A}_1,{\\mathcal A}_2,{\\mathcal A}_3\\right\\}\\) préserve \\(\\Sigma\\) ?\n\n\nLes DF locales impliquent \\(A\\to B\\), \\(B\\to C\\), \\(C\\to D\\) (elles sont DF locales)\nEst-ce que les DF locales impliquent \\(D\\to A\\) ?\nCommencer avec \\(Z={\\color{blue}\\left\\{D\\right\\}}\\)\\(({\\color{blue}\\left\\{D\\right\\}}\\cap\\left\\{CD\\right\\})^+\\cap\\left\\{CD\\right\\}=\\left\\{D\\right\\}^+\\cap\\left\\{CD\\right\\}=\\left\\{DABC\\right\\}\\cap\\left\\{CD\\right\\}=\\left\\{C\\right\\}\\), ajouter \\(C\\)\\(({\\color{blue}DC}\\cap BC)^+\\cap BC=C^+\\cap BC=CDAB\\cap BC=B\\), ajouter \\(B\\)\\(({\\color{blue}DCB}\\cap AB)^+\\cap AB=B^+\\cap AB=BCDA \\cap AB\\), ajouter \\(A\\)\\(DCBA\\) contient \\(A\\) donc \\(D\\to A\\) est préservé"
  },
  {
    "objectID": "slides/DF_norm_4.html#exemple-3",
    "href": "slides/DF_norm_4.html#exemple-3",
    "title": "BD xxx : Normalisation II",
    "section": "Exemple",
    "text": "Exemple\n\n\\({\\mathcal A}=\\left\\{Ville, CP, Rue, Numero\\right\\}\\)\n\\(\\Sigma=\\left\\{CP\\to Ville, Ville\\, Rue\\, Numero\\to CP\\right\\}\\)\n\\({\\mathcal A}_1=\\left\\{Ville, CP\\right\\}\\)\\({\\mathcal A}_2=\\left\\{Rue, Numero, CP\\right\\}\\)\nEst-ce que la décomposition \\(\\left\\{{\\mathcal A}_1,{\\mathcal A}_2\\right\\}\\) préserve \\(\\Sigma\\) ?\n\n\n\\(CP\\to Ville\\) est préservée car elle est locale à \\({\\mathcal A}_1\\)\nEst-ce que \\(Ville\\, Rue\\, Numero\\to CP\\) est préservée ?\\(Z:=\\left\\{Ville, Rue, Numero\\right\\}\\)\\(\\bigl(Z\\cap \\left\\{Ville, CP\\right\\}\\bigr)^+\\cap \\left\\{Ville, CP\\right\\}=\\left\\{Ville\\right\\}\\), rien à ajouter\\(\\bigl(Z\\cap \\left\\{Rue, Numero, CP\\right\\}\\bigr)^+\\cap \\left\\{Rue, Numero, CP\\right\\}=\\left\\{Rue, Numero\\right\\}\\), rien à ajouter\nDonc \\(Ville\\, Rue\\, Numero\\to CP\\) n’est pas préservée"
  },
  {
    "objectID": "slides/SQL_4.html#pourquoi",
    "href": "slides/SQL_4.html#pourquoi",
    "title": "BD V: Fonctions SQL et Vues",
    "section": "Pourquoi ?",
    "text": "Pourquoi ?\nLorsqu’une collection de requêtes de même forme est utilisée sur une base de données, il est pertinent de préparer ces requêtes\nLes objectifs de cette préparation sont divers\n\néviter de coder de façon répétitive\npermettre une planification en amont des requêtes\néviter de recalculer des jointures coûteuses\n…"
  },
  {
    "objectID": "slides/SQL_4.html#comment",
    "href": "slides/SQL_4.html#comment",
    "title": "BD V: Fonctions SQL et Vues",
    "section": "Comment ?",
    "text": "Comment ?\nLes SGBD relationnels offrent une gamme d’outils pour combler ces besoins\n\nLes PREPARED STATEMENT\nLes fonctions\nLes vues"
  },
  {
    "objectID": "slides/SQL_4.html#syntaxe-générale-des-fonctions",
    "href": "slides/SQL_4.html#syntaxe-générale-des-fonctions",
    "title": "BD V: Fonctions SQL et Vues",
    "section": "Syntaxe générale des fonctions",
    "text": "Syntaxe générale des fonctions\nCREATE OR REPLACE FUNCTION \n    func_name(arg1 arg1_datatype DEFAULT arg1_default)\n\nRETURNS some type | set of some type | TABLE (..) AS\n$$\n\nBODY of function\n\n$$\nLANGUAGE language_of_function\n\n\nlangage_of_function peut prendre différentes valeurs :\n\nSQL (Trusted)\nPL/pgSQL (Trusted)\nC\nPL/Python (Untrusted)\n…\n\n\nSELECT lanname \nFROM pg_language;\nlanname |\n--------+\ninternal|\nc       |\nsql     |\nplpgsql |\n::::: \nSignature de la fonction\nCREATE OR REPLACE FUNCTION \n    &lt;func_name&gt;(&lt;arg1&gt; &lt;arg1_datatype&gt; [DEFAULT &lt;arg1_default&gt;])\n\nRETURNS &lt;some type&gt; | SETOF &lt;some type&gt; | TABLE (..)\nLa signature d’une fonction est formée par - le nom de la fonction - la liste des arguments (nom et type attendu) - le type du résultat retourné par la fonction\n\nSignature de la fonction (suite)\n\n&lt;arg1_datatype&gt;:\n\ntype prédéfini ou non, voir CREATE TYPE ...\ntype de colonne d’une table : country.countrycode%TYPE\ntype des tuples d’une table : country%ROWTYPE…\n\n&lt;arg1_default&gt;: litéral ou expression\nType du résultat:\n\ntype prédéfini ou non\nSETOF ... (table)\nTable\n\n\n\n\nArguments can have default values, which allow the caller of the function to omit them.\n\n\nOptional arguments must be positioned after nonoptional arguments in the function definition.\n\n\n\nTypes définis par l’usager\nCREATE TYPE  type_utilisateur AS \n  (&lt;identifiant&gt; &lt;type défini&gt;) \n   [, &lt;identifiant&gt; &lt;type défini&gt;]*\n);\nUsage pour une création de table\nCREATE TABLE &lt;nom de table&gt; OF \n  type_utilisateur\n  (CONSTRAINT &lt;nom de contrainte&gt; PRIMARY KEY  (&lt;nom de colonne&gt;));\nPratique pour créer des tables de même schéma\n\n\nquand on crée une table, PostgreSQL crée automatiquement un type associé\n\nExemple\n\nDéfinition d’un type\n\nCREATE TYPE basic_user AS (user_name varchar(50), pwd varchar(10));\n\nUsage du type défini par usager\n\nCREATE TABLE super_users OF basic_user \n  (CONSTRAINT pk_su PRIMARY KEY  (user_name));\n\nAnnotations\nLes définitions de fonctions comportent parfois des qualifications supplémentaires\n\nVOLATILITY: IMMUTABLE, STABLE, VOLATILE (default)\nSECURITY : SECURITY DEFINER, SECURITY INVOKER\n\n\nLes fonctions écrites en langage SQL\nSQL est d’abord un langage permettant d’émettre des requêtes, il peut aussi être utilisé pour écrire des fonctions\nDans PostgreSQL, l’utilisation d’un morceau de SQL existant est facile :\n\nprenez vos instructions SQL existantes (éventuellement plusieurs)\najoutez un en-tête et une conclusion fonctionnels\n\net … vous avez terminé \n\nLes fonctions écrites en langage SQL (suite)\nMais cette facilité a un prix \nVous ne pouvez pas :\n\nutiliser des structures de contrôle (boucles, alternatives) ou des définitions de variables locales\nexécuter des instructions SQL dynamiques que vous assemblez à la volée en utilisant les arguments passés dans la fonction\n\nMais, tout de même\n\nle planificateur de requêtes peut examiner une fonction SQL et en optimiser l’exécution\n\n\n\nSQL functions execute an arbitrary list of SQL statements, returning the result of the last query in the list.\n\n\nIn the simple (non-set) case, the first row of the last query’s result will be returned. Bear in mind that “the first row” of a multirow result is not well-defined unless you use ORDER BY. If the last query happens to return no rows at all, the null value will be returned.\n\n\nCorps de la fonction\n La syntaxe du corps de la fonction dépend du language_of_function\nDans le cas où language_of_function est SQL\n$$\n\nBODY of function\n\n$$\n\nRéférences aux argument\nOn peut faire références aux arguments en les nommant dans le corps de la fonction\nSi les arguments ne sont pas nommés, vous faites référence aux arguments par leur position dans la signature : $1, $2, $3, etc\n Si vous nommez les arguments, vous pouvez utiliser la notation\nbig_elephant(name =&gt; 'Wooly', ear_size =&gt; 1.2)\nlors des appels à la fonction\n\nExemple\nCREATE OR REPLACE FUNCTION \n  write_to_log(param_user_name varchar,\n               param_description text)\nRETURNS integer AS\n$$\nINSERT INTO logs\n   (user_name, description) \n   VALUES($1, $2)\nRETURNING log_id;\n$$\nLANGUAGE 'sql' VOLATILE;\n\nInvocation\nSELECT write_to_log('alex', \n    'Logged in at 11:59 AM.') AS new_id;\n\nLes fonctions SQL peuvent retourner des ensembles\nTrois manières de faire:\n\nANSI SQL standard: RETURNS TABLE\nspécifier des paramètres OUT et retourner SETOF RECORD\ntypes de données composés SETOF ...\n\n\n\n\nExemple de fonction retournant un type simple\nDans le schéma world, on veut écrire une fonction qui prend en argument une région et renvoie la population maximale parmi les capitales de la région\nCREATE OR REPLACE FUNCTION username.taille_max_capitale_region(p_region text)\nRETURNS INTEGER \nLANGUAGE SQL AS\n$$\nSELECT MAX(population_city) AS max_pop\nFROM world.country c JOIN world.city cc ON (c.capital=cc.id)\nWHERE c.region=p_region AND cc.population_city IS NOT NULL;\n$$ ;\n\nFonctions qui retournent un type composé\n\nDans le schéma world, on veut écrire une fonction qui prend en argument une région et renvoie le nom et la population de la capitale la plus peuplée de cette région\nOn peut utiliser le qualifiant OUT pour désigner des paramètres de sortie.\nCREATE OR REPLACE FUNCTION username.capitale(p_region text, \n    OUT o_name_capital TEXT, \n    OUT o_population_capital INTEGER)\nRETURNS RECORD  \nLANGUAGE SQL AS\n$$\nWITH r AS(\n  SELECT cc.*, RANK() OVER (PARTITION BY c.region ORDER BY cc.population_city DESC) AS rnk\n  FROM world.country c JOIN world.city cc ON (c.capital=cc.id)\n  WHERE c.region=p_region)\nSELECT r.name_city,  r.population_city\nFROM r \nWHERE r.rnk = 1 ;\n$$ ;\n\n\nFonctions qui retournent un type composé défini par les lignes d’une table\nDans le schéma world, on veut écrire une fonction qui prend en argument une région et renvoie la description de la capitale la plus peuplée de cette région\nOn se contente de nommer la table pour indiquer que le résultat doit avoir même structure qu’une ligne de la table\n  CREATE OR REPLACE FUNCTION username.capitale(p_region text)\n  RETURNS world.city  \n  LANGUAGE SQL AS\n  $$\n  WITH r AS(\n    SELECT cc.*, RANK() OVER (PARTITION BY c.region ORDER BY cc.population_city DESC) AS rnk\n    FROM world.country c JOIN world.city cc ON (c.capital=cc.id)\n    WHERE c.region=p_region)\n  SELECT r.id, r.name_city, r.countrycode, r.district, r.population_city\n  FROM r \n  WHERE r.rnk = 1 ;\n  $$ ;\n\n\nFonctions qui retournent une table\nDans le schéma world, on veut écrire une fonction qui prend en argument une région et renvoie la table des capitales de la région\n\n\nTable de schéma explicite\nOn se contente d’abord de renvoyer le nom de la capitale.\nOn explicite le schéma de la table résultat\nCREATE OR REPLACE FUNCTION username.capitales_region(p_region text)\nRETURNS TABLE (name_capital text) \nLANGUAGE SQL AS\n$$\nSELECT cc.name_city \nFROM world.country c JOIN world.city cc ON (c.capital=cc.id)\nWHERE c.region=p_region ;\n$$ ;\n\n\nTable de même schéma qu’une autre table\nhttps://www.postgresql.org/docs/15/xfunc-sql.html\nOn veut maintenant récupérer une table de même schéma que city.\nLa solution est très simple.\nOn profite de ce qu’à chaque table correspond un type de même nom et on utilise le mot-clé SETOF.\nCREATE OR REPLACE FUNCTION username.capitales_region_large(p_region text)\nRETURNS SETOF world.city  \nLANGUAGE SQL AS\n$$\nSELECT cc.* \nFROM world.country c JOIN world.city cc ON (c.capital=cc.id)\nWHERE c.region=p_region ;\n$$ ;\n\n\nAutres langages\n\nPL/pgSQL\nC\nPL/Python\nPL/R\n…\n\n\n\nFonctions SQL: usages\n\n\n\n\nFonction reprise depuis sakila\nCREATE OR REPLACE FUNCTION user.inventory_held_by_customer(\n    p_inventory_id integer,\n    OUT customer_id int2) AS \n$$\n  SELECT customer_id \n  FROM sakila.rental\n  WHERE return_date IS NULL AND inventory_id = p_inventory_id ;\n$$ LANGUAGE 'sql' ;\n\n\nFonctions de sakila\nCREATE OR REPLACE FUNCTION uname.film_in_stock(\n  p_film_id integer, \n  p_store_id integer, \n  OUT p_film_count integer)\n RETURNS SETOF integer\nAS $$\n     SELECT inventory_id\n     FROM sakila.inventory\n     WHERE film_id = $1\n     AND store_id = $2\n     AND sakila.inventory_in_stock(inventory_id);\n$$ LANGUAGE sql ;\n\n\n\nInvocation\nSELECT * \nFROM sakila.film_in_stock(12, 1) ;\n\n\n\np_film_count\n\n\n\n\n60\n\n\n61\n\n\n62\n\n\n\n\n\nVues : pourquoi ?\n\n\nAlmost all relational database products offer views as a level of abstraction from tables. In a view, you can query multiple tables and present additional derived columns based on complex calculations.\n\n\nViews are generally read-only, but PostgreSQL allows you to update the underlying data by updating the view, provided that the view draws from a single table.\n\n\nTo update data from views that join multiple tables, you need to create a trigger against the view.\n\n\nVersion 9.3 introduced materialized views, which cache data to speed up commonly used queries at the sacrifice of having the most up-to-date data.\n\n\n\nMotivation\nSi vous vous retrouvez à écrire tous les jours la même requête, créer une vue\nUne vue n’est rien d’autre qu’une requête stockée de façon persistante\n\n\nVues sur une seule table\nCREATE OR REPLACE VIEW co_asia AS\nSELECT * \nFROM world.country \nWHERE continent = 'Asia' ;\n\n\nInterroger une vue\nUne vue s’interroge comme une table :\nSELECT region, sum(population_country) AS pop \nFROM co_asia \nGROUP BY region \nORDER BY pop DESC ;\nregion                   |pop       |\n-------------------------+----------+\nEastern Asia             |1507328000|\nSouthern and Central Asia|1490776000|\nSoutheast Asia           | 518541000|\nMiddle East              | 188380700|\n\n\nVues et manipulation de données\nSi\n\nla vue (VIEW) provient d’une table unique\nla vue contient la clé primaire de la table d’origine\n\nAlors\non peut modifier la table au travers de la vue. On peut\n\ninsérer\nsupprimer\nmettre à jour\n\nExemple\n\nLa vue co_asia provient d’une unique table : world.country\nLa vue co_asia contient la clé primaire countrycode de la table world.country\n\n\n\n\nCette instruction :\nUPDATE co_asia\n\nSET continent='Antarctica';\n… est légale\n–\nMais, après exécution :\n\nla vue co_asia est vide \nles pays d’Asie de country sont délocalisés en Antarctique \n\n\n\nPour éviter ca : WITH CHECK OPTION\nCREATE OR REPLACE VIEW boucheron.co_asia AS\n\nSELECT * \nFROM world.country \nWHERE continent = 'Asia' \n\nWITH CHECK OPTION ;\nAjouter cette modification lors de la création de la vue et PostgreSQL s’opposera à une tentative d’insertion hors de la vue ou à une tentative de mise à jour qui placerait des tuples hors de la vue\n\n\n{smaller}\nCREATE OR REPLACE VIEW sakila.actor_info\nAS SELECT a.actor_id,\n    a.first_name,\n    a.last_name,\n    sakila.group_concat(DISTINCT (c.name::text || ': '::text) || \n        (( SELECT sakila.group_concat(f.title::text) AS group_concat\n           FROM sakila.film f\n             JOIN sakila.film_category fc_1 ON f.film_id = fc_1.film_id\n             JOIN sakila.film_actor fa_1 ON f.film_id = fa_1.film_id\n          WHERE fc_1.category_id = c.category_id AND fa_1.actor_id = a.actor_id\n          GROUP BY fa_1.actor_id))\n        ) AS film_info\n   FROM sakila.actor a\n     LEFT JOIN sakila.film_actor fa ON a.actor_id = fa.actor_id\n     LEFT JOIN sakila.film_category fc ON fa.film_id = fc.film_id\n     LEFT JOIN sakila.category c ON fc.category_id = c.category_id\n  GROUP BY a.actor_id, a.first_name, a.last_name;\n\n\nVues multi-tables : exemple de vue sur world {smaller}\nCREATE OR REPLACE VIEW country_info AS\n\n  SELECT\n    cn.countrycode, \n    cn.name_country, \n    cn.region,\n    string_agg(DISTINCT ci.name_city::text , ', '::text) AS cities\n\n  FROM world.country cn LEFT JOIN \n       world.city ci \n       ON (cn.countrycode = ci.countrycode)\n\n  GROUP BY cn.countrycode, cn.name_country, cn.region;\nStackoverflow\n\n\nInsertion/Mise à jour/Suppression sur les vues multi-tables\nProblème : quelles tables doivent être modifiées ?\nDELETE \nFROM boucheron.country_info\nWHERE countrycode = 'FRA' ;\n\nsupprimer les lignes de country ?\nsupprimer les lignes de city ?\n\nDatabase abstraction\n\n\nVues matérialisées\nLes vue matérialisées cachent les données récupérées\nCela se produit\n\nlors de la création de la vue et\nlorsque on exécute REFRESH MATERIALIZED VIEW ...\n\n\n\nWhen you mark a view as materialized, it will requery the data only when you issue the REFRESH command. - The upside is that you’re not wasting resources running complex queries repeatedly; - the downside is that you might not have the most up-todate data when you use the view.\n\n\n\nReferences\n\n\nPostgresql Bloggers\n\n\n\n\nFin"
  },
  {
    "objectID": "slides/SQL_4.html#signature-de-la-fonction",
    "href": "slides/SQL_4.html#signature-de-la-fonction",
    "title": "BD V: Fonctions SQL et Vues",
    "section": "Signature de la fonction",
    "text": "Signature de la fonction\nCREATE OR REPLACE FUNCTION \n    &lt;func_name&gt;(&lt;arg1&gt; &lt;arg1_datatype&gt; [DEFAULT &lt;arg1_default&gt;])\n\nRETURNS &lt;some type&gt; | SETOF &lt;some type&gt; | TABLE (..)\nLa signature d’une fonction est formée par - le nom de la fonction - la liste des arguments (nom et type attendu) - le type du résultat retourné par la fonction"
  },
  {
    "objectID": "slides/SQL_4.html#signature-de-la-fonction-suite",
    "href": "slides/SQL_4.html#signature-de-la-fonction-suite",
    "title": "BD V: Fonctions SQL et Vues",
    "section": "Signature de la fonction (suite)",
    "text": "Signature de la fonction (suite)\n\n&lt;arg1_datatype&gt;:\n\ntype prédéfini ou non, voir CREATE TYPE ...\ntype de colonne d’une table : country.countrycode%TYPE\ntype des tuples d’une table : country%ROWTYPE…\n\n&lt;arg1_default&gt;: litéral ou expression\nType du résultat:\n\ntype prédéfini ou non\nSETOF ... (table)\nTable\n\n\n\n\nArguments can have default values, which allow the caller of the function to omit them.\n\n\nOptional arguments must be positioned after nonoptional arguments in the function definition."
  },
  {
    "objectID": "slides/SQL_4.html#types-définis-par-lusager",
    "href": "slides/SQL_4.html#types-définis-par-lusager",
    "title": "BD V: Fonctions SQL et Vues",
    "section": "Types définis par l’usager",
    "text": "Types définis par l’usager\nCREATE TYPE  type_utilisateur AS \n  (&lt;identifiant&gt; &lt;type défini&gt;) \n   [, &lt;identifiant&gt; &lt;type défini&gt;]*\n);\nUsage pour une création de table\nCREATE TABLE &lt;nom de table&gt; OF \n  type_utilisateur\n  (CONSTRAINT &lt;nom de contrainte&gt; PRIMARY KEY  (&lt;nom de colonne&gt;));\nPratique pour créer des tables de même schéma"
  },
  {
    "objectID": "slides/SQL_4.html#section",
    "href": "slides/SQL_4.html#section",
    "title": "BD V: Fonctions SQL et Vues",
    "section": "",
    "text": "quand on crée une table, PostgreSQL crée automatiquement un type associé"
  },
  {
    "objectID": "slides/SQL_4.html#exemple",
    "href": "slides/SQL_4.html#exemple",
    "title": "BD V: Fonctions SQL et Vues",
    "section": "Exemple",
    "text": "Exemple\n\nDéfinition d’un type\n\nCREATE TYPE basic_user AS (user_name varchar(50), pwd varchar(10));\n\nUsage du type défini par usager\n\nCREATE TABLE super_users OF basic_user \n  (CONSTRAINT pk_su PRIMARY KEY  (user_name));"
  },
  {
    "objectID": "slides/SQL_4.html#annotations",
    "href": "slides/SQL_4.html#annotations",
    "title": "BD V: Fonctions SQL et Vues",
    "section": "Annotations",
    "text": "Annotations\nLes définitions de fonctions comportent parfois des qualifications supplémentaires\n\nVOLATILITY: IMMUTABLE, STABLE, VOLATILE (default)\nSECURITY : SECURITY DEFINER, SECURITY INVOKER"
  },
  {
    "objectID": "slides/SQL_4.html#les-fonctions-écrites-en-langage-sql",
    "href": "slides/SQL_4.html#les-fonctions-écrites-en-langage-sql",
    "title": "BD V: Fonctions SQL et Vues",
    "section": "Les fonctions écrites en langage SQL",
    "text": "Les fonctions écrites en langage SQL\nSQL est d’abord un langage permettant d’émettre des requêtes, il peut aussi être utilisé pour écrire des fonctions\nDans PostgreSQL, l’utilisation d’un morceau de SQL existant est facile :\n\nprenez vos instructions SQL existantes (éventuellement plusieurs)\najoutez un en-tête et une conclusion fonctionnels\n\net … vous avez terminé"
  },
  {
    "objectID": "slides/SQL_4.html#les-fonctions-écrites-en-langage-sql-suite",
    "href": "slides/SQL_4.html#les-fonctions-écrites-en-langage-sql-suite",
    "title": "BD V: Fonctions SQL et Vues",
    "section": "Les fonctions écrites en langage SQL (suite)",
    "text": "Les fonctions écrites en langage SQL (suite)\nMais cette facilité a un prix \nVous ne pouvez pas :\n\nutiliser des structures de contrôle (boucles, alternatives) ou des définitions de variables locales\nexécuter des instructions SQL dynamiques que vous assemblez à la volée en utilisant les arguments passés dans la fonction\n\nMais, tout de même\n\nle planificateur de requêtes peut examiner une fonction SQL et en optimiser l’exécution\n\n\n\nSQL functions execute an arbitrary list of SQL statements, returning the result of the last query in the list.\n\n\nIn the simple (non-set) case, the first row of the last query’s result will be returned. Bear in mind that “the first row” of a multirow result is not well-defined unless you use ORDER BY. If the last query happens to return no rows at all, the null value will be returned."
  },
  {
    "objectID": "slides/SQL_4.html#corps-de-la-fonction",
    "href": "slides/SQL_4.html#corps-de-la-fonction",
    "title": "BD V: Fonctions SQL et Vues",
    "section": "Corps de la fonction",
    "text": "Corps de la fonction\n La syntaxe du corps de la fonction dépend du language_of_function\nDans le cas où language_of_function est SQL\n$$\n\nBODY of function\n\n$$"
  },
  {
    "objectID": "slides/SQL_4.html#références-aux-argument",
    "href": "slides/SQL_4.html#références-aux-argument",
    "title": "BD V: Fonctions SQL et Vues",
    "section": "Références aux argument",
    "text": "Références aux argument\nOn peut faire références aux arguments en les nommant dans le corps de la fonction\nSi les arguments ne sont pas nommés, vous faites référence aux arguments par leur position dans la signature : $1, $2, $3, etc\n Si vous nommez les arguments, vous pouvez utiliser la notation\nbig_elephant(name =&gt; 'Wooly', ear_size =&gt; 1.2)\nlors des appels à la fonction"
  },
  {
    "objectID": "slides/SQL_4.html#exemple-1",
    "href": "slides/SQL_4.html#exemple-1",
    "title": "BD V: Fonctions SQL et Vues",
    "section": "Exemple",
    "text": "Exemple\nCREATE OR REPLACE FUNCTION \n  write_to_log(param_user_name varchar,\n               param_description text)\nRETURNS integer AS\n$$\nINSERT INTO logs\n   (user_name, description) \n   VALUES($1, $2)\nRETURNING log_id;\n$$\nLANGUAGE 'sql' VOLATILE;\n\nInvocation\nSELECT write_to_log('alex', \n    'Logged in at 11:59 AM.') AS new_id;\n\nLes fonctions SQL peuvent retourner des ensembles\nTrois manières de faire:\n\nANSI SQL standard: RETURNS TABLE\nspécifier des paramètres OUT et retourner SETOF RECORD\ntypes de données composés SETOF ..."
  },
  {
    "objectID": "slides/SQL_4.html#exemple-de-fonction-retournant-un-type-simple",
    "href": "slides/SQL_4.html#exemple-de-fonction-retournant-un-type-simple",
    "title": "BD V: Fonctions SQL et Vues",
    "section": "Exemple de fonction retournant un type simple",
    "text": "Exemple de fonction retournant un type simple\nDans le schéma world, on veut écrire une fonction qui prend en argument une région et renvoie la population maximale parmi les capitales de la région\nCREATE OR REPLACE FUNCTION username.taille_max_capitale_region(p_region text)\nRETURNS INTEGER \nLANGUAGE SQL AS\n$$\nSELECT MAX(population_city) AS max_pop\nFROM world.country c JOIN world.city cc ON (c.capital=cc.id)\nWHERE c.region=p_region AND cc.population_city IS NOT NULL;\n$$ ;"
  },
  {
    "objectID": "slides/SQL_4.html#fonctions-qui-retournent-un-type-composé-défini-par-les-lignes-dune-table",
    "href": "slides/SQL_4.html#fonctions-qui-retournent-un-type-composé-défini-par-les-lignes-dune-table",
    "title": "BD V: Fonctions SQL et Vues",
    "section": "Fonctions qui retournent un type composé défini par les lignes d’une table",
    "text": "Fonctions qui retournent un type composé défini par les lignes d’une table\nDans le schéma world, on veut écrire une fonction qui prend en argument une région et renvoie la description de la capitale la plus peuplée de cette région\nOn se contente de nommer la table pour indiquer que le résultat doit avoir même structure qu’une ligne de la table\n  CREATE OR REPLACE FUNCTION username.capitale(p_region text)\n  RETURNS world.city  \n  LANGUAGE SQL AS\n  $$\n  WITH r AS(\n    SELECT cc.*, RANK() OVER (PARTITION BY c.region ORDER BY cc.population_city DESC) AS rnk\n    FROM world.country c JOIN world.city cc ON (c.capital=cc.id)\n    WHERE c.region=p_region)\n  SELECT r.id, r.name_city, r.countrycode, r.district, r.population_city\n  FROM r \n  WHERE r.rnk = 1 ;\n  $$ ;"
  },
  {
    "objectID": "slides/SQL_4.html#fonctions-qui-retournent-une-table",
    "href": "slides/SQL_4.html#fonctions-qui-retournent-une-table",
    "title": "BD V: Fonctions SQL et Vues",
    "section": "Fonctions qui retournent une table",
    "text": "Fonctions qui retournent une table\nDans le schéma world, on veut écrire une fonction qui prend en argument une région et renvoie la table des capitales de la région"
  },
  {
    "objectID": "slides/SQL_4.html#table-de-schéma-explicite",
    "href": "slides/SQL_4.html#table-de-schéma-explicite",
    "title": "BD V: Fonctions SQL et Vues",
    "section": "Table de schéma explicite",
    "text": "Table de schéma explicite\nOn se contente d’abord de renvoyer le nom de la capitale.\nOn explicite le schéma de la table résultat\nCREATE OR REPLACE FUNCTION username.capitales_region(p_region text)\nRETURNS TABLE (name_capital text) \nLANGUAGE SQL AS\n$$\nSELECT cc.name_city \nFROM world.country c JOIN world.city cc ON (c.capital=cc.id)\nWHERE c.region=p_region ;\n$$ ;"
  },
  {
    "objectID": "slides/SQL_4.html#table-de-même-schéma-quune-autre-table",
    "href": "slides/SQL_4.html#table-de-même-schéma-quune-autre-table",
    "title": "BD V: Fonctions SQL et Vues",
    "section": "Table de même schéma qu’une autre table",
    "text": "Table de même schéma qu’une autre table\nhttps://www.postgresql.org/docs/15/xfunc-sql.html\nOn veut maintenant récupérer une table de même schéma que city.\nLa solution est très simple.\nOn profite de ce qu’à chaque table correspond un type de même nom et on utilise le mot-clé SETOF.\nCREATE OR REPLACE FUNCTION username.capitales_region_large(p_region text)\nRETURNS SETOF world.city  \nLANGUAGE SQL AS\n$$\nSELECT cc.* \nFROM world.country c JOIN world.city cc ON (c.capital=cc.id)\nWHERE c.region=p_region ;\n$$ ;"
  },
  {
    "objectID": "slides/SQL_4.html#autres-langages",
    "href": "slides/SQL_4.html#autres-langages",
    "title": "BD V: Fonctions SQL et Vues",
    "section": "Autres langages",
    "text": "Autres langages\n\nPL/pgSQL\nC\nPL/Python\nPL/R\n…"
  },
  {
    "objectID": "slides/SQL_4.html#fonction-reprise-depuis-sakila",
    "href": "slides/SQL_4.html#fonction-reprise-depuis-sakila",
    "title": "BD V: Fonctions SQL et Vues",
    "section": "Fonction reprise depuis sakila",
    "text": "Fonction reprise depuis sakila\nCREATE OR REPLACE FUNCTION user.inventory_held_by_customer(\n    p_inventory_id integer,\n    OUT customer_id int2) AS \n$$\n  SELECT customer_id \n  FROM sakila.rental\n  WHERE return_date IS NULL AND inventory_id = p_inventory_id ;\n$$ LANGUAGE 'sql' ;"
  },
  {
    "objectID": "slides/SQL_4.html#fonctions-de-sakila",
    "href": "slides/SQL_4.html#fonctions-de-sakila",
    "title": "BD V: Fonctions SQL et Vues",
    "section": "Fonctions de sakila",
    "text": "Fonctions de sakila\nCREATE OR REPLACE FUNCTION uname.film_in_stock(\n  p_film_id integer, \n  p_store_id integer, \n  OUT p_film_count integer)\n RETURNS SETOF integer\nAS $$\n     SELECT inventory_id\n     FROM sakila.inventory\n     WHERE film_id = $1\n     AND store_id = $2\n     AND sakila.inventory_in_stock(inventory_id);\n$$ LANGUAGE sql ;"
  },
  {
    "objectID": "slides/SQL_4.html#invocation",
    "href": "slides/SQL_4.html#invocation",
    "title": "BD V: Fonctions SQL et Vues",
    "section": "Invocation",
    "text": "Invocation\nSELECT * \nFROM sakila.film_in_stock(12, 1) ;\n\n\n\np_film_count\n\n\n\n\n60\n\n\n61\n\n\n62"
  },
  {
    "objectID": "slides/SQL_4.html#motivation",
    "href": "slides/SQL_4.html#motivation",
    "title": "BD V: Fonctions SQL et Vues",
    "section": "Motivation",
    "text": "Motivation\nSi vous vous retrouvez à écrire tous les jours la même requête, créer une vue\nUne vue n’est rien d’autre qu’une requête stockée de façon persistante"
  },
  {
    "objectID": "slides/SQL_4.html#vues-sur-une-seule-table",
    "href": "slides/SQL_4.html#vues-sur-une-seule-table",
    "title": "BD V: Fonctions SQL et Vues",
    "section": "Vues sur une seule table",
    "text": "Vues sur une seule table\nCREATE OR REPLACE VIEW co_asia AS\nSELECT * \nFROM world.country \nWHERE continent = 'Asia' ;"
  },
  {
    "objectID": "slides/SQL_4.html#interroger-une-vue",
    "href": "slides/SQL_4.html#interroger-une-vue",
    "title": "BD V: Fonctions SQL et Vues",
    "section": "Interroger une vue",
    "text": "Interroger une vue\nUne vue s’interroge comme une table :\nSELECT region, sum(population_country) AS pop \nFROM co_asia \nGROUP BY region \nORDER BY pop DESC ;\nregion                   |pop       |\n-------------------------+----------+\nEastern Asia             |1507328000|\nSouthern and Central Asia|1490776000|\nSoutheast Asia           | 518541000|\nMiddle East              | 188380700|"
  },
  {
    "objectID": "slides/SQL_4.html#vues-et-manipulation-de-données",
    "href": "slides/SQL_4.html#vues-et-manipulation-de-données",
    "title": "BD V: Fonctions SQL et Vues",
    "section": "Vues et manipulation de données",
    "text": "Vues et manipulation de données\nSi\n\nla vue (VIEW) provient d’une table unique\nla vue contient la clé primaire de la table d’origine\n\nAlors\non peut modifier la table au travers de la vue. On peut\n\ninsérer\nsupprimer\nmettre à jour\n\nExemple\n\nLa vue co_asia provient d’une unique table : world.country\nLa vue co_asia contient la clé primaire countrycode de la table world.country"
  },
  {
    "objectID": "slides/SQL_4.html#section-1",
    "href": "slides/SQL_4.html#section-1",
    "title": "BD V: Fonctions SQL et Vues",
    "section": "",
    "text": "Cette instruction :\nUPDATE co_asia\n\nSET continent='Antarctica';\n… est légale\n–\nMais, après exécution :\n\nla vue co_asia est vide \nles pays d’Asie de country sont délocalisés en Antarctique"
  },
  {
    "objectID": "slides/SQL_4.html#pour-éviter-ca-with-check-option",
    "href": "slides/SQL_4.html#pour-éviter-ca-with-check-option",
    "title": "BD V: Fonctions SQL et Vues",
    "section": "Pour éviter ca : WITH CHECK OPTION",
    "text": "Pour éviter ca : WITH CHECK OPTION\nCREATE OR REPLACE VIEW boucheron.co_asia AS\n\nSELECT * \nFROM world.country \nWHERE continent = 'Asia' \n\nWITH CHECK OPTION ;\nAjouter cette modification lors de la création de la vue et PostgreSQL s’opposera à une tentative d’insertion hors de la vue ou à une tentative de mise à jour qui placerait des tuples hors de la vue"
  },
  {
    "objectID": "slides/SQL_4.html#smaller",
    "href": "slides/SQL_4.html#smaller",
    "title": "BD V: Fonctions SQL et Vues",
    "section": "{smaller}",
    "text": "{smaller}\nCREATE OR REPLACE VIEW sakila.actor_info\nAS SELECT a.actor_id,\n    a.first_name,\n    a.last_name,\n    sakila.group_concat(DISTINCT (c.name::text || ': '::text) || \n        (( SELECT sakila.group_concat(f.title::text) AS group_concat\n           FROM sakila.film f\n             JOIN sakila.film_category fc_1 ON f.film_id = fc_1.film_id\n             JOIN sakila.film_actor fa_1 ON f.film_id = fa_1.film_id\n          WHERE fc_1.category_id = c.category_id AND fa_1.actor_id = a.actor_id\n          GROUP BY fa_1.actor_id))\n        ) AS film_info\n   FROM sakila.actor a\n     LEFT JOIN sakila.film_actor fa ON a.actor_id = fa.actor_id\n     LEFT JOIN sakila.film_category fc ON fa.film_id = fc.film_id\n     LEFT JOIN sakila.category c ON fc.category_id = c.category_id\n  GROUP BY a.actor_id, a.first_name, a.last_name;"
  },
  {
    "objectID": "slides/SQL_4.html#vues-multi-tables-exemple-de-vue-sur-world-smaller",
    "href": "slides/SQL_4.html#vues-multi-tables-exemple-de-vue-sur-world-smaller",
    "title": "BD V: Fonctions SQL et Vues",
    "section": "Vues multi-tables : exemple de vue sur world {smaller}",
    "text": "Vues multi-tables : exemple de vue sur world {smaller}\nCREATE OR REPLACE VIEW country_info AS\n\n  SELECT\n    cn.countrycode, \n    cn.name_country, \n    cn.region,\n    string_agg(DISTINCT ci.name_city::text , ', '::text) AS cities\n\n  FROM world.country cn LEFT JOIN \n       world.city ci \n       ON (cn.countrycode = ci.countrycode)\n\n  GROUP BY cn.countrycode, cn.name_country, cn.region;\nStackoverflow"
  },
  {
    "objectID": "slides/SQL_4.html#insertionmise-à-joursuppression-sur-les-vues-multi-tables",
    "href": "slides/SQL_4.html#insertionmise-à-joursuppression-sur-les-vues-multi-tables",
    "title": "BD V: Fonctions SQL et Vues",
    "section": "Insertion/Mise à jour/Suppression sur les vues multi-tables",
    "text": "Insertion/Mise à jour/Suppression sur les vues multi-tables\nProblème : quelles tables doivent être modifiées ?\nDELETE \nFROM boucheron.country_info\nWHERE countrycode = 'FRA' ;\n\nsupprimer les lignes de country ?\nsupprimer les lignes de city ?\n\nDatabase abstraction"
  },
  {
    "objectID": "slides/SQL_4.html#vues-matérialisées",
    "href": "slides/SQL_4.html#vues-matérialisées",
    "title": "BD V: Fonctions SQL et Vues",
    "section": "Vues matérialisées",
    "text": "Vues matérialisées\nLes vue matérialisées cachent les données récupérées\nCela se produit\n\nlors de la création de la vue et\nlorsque on exécute REFRESH MATERIALIZED VIEW ...\n\n\n\nWhen you mark a view as materialized, it will requery the data only when you issue the REFRESH command. - The upside is that you’re not wasting resources running complex queries repeatedly; - the downside is that you might not have the most up-todate data when you use the view."
  },
  {
    "objectID": "slides/SQL_3.html#fonctions-dagrégation-en-sql-1",
    "href": "slides/SQL_3.html#fonctions-dagrégation-en-sql-1",
    "title": "BD IV: SQL III",
    "section": " Fonctions d’agrégation en SQL",
    "text": "Fonctions d’agrégation en SQL\n\nPossibilité de compter, de faire des moyennes, de trouver un maximum, … en SQL (contrairement à l’algèbre relationnelle “classique”)\nPossibilité de partitionner les données"
  },
  {
    "objectID": "slides/SQL_3.html#usages",
    "href": "slides/SQL_3.html#usages",
    "title": "BD IV: SQL III",
    "section": "Usages",
    "text": "Usages\n\nAnalyse commerciale ou Buisiness Analytics,\nStatistique et Data Science"
  },
  {
    "objectID": "slides/SQL_3.html#dans-la-partie-select",
    "href": "slides/SQL_3.html#dans-la-partie-select",
    "title": "BD IV: SQL III",
    "section": "Dans la partie SELECT",
    "text": "Dans la partie SELECT\n\nSomme des valeurs prises par nomattribut\n\nSUM (DISTINCT|ALL &lt;nomattribut&gt;)  \n\n\nMoyenne des valeurs prises par nomattribut\n\nAVG (DISTINCT|ALL &lt;nom_attribut&gt;) \n\n\n Le type des attributs doit être un nombre ou un entier (sinon, impossible de faire des sommes…)."
  },
  {
    "objectID": "slides/SQL_3.html#fonctions-dagrégation-sum-et-avg",
    "href": "slides/SQL_3.html#fonctions-dagrégation-sum-et-avg",
    "title": "BD IV: SQL III",
    "section": "Fonctions d’agrégation : SUM et AVG",
    "text": "Fonctions d’agrégation : SUM et AVG\n\nLe nombre de pièces ‘x21’ livrées.\n\nSELECT SUM (ALL Quantite)  \nFROM Livraison \nWHERE NomP = 'x21';\n\nPrix moyen des pièces livrées par la socié FastDelivery\n\nSELECT AVG (ALL Prix)    \nFROM Livraison L, Piece P \nWHERE L.NomP=P.NomP AND L.NomF = 'FastDelivery';"
  },
  {
    "objectID": "slides/SQL_3.html#fonctions-de-calcul-max-min",
    "href": "slides/SQL_3.html#fonctions-de-calcul-max-min",
    "title": "BD IV: SQL III",
    "section": "Fonctions de calcul : MAX, MIN",
    "text": "Fonctions de calcul : MAX, MIN\nMAX (&lt;nomattribut&gt;)  \nmaximum des valeurs prises par &lt;nomattribut&gt;\n\nMIN (&lt;nomattribut&gt;)  \nminimum des valeurs prises par &lt;nomattribut&gt;\nAttention aux valeurs nulles !\n\n\nQuantité maximale livrée de pièce ‘x21’ lors d’une commande.\nSELECT MAX (Quantite)   \nFROM Livraison \nWHERE NomP = 'x21';"
  },
  {
    "objectID": "slides/SQL_3.html#fonctions-de-calcul-count",
    "href": "slides/SQL_3.html#fonctions-de-calcul-count",
    "title": "BD IV: SQL III",
    "section": "Fonctions de calcul : COUNT",
    "text": "Fonctions de calcul : COUNT\nOn peut aussi compter le nombre de tuples dans un résultat\nCOUNT(* |[ ALL | DISTINCT &lt;nomattribut&gt;])  \nNombre de valeurs prises par le résultat\n\n\nDISTINCT : sans les doublons\nALL: avec les doublons\n* : y compris les valeurs nullles/manquantes\n\nNombre de livraisons de la pièce ’x21\nSELECT COUNT(*)  \nFROM Livraison\nWHERE NomP = 'x21';"
  },
  {
    "objectID": "slides/SQL_3.html#fonctions-de-calcul-exemples",
    "href": "slides/SQL_3.html#fonctions-de-calcul-exemples",
    "title": "BD IV: SQL III",
    "section": "Fonctions de calcul : exemples",
    "text": "Fonctions de calcul : exemples\nExemple de combinaison de quelques opérations et fonctions\nNom des fournisseurs ayant effectué plus de \\(10\\) livraisons.\nSELECT F.NomF \nFROM Fournisseur F \nWHERE (SELECT Count (*)     \n          FROM Livraison L     \n          WHERE F.NomF = L.NomF) &gt;= 10;"
  },
  {
    "objectID": "slides/SQL_3.html#musée-des-horreurs-smaller",
    "href": "slides/SQL_3.html#musée-des-horreurs-smaller",
    "title": "BD IV: SQL III",
    "section": "Musée des horreurs {smaller}",
    "text": "Musée des horreurs {smaller}\nSELECT DISTINCT continent, region\nFROM country c \nWHERE (SELECT MIN(d.lifeexpectancy)     \n       FROM country d    \n       WHERE c.region=d.region) &lt; 50    \nORDER BY continent, region;\n\n\n\nContinent\nRegion\n\n\n\n\nAfrica\nCentral Africa\n\n\nAfrica\nEastern Africa\n\n\nAfrica\nNorthern Africa\n\n\nAfrica\nSouthern Africa\n\n\nAfrica\nWestern Africa\n\n\nAsia\nSoutheast Asia\n\n\nAsia\nSouthern and Central Asia\n\n\nNorth America\nCaribbean"
  },
  {
    "objectID": "slides/SQL_3.html#fonctions-de-calcul-exemples-1",
    "href": "slides/SQL_3.html#fonctions-de-calcul-exemples-1",
    "title": "BD IV: SQL III",
    "section": "Fonctions de calcul : exemples",
    "text": "Fonctions de calcul : exemples\nUtilisation d’opérateur arithmétique entre les différents attributs d’un même tuple…\nPrix de revient des commandes livrées par le fournisseur FD\nSELECT L.NomP, P.Prix*L.Quantite \nFROM Livraison F, Piece P \nWHERE P.NomP=L.NomP AND L.NomF='FD';"
  },
  {
    "objectID": "slides/SQL_3.html#partition-de-résultats-de-requêtes",
    "href": "slides/SQL_3.html#partition-de-résultats-de-requêtes",
    "title": "BD IV: SQL III",
    "section": "Partition de résultats de requêtes",
    "text": "Partition de résultats de requêtes\nGROUP BY &lt;nomattribut1&gt;, ..., &lt;nomattributn&gt;\n\nGROUP BY permet de regrouper selon la valeur de certains attributs l’ensemble des résults d’une requête\nForme des sous-relations auxquelles on peut appliquer des opérateurs (SUM, MAX, …) renvoyant un résultat par sous-relation\n\nExemple d’utilisation : regrouper les livraisons par numéro de fournisseur et prendre la quantité maximum livrée par fournisseur."
  },
  {
    "objectID": "slides/SQL_3.html#partition-de-résultats-de-requêtes-1",
    "href": "slides/SQL_3.html#partition-de-résultats-de-requêtes-1",
    "title": "BD IV: SQL III",
    "section": "Partition de résultats de requêtes",
    "text": "Partition de résultats de requêtes\nSchéma général\nSELECT .....  \nFROM Livraison \nGROUP BY NomF    \n\n\n\n\nNomF\nNomP\nNumLiv\nQuantite\nDateLiv\n\n\n\n\n\n\n\n\n\n\n\n1\nx21\n1\n20\n15/02/10\n\n\n1\na32\n2\n3\n16/02/10\n\n\n1\nx21\n3\n5\n15/01/10\n\n\n\n\n\n\n\n\n\n2\nb27\n4\n8\n01/02/12\n\n\n2\nc31\n5\n9\n17/09/11\n\n\n\n\n\n\n\n\n\n3\nx 21\n6\n17\n15/03/10"
  },
  {
    "objectID": "slides/SQL_3.html#partition-de-résultats-de-requêtes-2",
    "href": "slides/SQL_3.html#partition-de-résultats-de-requêtes-2",
    "title": "BD IV: SQL III",
    "section": "Partition de résultats de requêtes",
    "text": "Partition de résultats de requêtes\nQuantité maximale livrée par chaque fournisseur\nSELECT NomF, MAX(Quantite) \nFROM Livraison \nGROUP BY NomF;\nLivraison\n\n\n\nNomF\nNomP\nNumL\nQuantite\nDateLiv\n\n\n\n\n1\nx21\n1\n20\n15/02/10\n\n\n1-2\nc31\n5\n9\n17/09/11\n\n\n1\nx21\n6\n17\n15/03/10\n\n\n\nLes opérateurs (MAX, SUM, etc) s’appliquent à chaque groupe de relations."
  },
  {
    "objectID": "slides/SQL_3.html#exemple-smaller",
    "href": "slides/SQL_3.html#exemple-smaller",
    "title": "BD IV: SQL III",
    "section": "Exemple {smaller}",
    "text": "Exemple {smaller}\nDans le schéma world, quel est le gnp moyen par region sur le continent Europe ?\nSELECT region, \n       ROUND(1000 * SUM(gnp)/SUM(population_country),2) AS avg_gnp,  \n       ROUND(MAX(1000* gnp/population_country),2) AS max_gnp, \n       ROUND(MIN(1000* gnp/population_country),2) AS min_gnp,\n       MIN(lifeexpectancy) AS min_life_exp\nFROM country \nWHERE continent = 'Europe' \nGROUP BY region \nORDER BY avg_gnp DESC;\n\n\n\n\n\n\n\n\n\n\nregion\navg_gnp\nmax_gnp\nmin_gnp\nmin_life_exp\n\n\n\n\nNordic Countries\n28.00\n32.66\n0.00\n76.5\n\n\nWestern Europe\n25.50\n37.46\n22.82\n77.1\n\n\nBritish Islands\n22.94\n23.12\n20.11\n76.8\n\n\nSouthern Europe\n13.91\n20.90\n0.72\n71.5\n\n\nBaltic Countries\n2.96\n3.70\n2.64\n68.4\n\n\nEastern Europe\n2.15\n5.35\n0.36\n64.5"
  },
  {
    "objectID": "slides/SQL_3.html#partition-de-résultats-de-requêtes-3",
    "href": "slides/SQL_3.html#partition-de-résultats-de-requêtes-3",
    "title": "BD IV: SQL III",
    "section": "Partition de résultats de requêtes",
    "text": "Partition de résultats de requêtes\nQuel est le sens de cette requête ?\nSELECT NomP, COUNT(*), SUM(Quantite) \nFROM Livraison \nGROUP BY NomP;\n\n\nCette requête n’est pas correcte \nSELECT NomF, NomP, MAX(Quantite) \nFROM Livraison \nGROUP BY NomF;\n\n\nLes attributs présents dans le SELECT sont forcémment présents dans le GROUP BY."
  },
  {
    "objectID": "slides/SQL_3.html#partition-de-résultats-de-requêtes-4",
    "href": "slides/SQL_3.html#partition-de-résultats-de-requêtes-4",
    "title": "BD IV: SQL III",
    "section": "Partition de résultats de requêtes",
    "text": "Partition de résultats de requêtes\n\nLa clause HAVING permet de poser une condition portant sur chacune des sous-relations générées par le GROUP BY\nLes sous-relations ne vérifiant pas la condition sont écartées du résultat.\n\nListe des fournisseurs qui ont effectué plus de 3 livraisons.\nSELECT NomF \nFROM Livraison \nGROUP BY NomF    \nHAVING COUNT(*) &gt;= 3;"
  },
  {
    "objectID": "slides/SQL_3.html#présentationtri-de-résultats",
    "href": "slides/SQL_3.html#présentationtri-de-résultats",
    "title": "BD IV: SQL III",
    "section": "Présentation/tri de résultats",
    "text": "Présentation/tri de résultats\n\nLa clause ORDER BY permet de trier le résultat de la requête, en fournissant la liste des attributs sur lesquels effectuer le tri et en spécifiant le sens du tri (ascendan ou descendant)\n\nListe des salariés triée par ordre décroissant salaire\nSELECT * \nFROM Employe \nORDER BY Salaire DESC;"
  },
  {
    "objectID": "slides/SQL_3.html#regroupement-tri-etc-exemple",
    "href": "slides/SQL_3.html#regroupement-tri-etc-exemple",
    "title": "BD IV: SQL III",
    "section": "Regroupement, tri, etc : exemple",
    "text": "Regroupement, tri, etc : exemple\nQue fait cette requête ?\nSELECT Fonction, COUNT(*) \nFROM Employe \nWHERE NumDep IN (\n  SELECT NumDep \n  FROM Departement \n  WHERE NomDept='Financier') \nGROUP BY Fonction \nHAVING AVG(Salaire) &gt;= 10000 \nORDER BY Fonction;\nSur les relations d’une base employé (tables Departement,Employe, …)"
  },
  {
    "objectID": "slides/SQL_3.html#retour-au-musée-des-horreurs",
    "href": "slides/SQL_3.html#retour-au-musée-des-horreurs",
    "title": "BD IV: SQL III",
    "section": "Retour au musée des horreurs",
    "text": "Retour au musée des horreurs\nSELECT continent, region, MIN(c.lifeexpectancy)\nFROM country c \nGROUP BY continent, region\nHAVING MIN(c.lifeexpectancy) &lt; 50  \nORDER BY continent, region ;   \n\n\n\nContinent\nRegion\nmax\nmin\n\n\n\n\nAfrica\nCentral Africa\n65.3\n38.3\n\n\nAfrica\nEastern Africa\n72.7\n37.2\n\n\nAfrica\nNorthern Africa\n75.5\n49.8\n\n\nAfrica\nSouthern Africa\n51.1\n39.3\n\n\nAfrica\nWestern Africa\n76.8\n41.3\n\n\nAsia\nSoutheast Asia\n80.1\n46.0\n\n\nAsia\nSouthern and Central Asia\n71.8\n45.9\n\n\nNorth America\nCaribbean\n78.9\n49.2"
  },
  {
    "objectID": "slides/SQL_3.html#exemple-daggrégation",
    "href": "slides/SQL_3.html#exemple-daggrégation",
    "title": "BD IV: SQL III",
    "section": "Exemple d’aggrégation",
    "text": "Exemple d’aggrégation\nDans le schéma world,"
  },
  {
    "objectID": "slides/SQL_3.html#exemple",
    "href": "slides/SQL_3.html#exemple",
    "title": "BD IV: SQL III",
    "section": "Exemple",
    "text": "Exemple\nDans le schéma world, présenter pour chaque pays dont la région comprend le motif Countries, l’espérance de vie, l’espérance de vie maximale et minimale dans la région.\nSELECT region, name_country, lifeexpectancy, \n       min(lifeexpectancy) OVER (PARTITION BY region),  \n       max(lifeexpectancy) OVER (PARTITION BY region)   \nFROM country \nWHERE region LIKE '%Countries'\nORDER BY region, lifeexpectancy  \nLIMIT 6 ;\n\n\n\nRegion\nName of country\nLife expectancy\nmin\nmax\n\n\n\n\nBaltic Countries\nLatvia\n68.4\n68.4\n69.5\n\n\nBaltic Countries\nLithuania\n69.1\n68.4\n69.5\n\n\nBaltic Countries\nEstonia\n69.5\n68.4\n69.5\n\n\nNordic Countries\nDenmark\n76.5\n76.5\n79.6\n\n\nNordic Countries\nFinland\n77.4\n76.5\n79.6\n\n\nNordic Countries\nFaroe Islands\n78.4\n76.5\n79.6"
  },
  {
    "objectID": "slides/SQL_3.html#calculer-une-fonction-fenêtre-sans-invoquer-over-...",
    "href": "slides/SQL_3.html#calculer-une-fonction-fenêtre-sans-invoquer-over-...",
    "title": "BD IV: SQL III",
    "section": "Calculer une fonction fenêtre sans invoquer OVER (...)",
    "text": "Calculer une fonction fenêtre sans invoquer OVER (...)\nPour calculer ce résultat sans fonctions fenêtres, on effectue une partition selon la region, une aggrégation par groupe pour calculer min(lifeexpectancy) et max(lifeexpectancy) On obtient une table à trois colonnes region, min, max\nEnfin, on calcule une (équi)-jointure avec la table country originelle sur la colonne commune region\nOn projette le résultat sur les cinq colonnes pertinentes.\n\n\n\nRegion\nName of country\nLife expectancy\nmin\nmax\n\n\n\n\nBaltic Countries\nLatvia\n68.4\n68.4\n69.5\n\n\nBaltic Countries\nLithuania\n69.1\n68.4\n69.5\n\n\nBaltic Countries\nEstonia\n69.5\n68.4\n69.5\n\n\nNordic Countries\nDenmark\n76.5\n76.5\n79.6\n\n\nNordic Countries\nFinland\n77.4\n76.5\n79.6\n\n\nNordic Countries\nFaroe Islands\n78.4\n76.5\n79.6"
  },
  {
    "objectID": "slides/SQL_3.html#variations",
    "href": "slides/SQL_3.html#variations",
    "title": "BD IV: SQL III",
    "section": "Variations",
    "text": "Variations\nSELECT region, name_country, lifeexpectancy, \n       rank() OVER (PARTITION BY region   \n                    ORDER BY lifeexpectancy DESC)  \nFROM country \nWHERE region LIKE '%Countries'\nORDER BY region, lifeexpectancy DESC \nLIMIT 6 ;\n\n\n\nRegion\nName of country\nlife expectancy\nrank\n\n\n\n\nBaltic Countries\nEstonia\n69.5\n1\n\n\nBaltic Countries\nLithuania\n69.1\n2\n\n\nBaltic Countries\nLatvia\n68.4\n3\n\n\nNordic Countries\nSvalbard and Jan Mayen\n\n1\n\n\nNordic Countries\nSweden\n79.6\n2\n\n\nNordic Countries\nIceland\n79.4\n3"
  },
  {
    "objectID": "slides/SQL_3.html#sommes-cumulées-par-groupes-selon-un-ordre",
    "href": "slides/SQL_3.html#sommes-cumulées-par-groupes-selon-un-ordre",
    "title": "BD IV: SQL III",
    "section": "Sommes cumulées par groupes selon un ordre",
    "text": "Sommes cumulées par groupes selon un ordre\nSELECT \n    region, name_country , \n    sum(gnp) OVER (PARTITION BY region  \n                   ORDER BY gnp)     \nFROM country c \nWHERE region LIKE '%Europe' \nLIMIT 6;\n\n\n\nRegion\nName Country\nSum\n\n\n\n\nEastern Europe\nMoldova\n1579.00\n\n\nEastern Europe\nBulgaria\n13757.00\n\n\nEastern Europe\nBelarus\n27471.00\n\n\nEastern Europe\nSlovakia\n48065.00\n\n\nEastern Europe\nRomania\n86223.00\n\n\nEastern Europe\nUkraine\n128391.00"
  },
  {
    "objectID": "slides/SQL_3.html#exemple-1",
    "href": "slides/SQL_3.html#exemple-1",
    "title": "BD IV: SQL III",
    "section": "Exemple",
    "text": "Exemple\nPour chaque continent, afficher les trois pays ayant l’espérance de vie à la naissance la plus élevée\n\nSELECT continent, \n       name_country, \n       lifeexpectancy, \n       pos\nFROM\n  (SELECT continent, \n          name_country, \n          lifeexpectancy,\n          rank() OVER (PARTITION BY continent \n                       ORDER BY lifeexpectancy DESC) AS pos\n     FROM country\n     WHERE lifeexpectancy IS NOT NULL\n  ) AS ws\nWHERE pos &lt;= 3;"
  },
  {
    "objectID": "slides/SQL_3.html#avec-with-...-et-les-ctes",
    "href": "slides/SQL_3.html#avec-with-...-et-les-ctes",
    "title": "BD IV: SQL III",
    "section": "Avec WITH ... et les CTEs",
    "text": "Avec WITH ... et les CTEs\nWITH ws AS (\n  SELECT continent, \n         name_country, \n         lifeexpectancy,\n         rank() OVER (PARTITION BY continent \n                      ORDER BY lifeexpectancy DESC) AS pos\n     FROM country\n     WHERE lifeexpectancy IS NOT NULL\n) \nSELECT continent, \n       name_country, \n       lifeexpectancy, \n       pos\nFROM ws   \nWHERE pos &lt;= 3;"
  },
  {
    "objectID": "slides/SQL_3.html#exemple-smaller-1",
    "href": "slides/SQL_3.html#exemple-smaller-1",
    "title": "BD IV: SQL III",
    "section": "Exemple {smaller}",
    "text": "Exemple {smaller}\nAfficher le pays le plus peuplé\n\n\n\nSELECT S.name_country, \n       S.continent, \n       S.population_country\nFROM (\n  SELECT max(population_country) AS mpc \n  FROM country c) AS R \n    JOIN LATERAL  (    \n    SELECT * \n    FROM country c2 \n    WHERE c2.population_country &gt;= R.mpc) AS S \n    ON (TRUE);\n\nSELECT c.name_country, \n       c.continent, \n       c.population_country\nFROM (\n    SELECT max(population_country) AS mpc \n    FROM country c2) AS S\n  JOIN country c \n  ON (c.population_country &gt;= S.mpc)    \n;\n::::: name_country|continent|population_country|\n------------+---------+------------------+\nChina       |Asia     |        1277558000|\nExemple (suite) {smaller}\nAfficher le pays le plus peuplé\n\n\nSELECT * \nFROM world.country c  \nWHERE population_country &gt;= ALL(\n  SELECT cc.population_country  \n  FROM world.country  cc\n) ;     \n\nWITH S AS (        \n    SELECT c.*, max(population_country) \n         OVER () AS mpc  \n    FROM world.country c\n)\nSELECT * \nFROM S   \nWHERE population_country &gt;= mpc ;\n::::: name_country|continent|population_country|\n------------+---------+------------------+\nChina       |Asia     |        1277558000|\nExemple {smaller}\nAfficher les 10 pays les plus peuplés\n\nWITH S AS (        \n    SELECT c.*, rank() \n         OVER (ORDER BY population_country DESC) AS rpc  \n    FROM world.country c\n)\nSELECT name_country, continent, population_country\nFROM S   \nWHERE rpc &lt;= 10 \nORDER BY rpc DESC;\n\n\nname_country      |continent    |population_country|\n------------------+-------------+------------------+\nChina             |Asia         |        1277558000|\nIndia             |Asia         |        1013662000|\nUnited States     |North America|         278357000|\nIndonesia         |Asia         |         212107000|\nBrazil            |South America|         170115000|\nPakistan          |Asia         |         156483000|\nRussian Federation|Europe       |         146934000|\nBangladesh        |Asia         |         129155000|\nJapan             |Asia         |         126714000|\nNigeria           |Africa       |         111506000|\n\n\nGroupements avancés\n\nIntroduits dans SQL avec la mode du Data mining (Fouille de données) dans les années 1990\nPermet de réaliser de facon apparemment simultanée des aggrégations de régularités emboîtées\nDans le monde des statistiques, lorsqu’on aggrège des comptages de grains différents, on parle de tables de contingences (contingency tables).\n\n\n\nROLLUP {smaller}\nSELECT continent, region, max(lifeexpectancy)\nFROM country c \nWHERE continent LIKE '%America'\nGROUP BY ROLLUP  (continent, region)  \nORDER BY continent, region ;\n\n\n\nContinent\nRegion\nmax\n\n\n\n\nNorth America\nCaribbean\n78.9\n\n\nNorth America\nCentral America\n75.8\n\n\nNorth America\nNorth America\n79.4\n\n\nNorth America\n\n79.4\n\n\nSouth America\nSouth America\n76.1\n\n\nSouth America\n\n76.1\n\n\n\n\n79.4\n\n\n\n\n\nGROUPING SETS\nSELECT c1, c2, aggregate_function(c3)\nFROM table_name\nGROUP BY GROUPING SETS ((c1, c2), (c1), (c2), ());   \n ROLLUP and CUBE are special cases of GROUPING SETS\n\n\nGROUPING SETS (suite) {smaller}\nSELECT continent, region, max(lifeexpectancy)\nFROM country c \nWHERE continent LIKE '%America'\nGROUP BY GROUPING SETS  ((continent, region), (continent), ())  \nORDER BY continent, region ;\n\n\n\nContinent\nRegion\nmax\n\n\n\n\nNorth America\nCaribbean\n78.9\n\n\nNorth America\nCentral America\n75.8\n\n\nNorth America\nNorth America\n79.4\n\n\nNorth America\n\n79.4\n\n\nSouth America\nSouth America\n76.1\n\n\nSouth America\n\n76.1\n\n\n\n\n79.4\n\n\n\n\n\nCUBE\nSELECT c1, c2, c3,\n    aggregate (c4) \nFROM table_name\nGROUP BY CUBE (c1, c2, c3);  \n\nSELECT continent, region, governmentform, count(*) AS cnt, max(lifeexpectancy)\nFROM country c \nWHERE continent LIKE '%America'\nGROUP BY CUBE   (continent, region, governmentform)   \nHAVING COUNT(*) &gt; 5;\n\n|Continent    |Region       |Governmentf   |cnt|max |\n|:------------|:------------|:-------------|:--|:---|\n|             |               |                             | 51|79.4|\n|South America|South America  |Republic                     |  9|75.7|\n|North America|Central America|Republic                     |  6|75.8|\n|North America|Caribbean      |Constitutional Monarchy      |  8|75.2|\n|North America|Caribbean      |                             | 24|78.9|\n|South America|South America  |                             | 14|76.1|\n|North America|Central America|                             |  8|75.8|\n|South America|               |                             | 14|76.1|\n|North America|               |                             | 37|79.4|\n|             |Caribbean      |Constitutional Monarchy      |  8|75.2|\n|             |South America  |Republic                     |  9|75.7|\n|             |Central America|Republic                     |  6|75.8|\n|             |South America  |                             | 14|76.1|\n|             |Central America|                             |  8|75.8|\n|             |Caribbean      |                             | 24|78.9|\n|North America|               |Constitutional Monarchy      |  9|75.2|\n|North America|               |Republic                     | 10|75.8|\n|South America|               |Republic                     |  9|75.7|\n|North America|               |Dependent Territory of the UK|  6|78.9|\n|             |               |Republic                     | 19|75.8|\n|             |               |Constitutional Monarchy      |  9|75.2|\n|             |               |Dependent Territory of the UK|  7|78.9|\n\n\n\nCompter les formes de gouvernement et les région dans les Amériques {smaller}\nSELECT  \n       region, \n       governmentform, \n       count(*) AS cnt, \n       max(lifeexpectancy)\nFROM country c \nWHERE continent LIKE '%America'\nGROUP BY CUBE   (region, governmentform)   \nHAVING COUNT(*) &gt; 0\nORDER BY region, cnt DESC;\nregion         |governmentform                              |cnt|max |\n---------------+--------------------------------------------+---+----+\nCaribbean      |                                            | 24|78.9|\nCaribbean      |Constitutional Monarchy                     |  8|75.2|\nCaribbean      |Dependent Territory of the UK               |  5|78.9|\nCaribbean      |Republic                                    |  4|73.4|\n...            |                                            |   |    |\n               |Republic                                    | 19|75.8|\n               |Constitutional Monarchy                     |  9|75.2|\n               |Dependent Territory of the UK               |  7|78.9|\n               |Federal Republic                            |  5|77.1|\n               |Overseas Department of France               |  3|78.3|\n...\n\n\nRésumé\n\n\n\nPortrait robot d’une requête\nSELECT &lt;attributs&gt;           -- les colonnes de la table résultat\n\nFROM &lt;relations&gt;             -- la/les table/s qui émettent les données\n\n[WHERE &lt;condition&gt; ]         -- filtre\n\n[GROUP BY &lt;attributs de partitionnement&gt;   -- découpage en groupes\n\n[HAVING &lt;condition&gt;]]      -- filtrage des groupes\n\n[ORDER BY &lt;critere&gt;]       -- trier \n\nSELECT : attributs du résultat (avec agrégats éventuels)\nWHERE : condition de sélection indépendante du GROUP BY\nHAVING : condition de sélection portant sur les groupes\n\n\n\n\n\n\n\n\nAvis\n\n\nAll SQL queries will contain some combination of these clauses. If you remember nothing else, remember this!\n\n\n\nSELECT        -- columns to display\nFROM          -- table(s) to pull from\nWHERE         -- filter\nGROUP BY      -- split rows into groups\nHAVING        -- filter within groups\nORDER BY      -- sort\n\n\nOrdre d’exécution des éléments d’une requête\n\nRassembler les données mentionnées dans la clause FROM\nFilter les lignes selon la clause WHERE\nRegrouper les lignes selon la clause GROUP BY\nFiltrer les groupes selon la clause HAVING\nSpecifier les colonnes du résultat selon la clause SELECT\nTrier le résultat final selon la clause ORDER BY\n\n\n\nRéférences\n\nTutoriel SELECT de PostGreSQL\nTutoriel joins\nDocumentation requêtes\nDocumentation SELECT\nGROUPING SETS, ROLLUP, CUBE\n\n\n\nFin"
  },
  {
    "objectID": "slides/SQL_3.html#exemple-suite-smaller",
    "href": "slides/SQL_3.html#exemple-suite-smaller",
    "title": "BD IV: SQL III",
    "section": "Exemple (suite) {smaller}",
    "text": "Exemple (suite) {smaller}\nAfficher le pays le plus peuplé\n\n\nSELECT * \nFROM world.country c  \nWHERE population_country &gt;= ALL(\n  SELECT cc.population_country  \n  FROM world.country  cc\n) ;     \n\nWITH S AS (        \n    SELECT c.*, max(population_country) \n         OVER () AS mpc  \n    FROM world.country c\n)\nSELECT * \nFROM S   \nWHERE population_country &gt;= mpc ;\n::::: name_country|continent|population_country|\n------------+---------+------------------+\nChina       |Asia     |        1277558000|\nExemple {smaller}\nAfficher les 10 pays les plus peuplés\n\nWITH S AS (        \n    SELECT c.*, rank() \n         OVER (ORDER BY population_country DESC) AS rpc  \n    FROM world.country c\n)\nSELECT name_country, continent, population_country\nFROM S   \nWHERE rpc &lt;= 10 \nORDER BY rpc DESC;\n\n\nname_country      |continent    |population_country|\n------------------+-------------+------------------+\nChina             |Asia         |        1277558000|\nIndia             |Asia         |        1013662000|\nUnited States     |North America|         278357000|\nIndonesia         |Asia         |         212107000|\nBrazil            |South America|         170115000|\nPakistan          |Asia         |         156483000|\nRussian Federation|Europe       |         146934000|\nBangladesh        |Asia         |         129155000|\nJapan             |Asia         |         126714000|\nNigeria           |Africa       |         111506000|\n\n\nGroupements avancés\n\nIntroduits dans SQL avec la mode du Data mining (Fouille de données) dans les années 1990\nPermet de réaliser de facon apparemment simultanée des aggrégations de régularités emboîtées\nDans le monde des statistiques, lorsqu’on aggrège des comptages de grains différents, on parle de tables de contingences (contingency tables).\n\n\n\nROLLUP {smaller}\nSELECT continent, region, max(lifeexpectancy)\nFROM country c \nWHERE continent LIKE '%America'\nGROUP BY ROLLUP  (continent, region)  \nORDER BY continent, region ;\n\n\n\nContinent\nRegion\nmax\n\n\n\n\nNorth America\nCaribbean\n78.9\n\n\nNorth America\nCentral America\n75.8\n\n\nNorth America\nNorth America\n79.4\n\n\nNorth America\n\n79.4\n\n\nSouth America\nSouth America\n76.1\n\n\nSouth America\n\n76.1\n\n\n\n\n79.4\n\n\n\n\n\nGROUPING SETS\nSELECT c1, c2, aggregate_function(c3)\nFROM table_name\nGROUP BY GROUPING SETS ((c1, c2), (c1), (c2), ());   \n ROLLUP and CUBE are special cases of GROUPING SETS\n\n\nGROUPING SETS (suite) {smaller}\nSELECT continent, region, max(lifeexpectancy)\nFROM country c \nWHERE continent LIKE '%America'\nGROUP BY GROUPING SETS  ((continent, region), (continent), ())  \nORDER BY continent, region ;\n\n\n\nContinent\nRegion\nmax\n\n\n\n\nNorth America\nCaribbean\n78.9\n\n\nNorth America\nCentral America\n75.8\n\n\nNorth America\nNorth America\n79.4\n\n\nNorth America\n\n79.4\n\n\nSouth America\nSouth America\n76.1\n\n\nSouth America\n\n76.1\n\n\n\n\n79.4\n\n\n\n\n\nCUBE\nSELECT c1, c2, c3,\n    aggregate (c4) \nFROM table_name\nGROUP BY CUBE (c1, c2, c3);  \n\nSELECT continent, region, governmentform, count(*) AS cnt, max(lifeexpectancy)\nFROM country c \nWHERE continent LIKE '%America'\nGROUP BY CUBE   (continent, region, governmentform)   \nHAVING COUNT(*) &gt; 5;\n\n|Continent    |Region       |Governmentf   |cnt|max |\n|:------------|:------------|:-------------|:--|:---|\n|             |               |                             | 51|79.4|\n|South America|South America  |Republic                     |  9|75.7|\n|North America|Central America|Republic                     |  6|75.8|\n|North America|Caribbean      |Constitutional Monarchy      |  8|75.2|\n|North America|Caribbean      |                             | 24|78.9|\n|South America|South America  |                             | 14|76.1|\n|North America|Central America|                             |  8|75.8|\n|South America|               |                             | 14|76.1|\n|North America|               |                             | 37|79.4|\n|             |Caribbean      |Constitutional Monarchy      |  8|75.2|\n|             |South America  |Republic                     |  9|75.7|\n|             |Central America|Republic                     |  6|75.8|\n|             |South America  |                             | 14|76.1|\n|             |Central America|                             |  8|75.8|\n|             |Caribbean      |                             | 24|78.9|\n|North America|               |Constitutional Monarchy      |  9|75.2|\n|North America|               |Republic                     | 10|75.8|\n|South America|               |Republic                     |  9|75.7|\n|North America|               |Dependent Territory of the UK|  6|78.9|\n|             |               |Republic                     | 19|75.8|\n|             |               |Constitutional Monarchy      |  9|75.2|\n|             |               |Dependent Territory of the UK|  7|78.9|\n\n\n\nCompter les formes de gouvernement et les région dans les Amériques {smaller}\nSELECT  \n       region, \n       governmentform, \n       count(*) AS cnt, \n       max(lifeexpectancy)\nFROM country c \nWHERE continent LIKE '%America'\nGROUP BY CUBE   (region, governmentform)   \nHAVING COUNT(*) &gt; 0\nORDER BY region, cnt DESC;\nregion         |governmentform                              |cnt|max |\n---------------+--------------------------------------------+---+----+\nCaribbean      |                                            | 24|78.9|\nCaribbean      |Constitutional Monarchy                     |  8|75.2|\nCaribbean      |Dependent Territory of the UK               |  5|78.9|\nCaribbean      |Republic                                    |  4|73.4|\n...            |                                            |   |    |\n               |Republic                                    | 19|75.8|\n               |Constitutional Monarchy                     |  9|75.2|\n               |Dependent Territory of the UK               |  7|78.9|\n               |Federal Republic                            |  5|77.1|\n               |Overseas Department of France               |  3|78.3|\n...\n\n\nRésumé\n\n\n\nPortrait robot d’une requête\nSELECT &lt;attributs&gt;           -- les colonnes de la table résultat\n\nFROM &lt;relations&gt;             -- la/les table/s qui émettent les données\n\n[WHERE &lt;condition&gt; ]         -- filtre\n\n[GROUP BY &lt;attributs de partitionnement&gt;   -- découpage en groupes\n\n[HAVING &lt;condition&gt;]]      -- filtrage des groupes\n\n[ORDER BY &lt;critere&gt;]       -- trier \n\nSELECT : attributs du résultat (avec agrégats éventuels)\nWHERE : condition de sélection indépendante du GROUP BY\nHAVING : condition de sélection portant sur les groupes\n\n\n\n\n\n\n\n\nAvis\n\n\nAll SQL queries will contain some combination of these clauses. If you remember nothing else, remember this!\n\n\n\nSELECT        -- columns to display\nFROM          -- table(s) to pull from\nWHERE         -- filter\nGROUP BY      -- split rows into groups\nHAVING        -- filter within groups\nORDER BY      -- sort\n\n\nOrdre d’exécution des éléments d’une requête\n\nRassembler les données mentionnées dans la clause FROM\nFilter les lignes selon la clause WHERE\nRegrouper les lignes selon la clause GROUP BY\nFiltrer les groupes selon la clause HAVING\nSpecifier les colonnes du résultat selon la clause SELECT\nTrier le résultat final selon la clause ORDER BY\n\n\n\nRéférences\n\nTutoriel SELECT de PostGreSQL\nTutoriel joins\nDocumentation requêtes\nDocumentation SELECT\nGROUPING SETS, ROLLUP, CUBE\n\n\n\nFin"
  },
  {
    "objectID": "slides/SQL_3.html#exemple-smaller-2",
    "href": "slides/SQL_3.html#exemple-smaller-2",
    "title": "BD IV: SQL III",
    "section": "Exemple {smaller}",
    "text": "Exemple {smaller}\nAfficher les 10 pays les plus peuplés\n\nWITH S AS (        \n    SELECT c.*, rank() \n         OVER (ORDER BY population_country DESC) AS rpc  \n    FROM world.country c\n)\nSELECT name_country, continent, population_country\nFROM S   \nWHERE rpc &lt;= 10 \nORDER BY rpc DESC;\n\n\nname_country      |continent    |population_country|\n------------------+-------------+------------------+\nChina             |Asia         |        1277558000|\nIndia             |Asia         |        1013662000|\nUnited States     |North America|         278357000|\nIndonesia         |Asia         |         212107000|\nBrazil            |South America|         170115000|\nPakistan          |Asia         |         156483000|\nRussian Federation|Europe       |         146934000|\nBangladesh        |Asia         |         129155000|\nJapan             |Asia         |         126714000|\nNigeria           |Africa       |         111506000|"
  },
  {
    "objectID": "slides/SQL_3.html#rollup-smaller",
    "href": "slides/SQL_3.html#rollup-smaller",
    "title": "BD IV: SQL III",
    "section": "ROLLUP {smaller}",
    "text": "ROLLUP {smaller}\nSELECT continent, region, max(lifeexpectancy)\nFROM country c \nWHERE continent LIKE '%America'\nGROUP BY ROLLUP  (continent, region)  \nORDER BY continent, region ;\n\n\n\nContinent\nRegion\nmax\n\n\n\n\nNorth America\nCaribbean\n78.9\n\n\nNorth America\nCentral America\n75.8\n\n\nNorth America\nNorth America\n79.4\n\n\nNorth America\n\n79.4\n\n\nSouth America\nSouth America\n76.1\n\n\nSouth America\n\n76.1\n\n\n\n\n79.4"
  },
  {
    "objectID": "slides/SQL_3.html#grouping-sets",
    "href": "slides/SQL_3.html#grouping-sets",
    "title": "BD IV: SQL III",
    "section": "GROUPING SETS",
    "text": "GROUPING SETS\nSELECT c1, c2, aggregate_function(c3)\nFROM table_name\nGROUP BY GROUPING SETS ((c1, c2), (c1), (c2), ());   \n ROLLUP and CUBE are special cases of GROUPING SETS"
  },
  {
    "objectID": "slides/SQL_3.html#grouping-sets-suite-smaller",
    "href": "slides/SQL_3.html#grouping-sets-suite-smaller",
    "title": "BD IV: SQL III",
    "section": "GROUPING SETS (suite) {smaller}",
    "text": "GROUPING SETS (suite) {smaller}\nSELECT continent, region, max(lifeexpectancy)\nFROM country c \nWHERE continent LIKE '%America'\nGROUP BY GROUPING SETS  ((continent, region), (continent), ())  \nORDER BY continent, region ;\n\n\n\nContinent\nRegion\nmax\n\n\n\n\nNorth America\nCaribbean\n78.9\n\n\nNorth America\nCentral America\n75.8\n\n\nNorth America\nNorth America\n79.4\n\n\nNorth America\n\n79.4\n\n\nSouth America\nSouth America\n76.1\n\n\nSouth America\n\n76.1\n\n\n\n\n79.4"
  },
  {
    "objectID": "slides/SQL_3.html#cube",
    "href": "slides/SQL_3.html#cube",
    "title": "BD IV: SQL III",
    "section": "CUBE",
    "text": "CUBE\nSELECT c1, c2, c3,\n    aggregate (c4) \nFROM table_name\nGROUP BY CUBE (c1, c2, c3);  \n\nSELECT continent, region, governmentform, count(*) AS cnt, max(lifeexpectancy)\nFROM country c \nWHERE continent LIKE '%America'\nGROUP BY CUBE   (continent, region, governmentform)   \nHAVING COUNT(*) &gt; 5;\n\n|Continent    |Region       |Governmentf   |cnt|max |\n|:------------|:------------|:-------------|:--|:---|\n|             |               |                             | 51|79.4|\n|South America|South America  |Republic                     |  9|75.7|\n|North America|Central America|Republic                     |  6|75.8|\n|North America|Caribbean      |Constitutional Monarchy      |  8|75.2|\n|North America|Caribbean      |                             | 24|78.9|\n|South America|South America  |                             | 14|76.1|\n|North America|Central America|                             |  8|75.8|\n|South America|               |                             | 14|76.1|\n|North America|               |                             | 37|79.4|\n|             |Caribbean      |Constitutional Monarchy      |  8|75.2|\n|             |South America  |Republic                     |  9|75.7|\n|             |Central America|Republic                     |  6|75.8|\n|             |South America  |                             | 14|76.1|\n|             |Central America|                             |  8|75.8|\n|             |Caribbean      |                             | 24|78.9|\n|North America|               |Constitutional Monarchy      |  9|75.2|\n|North America|               |Republic                     | 10|75.8|\n|South America|               |Republic                     |  9|75.7|\n|North America|               |Dependent Territory of the UK|  6|78.9|\n|             |               |Republic                     | 19|75.8|\n|             |               |Constitutional Monarchy      |  9|75.2|\n|             |               |Dependent Territory of the UK|  7|78.9|"
  },
  {
    "objectID": "slides/SQL_3.html#compter-les-formes-de-gouvernement-et-les-région-dans-les-amériques-smaller",
    "href": "slides/SQL_3.html#compter-les-formes-de-gouvernement-et-les-région-dans-les-amériques-smaller",
    "title": "BD IV: SQL III",
    "section": "Compter les formes de gouvernement et les région dans les Amériques {smaller}",
    "text": "Compter les formes de gouvernement et les région dans les Amériques {smaller}\nSELECT  \n       region, \n       governmentform, \n       count(*) AS cnt, \n       max(lifeexpectancy)\nFROM country c \nWHERE continent LIKE '%America'\nGROUP BY CUBE   (region, governmentform)   \nHAVING COUNT(*) &gt; 0\nORDER BY region, cnt DESC;\nregion         |governmentform                              |cnt|max |\n---------------+--------------------------------------------+---+----+\nCaribbean      |                                            | 24|78.9|\nCaribbean      |Constitutional Monarchy                     |  8|75.2|\nCaribbean      |Dependent Territory of the UK               |  5|78.9|\nCaribbean      |Republic                                    |  4|73.4|\n...            |                                            |   |    |\n               |Republic                                    | 19|75.8|\n               |Constitutional Monarchy                     |  9|75.2|\n               |Dependent Territory of the UK               |  7|78.9|\n               |Federal Republic                            |  5|77.1|\n               |Overseas Department of France               |  3|78.3|\n..."
  },
  {
    "objectID": "slides/SQL_3.html#portrait-robot-dune-requête",
    "href": "slides/SQL_3.html#portrait-robot-dune-requête",
    "title": "BD IV: SQL III",
    "section": "Portrait robot d’une requête",
    "text": "Portrait robot d’une requête\nSELECT &lt;attributs&gt;           -- les colonnes de la table résultat\n\nFROM &lt;relations&gt;             -- la/les table/s qui émettent les données\n\n[WHERE &lt;condition&gt; ]         -- filtre\n\n[GROUP BY &lt;attributs de partitionnement&gt;   -- découpage en groupes\n\n[HAVING &lt;condition&gt;]]      -- filtrage des groupes\n\n[ORDER BY &lt;critere&gt;]       -- trier \n\nSELECT : attributs du résultat (avec agrégats éventuels)\nWHERE : condition de sélection indépendante du GROUP BY\nHAVING : condition de sélection portant sur les groupes\n\n\n\n\n\n\n\n\nAvis\n\n\nAll SQL queries will contain some combination of these clauses. If you remember nothing else, remember this!\n\n\n\nSELECT        -- columns to display\nFROM          -- table(s) to pull from\nWHERE         -- filter\nGROUP BY      -- split rows into groups\nHAVING        -- filter within groups\nORDER BY      -- sort"
  },
  {
    "objectID": "slides/SQL_3.html#ordre-dexécution-des-éléments-dune-requête",
    "href": "slides/SQL_3.html#ordre-dexécution-des-éléments-dune-requête",
    "title": "BD IV: SQL III",
    "section": "Ordre d’exécution des éléments d’une requête",
    "text": "Ordre d’exécution des éléments d’une requête\n\nRassembler les données mentionnées dans la clause FROM\nFilter les lignes selon la clause WHERE\nRegrouper les lignes selon la clause GROUP BY\nFiltrer les groupes selon la clause HAVING\nSpecifier les colonnes du résultat selon la clause SELECT\nTrier le résultat final selon la clause ORDER BY"
  },
  {
    "objectID": "slides/SQL_1.html#sql-structured-query-language",
    "href": "slides/SQL_1.html#sql-structured-query-language",
    "title": "BD II: SQL I",
    "section": "SQL : Structured Query Language",
    "text": "SQL : Structured Query Language\nSQL est langage permettant :\n\ninterrogation des données (requêtes)\ndéfinition des données et des contraintes structurelles sur celles-ci\nmanipulation des données (insertion, suppression, mise à jour)\ndéfinition des vues et des index\nadministration des bases de données"
  },
  {
    "objectID": "slides/SQL_1.html#plusieurs-fois-normalisés-par-liso",
    "href": "slides/SQL_1.html#plusieurs-fois-normalisés-par-liso",
    "title": "BD II: SQL I",
    "section": "Plusieurs fois normalisés par l’ISO …",
    "text": "Plusieurs fois normalisés par l’ISO …\n\nSQL-86,\nSQL-89,\nSQL-92,\nSQL-99.\n…\nSQL-2003\nSQL-2008\nSQL-2011\nSQL-2016\n…\n\nNous utiliserons le dialecte PostgreSQL\nA standard is reviewed every 5 years (roughly)\nISO/IEC 9075 from www.iso.org"
  },
  {
    "objectID": "slides/SQL_1.html#sql",
    "href": "slides/SQL_1.html#sql",
    "title": "BD II: SQL I",
    "section": "SQL",
    "text": "SQL\n\n\nUne instruction SQL permet de combiner :\n\nrestriction/filtrage (sélection) \\(\\sigma\\)\nprojection \\(\\pi\\)\nrenommage \\(\\rho\\)\n…\n\n. . .\nL’instruction\nSELECT &lt;liste attribut&gt;\n\nFROM &lt;table&gt;\n\nWHERE &lt;condition&gt; ;\ntraduit l’expression\n\\(\\pi_{\\text{&lt;liste attribut&gt;}}(\\sigma_{\\text{&lt;condition&gt;}}(\\text{&lt;table&gt;}))\\)"
  },
  {
    "objectID": "slides/SQL_1.html#syntaxe---requêtes-simples",
    "href": "slides/SQL_1.html#syntaxe---requêtes-simples",
    "title": "BD II: SQL I",
    "section": "Syntaxe - requêtes simples",
    "text": "Syntaxe - requêtes simples\n\n\nSELECT [DISTINCT] * | &lt;liste attribut&gt;\n\nFROM &lt;liste de tables&gt;\n\n[WHERE &lt;condition&gt;] ;\n\n\n* : sélection de tous les attributs (le schéma reste inchangé)\n[...] : clause, expression facultative.\nDISTINCT : supprime les doublons."
  },
  {
    "objectID": "slides/SQL_1.html#requêtes-simples-sur-exemple-jouet",
    "href": "slides/SQL_1.html#requêtes-simples-sur-exemple-jouet",
    "title": "BD II: SQL I",
    "section": "Requêtes simples sur exemple jouet",
    "text": "Requêtes simples sur exemple jouet\n\n\nEmploye(Nu, NomE, Annee, Tel, Nudept)\n\nFournisseur (NomF, Ville, Adresse)\n\nPiece(NomP, Prix, Couleur)\n\nSELECT NomF, Ville\n\nFROM Fournisseur ;\nEquivalent à :\n\\[\\pi_{\\text{NomF, Ville}}(\\text{Fournisseur})\\]"
  },
  {
    "objectID": "slides/SQL_1.html#structure-de-base",
    "href": "slides/SQL_1.html#structure-de-base",
    "title": "BD II: SQL I",
    "section": "Structure de base",
    "text": "Structure de base\nLa structure de base d’une requête s’appuie sur les trois mots clés suivants :\n\n.red[SELECT] correspond à l’opérateur de projection sur la liste d’attributs demandée, il peut aussi être suivi de fonctions d’attributs\n.red[FROM] indique la ou les relations concernées\n.red[WHERE] précise une condition et correspond à l’opération de restriction/sélection en algèbre relationnelle."
  },
  {
    "objectID": "slides/SQL_1.html#syntaxe-de-la-condition-de-filtrage-where-...",
    "href": "slides/SQL_1.html#syntaxe-de-la-condition-de-filtrage-where-...",
    "title": "BD II: SQL I",
    "section": "Syntaxe de la condition de filtrage (WHERE ...)",
    "text": "Syntaxe de la condition de filtrage (WHERE ...)\nUne condition se construit à l’aide des opérations suivantes :\n\nComparaison avec opérateurs : .red[=, &lt;&gt;, &gt;,&lt;, &gt;=, &lt;=]\n\nSELECT *\n\nFROM Employe\n\nWHERE NomE &lt;&gt;'Durand'  ;  #&lt;&lt;"
  },
  {
    "objectID": "slides/SQL_1.html#syntaxe-de-la-condition-de-filtrage-where-...-1",
    "href": "slides/SQL_1.html#syntaxe-de-la-condition-de-filtrage-where-...-1",
    "title": "BD II: SQL I",
    "section": "Syntaxe de la condition de filtrage (WHERE ...)",
    "text": "Syntaxe de la condition de filtrage (WHERE ...)\nCombinaison de conditions à l’aide des opérateurs logiques: .red[AND, OR, NOT]\nSELECT DISTINCT NomF\n\nFROM Fournisseur\n\nWHERE (Ville='Londres') OR (Ville='Paris');  #&lt;&lt;\n Attention aux priorités dans l’évaluation des expressions logiques\n Attention aux valeurs manquantes"
  },
  {
    "objectID": "slides/SQL_1.html#syntaxe-de-la-condition-where-...-suite",
    "href": "slides/SQL_1.html#syntaxe-de-la-condition-where-...-suite",
    "title": "BD II: SQL I",
    "section": "Syntaxe de la condition WHERE ... (suite)",
    "text": "Syntaxe de la condition WHERE ... (suite)\nTest BETWEEN permettant de vérifier si la valeur d’un attribut est comprise entre deux constantes\nSELECT NomE\n\nFROM Employe\n\nWHERE Annee BETWEEN '22/06/03' AND '25/09/03';   #&lt;&lt;\n Éviter de manipuler les dates et heures comme des chaînes de caractères"
  },
  {
    "objectID": "slides/SQL_1.html#syntaxe-de-la-condition-where-...-suite-1",
    "href": "slides/SQL_1.html#syntaxe-de-la-condition-where-...-suite-1",
    "title": "BD II: SQL I",
    "section": "Syntaxe de la condition WHERE ... (suite)",
    "text": "Syntaxe de la condition WHERE ... (suite)\n\nTest à .red[NULL] signifiant que la valeur est égale à NULL (c-à-d est inconnue)\n\nSELECT *\n\nFROM Employe\n\nWHERE Tel IS NULL;    #&lt;&lt;\n Attention aux valeurs manquantes"
  },
  {
    "objectID": "slides/SQL_1.html#syntaxe-de-la-condition-where-...-suite-2",
    "href": "slides/SQL_1.html#syntaxe-de-la-condition-where-...-suite-2",
    "title": "BD II: SQL I",
    "section": "Syntaxe de la condition WHERE ... (suite)",
    "text": "Syntaxe de la condition WHERE ... (suite)\nTest d’appartenance .red[IN] qui permet de vérifier si la valeur d’un attribut appartient à une liste de constantes,\nSELECT *\n\nFROM Fournisseur\n\nWHERE Ville IN ('Paris', 'Londres');   #&lt;&lt;"
  },
  {
    "objectID": "slides/SQL_1.html#syntaxe-de-la-condition-where-...-suite-3",
    "href": "slides/SQL_1.html#syntaxe-de-la-condition-where-...-suite-3",
    "title": "BD II: SQL I",
    "section": "Syntaxe de la condition WHERE ... (suite)",
    "text": "Syntaxe de la condition WHERE ... (suite)\nTest .red[LIKE] permettant de vérifier si un attribut de type chaîne de caractères contient une ou plusieurs sous-chaînes\n\\(\\_\\) : remplace n’importe quel caractère\n\\(\\%\\) : remplace n’importe quelle chaîne de caractères.\nSELECT Ville\n\nFROM Fournisseur\n\nWHERE Ville LIKE 'Saint%';"
  },
  {
    "objectID": "slides/SQL_1.html#requêtes-multi-relations-1",
    "href": "slides/SQL_1.html#requêtes-multi-relations-1",
    "title": "BD II: SQL I",
    "section": "Requêtes multi-relations",
    "text": "Requêtes multi-relations\nQuand l’information est dispersée sur plusieurs tables, on utilise des jointures"
  },
  {
    "objectID": "slides/SQL_1.html#on-peut",
    "href": "slides/SQL_1.html#on-peut",
    "title": "BD II: SQL I",
    "section": "On peut :",
    "text": "On peut :\n\nutiliser plusieurs tables dans la clause FROM\nfaire intervenir des conditions complexes impliquant ces tables dans la clause WHERE"
  },
  {
    "objectID": "slides/SQL_1.html#détails-du-schema-world",
    "href": "slides/SQL_1.html#détails-du-schema-world",
    "title": "BD II: SQL I",
    "section": "Détails du schema World",
    "text": "Détails du schema World\nImages et tables créées grâce à DbSchema"
  },
  {
    "objectID": "slides/SQL_1.html#diagramme-en-pattes-de-corbeau",
    "href": "slides/SQL_1.html#diagramme-en-pattes-de-corbeau",
    "title": "BD II: SQL I",
    "section": "Diagramme en pattes de corbeau",
    "text": "Diagramme en pattes de corbeau\n\nimg"
  },
  {
    "objectID": "slides/SQL_1.html#table-world.city",
    "href": "slides/SQL_1.html#table-world.city",
    "title": "BD II: SQL I",
    "section": "Table world.city",
    "text": "Table world.city\n\n\n\n* 🔑 ⬋\nid\ninteger\n\n\n*\nname\ntext\n\n\n*\ncountrycode\nchar(3)\n\n\n*\ndistrict\ntext\n\n\n*\npopulation\ninteger"
  },
  {
    "objectID": "slides/SQL_1.html#table-world.country",
    "href": "slides/SQL_1.html#table-world.country",
    "title": "BD II: SQL I",
    "section": "Table world.country",
    "text": "Table world.country\n\n\n\n* 🔑 ⬋\ncode\nchar(3)\n\n\n*\nname\ntext\n\n\n*\ncontinent\ntext\n\n\n*\nregion\ntext\n\n\n*\nsurfacearea\nreal\n\n\n\nindepyear\nsmallint\n\n\n*\npopulation\ninteger\n\n\n\nlifeexpectancy\nreal\n\n\n\ngnp\nnumeric(10,2)\n\n\n\ngnpold\nnumeric(10,2)\n\n\n*\nlocalname\ntext\n\n\n*\ngovernmentform\ntext\n\n\n\nheadofstate\ntext\n\n\n⬈\ncapital\ninteger\n\n\n*\ncode2\nchar(2)\n\n\n\nForeign Keys\n\n\n\n\ncountry_capital_fkey\n( capital ) ref world.city (id)\n\n\n\nConstraints\n\n\n\n\n\n\n\ncountry_continent_check\n((continent = ‘Asia’::text) OR (continent = ‘Europe’::text) OR (continent = ‘North America’::text) OR (continent = ‘Africa’::text) OR (continent = ‘Oceania’::text) OR (continent = ‘Antarctica’::text) OR (continent = ‘South America’::text))"
  },
  {
    "objectID": "slides/SQL_1.html#table-world.countrylanguage",
    "href": "slides/SQL_1.html#table-world.countrylanguage",
    "title": "BD II: SQL I",
    "section": "Table world.countrylanguage",
    "text": "Table world.countrylanguage\n\n\n\n* 🔑 ⬈\ncountrycode\nchar(3)\n\n\n* 🔑\nlanguage\ntext\n\n\n*\nisofficial\nboolean\n\n\n*\npercentage\nreal\n\n\n\nForeign Keys\n\n\n\n\ncountrylanguage_countrycode_fkey\n( countrycode ) ref world.country (code)"
  },
  {
    "objectID": "slides/SQL_1.html#première-jointure-sur-schéma-world",
    "href": "slides/SQL_1.html#première-jointure-sur-schéma-world",
    "title": "BD II: SQL I",
    "section": "Première jointure sur schéma world",
    "text": "Première jointure sur schéma world\nQuels sont les pays qui portent le même nom que leur capitale ?\n\nSELECT name_country\n\nFROM country, city   #&lt;&lt; \n\nWHERE capital=id AND name_country=name_city;\nqui correspond à\n\\[\\pi_{\\text{name_country}}\\Bigl(\n\\sigma_{\\text{capital}=\\text{id} \\wedge \\text{name_country}=\\text{name_city}}(\\text{country }\\times \\text{city}) \\Bigr)\\]\nautrement dit\n\\[\\pi_{\\text{name_country}}\\Bigl(\n\\text{country} \\bowtie_{\\text{capital}=\\text{id} \\wedge  \\text{name_country}=\\text{name_city}} \\text{city})\n\\Bigr)\\]"
  },
  {
    "objectID": "slides/SQL_1.html#syntaxe-normalisée-pour-les-jointures-join-et-on",
    "href": "slides/SQL_1.html#syntaxe-normalisée-pour-les-jointures-join-et-on",
    "title": "BD II: SQL I",
    "section": "Syntaxe normalisée pour les jointures~: JOIN et ON",
    "text": "Syntaxe normalisée pour les jointures~: JOIN et ON\nQuels sont les pays qui portent le même nom que leur capitale ?\nSELECT name_country\n\nFROM country JOIN city   #&lt;&lt;\n\nON capital=id    #&lt;&lt;\n\nWHERE name_country=name_city;\nqui correspond à\n\\[\\pi_{\\text{name_country}}\\Bigl(\n\\sigma_{\\text{capital}=id \\wedge  \\text{name_country}=\\text{name_city}}(\\text{country} \\times \\text{city}) \\Bigr)\\]"
  },
  {
    "objectID": "slides/SQL_1.html#renommage",
    "href": "slides/SQL_1.html#renommage",
    "title": "BD II: SQL I",
    "section": "Renommage",
    "text": "Renommage\nSi on veut faire une jointure d’une table avec elle-même, on utilise AS pour obtenir deux tables de noms différents\n\nQuels sont les noms de ville qui apparaissent dans deux pays différents~?\n\nSELECT DISTINCT c1.name_city, c1.countrycode, c2.countrycode\n\nFROM city AS c1 JOIN city AS c2   #&lt;&lt;\n\n  ON c1.countrycode!=c2.countrycode AND c1.name_city=c2.name_city  #&lt;&lt;\n\nORDER BY c1.name_city;"
  },
  {
    "objectID": "slides/SQL_1.html#jointure-naturelle",
    "href": "slides/SQL_1.html#jointure-naturelle",
    "title": "BD II: SQL I",
    "section": "Jointure naturelle",
    "text": "Jointure naturelle\nQuels sont les noms des pays où le français est parlé ?\nSELECT name_country\n\nFROM country, countrylanguage\n\nWHERE country.countrycode=countrylanguage.countrycode\n      AND language='French';\nSyntaxe normalisée pour la jointure naturelle~: NATURAL JOIN\nSELECT name_country\n\nFROM country NATURAL JOIN countrylanguage   #&lt;&lt; \n\nWHERE language='French';"
  },
  {
    "objectID": "slides/SQL_1.html#jointure-naturelle-suite",
    "href": "slides/SQL_1.html#jointure-naturelle-suite",
    "title": "BD II: SQL I",
    "section": "Jointure naturelle (suite)",
    "text": "Jointure naturelle (suite)\nQuels sont les pays dont une ville a le même nom qu’une langue parlée dans ce pays~?\nSELECT DISTINCT name_country, name_city, language\n\nFROM country NATURAL JOIN  #&lt;&lt;\n     city natural JOIN     #&lt;&lt;\n     countrylanguage       #&lt;&lt;\n\nWHERE language=name_city;"
  },
  {
    "objectID": "slides/SQL_1.html#jointure-externe",
    "href": "slides/SQL_1.html#jointure-externe",
    "title": "BD II: SQL I",
    "section": "Jointure externe",
    "text": "Jointure externe\n\nLEFT OUTER JOIN (resp. RIGHT OUTER JOIN) : on garde les tuples de la table de gauche (resp. droite) qui n’ont pas de complément dans l’autre table, la condition étant spécifiée dans la clause ON\nFULL OUTER JOIN : on garde les tuples de chacune des tables qui n’ont pas de complément.\nOn complète les valeurs non renseignées par NULL"
  },
  {
    "objectID": "slides/SQL_1.html#exemple-de-jointure-externe",
    "href": "slides/SQL_1.html#exemple-de-jointure-externe",
    "title": "BD II: SQL I",
    "section": "Exemple de jointure externe",
    "text": "Exemple de jointure externe\n\nCertains pays n’ont pas de capitale : la requête\n\nSELECT name_country\n\nFROM country\n\nWHERE capital IS NULL;\nrenvoie 8 lignes.\n\nQuels sont les pays qui n’ont pas de capitale ou portent le même nom que leur capitale~?\n\nSELECT name_country, name_city\n\nFROM country LEFT OUTER JOIN city   #&lt;&lt;\n     ON capital=id                  #&lt;&lt;\n\nWHERE name_city IS NULL OR name_country=name_city ;  #&lt;&lt;"
  },
  {
    "objectID": "slides/DF_norm_3.html#définition-df",
    "href": "slides/DF_norm_3.html#définition-df",
    "title": "BD xxx : Normalisation",
    "section": "Définition : DF",
    "text": "Définition : DF"
  },
  {
    "objectID": "slides/DF_norm_3.html#règles-darmstrong",
    "href": "slides/DF_norm_3.html#règles-darmstrong",
    "title": "BD xxx : Normalisation",
    "section": "Règles d’Armstrong",
    "text": "Règles d’Armstrong\n\n…\n…\n…"
  },
  {
    "objectID": "slides/DF_norm_3.html#équivalence-entre-ensembles-de-dépendances-fonctionnelles",
    "href": "slides/DF_norm_3.html#équivalence-entre-ensembles-de-dépendances-fonctionnelles",
    "title": "BD xxx : Normalisation",
    "section": "Équivalence entre ensembles de dépendances fonctionnelles",
    "text": "Équivalence entre ensembles de dépendances fonctionnelles"
  },
  {
    "objectID": "slides/DF_norm_3.html#définition",
    "href": "slides/DF_norm_3.html#définition",
    "title": "BD xxx : Normalisation",
    "section": "Définition",
    "text": "Définition\n\\(X^+\\)"
  },
  {
    "objectID": "slides/DF_norm_3.html#définition-super-clé",
    "href": "slides/DF_norm_3.html#définition-super-clé",
    "title": "BD xxx : Normalisation",
    "section": "Définition : super-clé",
    "text": "Définition : super-clé\n\\(X \\subseteq \\mathcal{A}\\) est une super-clé de \\(\\mathcal{A}\\) relativement à \\(\\Sigma\\) ssi \\(X^+ =\\mathcal{A}\\)"
  },
  {
    "objectID": "slides/DF_norm_3.html#définition-clé",
    "href": "slides/DF_norm_3.html#définition-clé",
    "title": "BD xxx : Normalisation",
    "section": "Définition : clé",
    "text": "Définition : clé\nUne clé est une super-clé minimale au sens de l’inclusion"
  },
  {
    "objectID": "slides/DF_norm_3.html#définition-1",
    "href": "slides/DF_norm_3.html#définition-1",
    "title": "BD xxx : Normalisation",
    "section": "Définition",
    "text": "Définition\nSoit \\(\\mathcal{A}\\) un schéma et \\(\\Sigma\\) un ensemble de dépendances fonctionnelles sur \\(\\mathcal{A}\\),\nle schéma \\(\\mathcal{A}\\) est en FNBC\nssi\npour toute dépendance fonctionnelle \\(X \\rightarrow Y\\) non-triviale impliquée par \\(\\Sigma\\), \\(X\\) est une super-clé de \\(\\mathcal{A}\\), soit \\(\\mathcal{A} \\subseteq X^+\\)"
  },
  {
    "objectID": "slides/DF_norm_3.html#exemples-et-contre-exemples",
    "href": "slides/DF_norm_3.html#exemples-et-contre-exemples",
    "title": "BD xxx : Normalisation",
    "section": "Exemples et contre-exemples",
    "text": "Exemples et contre-exemples"
  },
  {
    "objectID": "slides/DF_norm_3.html#proposition",
    "href": "slides/DF_norm_3.html#proposition",
    "title": "BD xxx : Normalisation",
    "section": "Proposition",
    "text": "Proposition\nTout schéma à deux attributs est en FNBC"
  },
  {
    "objectID": "slides/DF_norm_3.html#vérification-de-la-normalité",
    "href": "slides/DF_norm_3.html#vérification-de-la-normalité",
    "title": "BD xxx : Normalisation",
    "section": "Vérification de la normalité",
    "text": "Vérification de la normalité"
  },
  {
    "objectID": "slides/DF_norm_3.html#définition-décomposirion",
    "href": "slides/DF_norm_3.html#définition-décomposirion",
    "title": "BD xxx : Normalisation",
    "section": "Définition : décomposirion",
    "text": "Définition : décomposirion"
  },
  {
    "objectID": "slides/DF_norm_3.html#algorithme-de-décomposition-en-fnbc",
    "href": "slides/DF_norm_3.html#algorithme-de-décomposition-en-fnbc",
    "title": "BD xxx : Normalisation",
    "section": "Algorithme de décomposition en FNBC",
    "text": "Algorithme de décomposition en FNBC"
  },
  {
    "objectID": "slides/DF_norm_3.html#proposition-1",
    "href": "slides/DF_norm_3.html#proposition-1",
    "title": "BD xxx : Normalisation",
    "section": "Proposition",
    "text": "Proposition\n\nL’algorithme termine en un nombre fini d’itérations\nLe résultat est une décomposition en FNBC"
  },
  {
    "objectID": "slides/DF_norm_3.html#définition-décomposition-sans-perte-dinformation",
    "href": "slides/DF_norm_3.html#définition-décomposition-sans-perte-dinformation",
    "title": "BD xxx : Normalisation",
    "section": "Définition : Décomposition sans Perte d’Information",
    "text": "Définition : Décomposition sans Perte d’Information"
  },
  {
    "objectID": "slides/DF_norm_3.html#algorithme-de-poursuite-chase-pour-détecter-la-perte-dinformation",
    "href": "slides/DF_norm_3.html#algorithme-de-poursuite-chase-pour-détecter-la-perte-dinformation",
    "title": "BD xxx : Normalisation",
    "section": "Algorithme de poursuite (chase) pour détecter la perte d’information",
    "text": "Algorithme de poursuite (chase) pour détecter la perte d’information"
  },
  {
    "objectID": "slides/DF_norm_3.html#proposition-2",
    "href": "slides/DF_norm_3.html#proposition-2",
    "title": "BD xxx : Normalisation",
    "section": "Proposition",
    "text": "Proposition"
  },
  {
    "objectID": "slides/DF_norm_3.html#preuve-terminaison",
    "href": "slides/DF_norm_3.html#preuve-terminaison",
    "title": "BD xxx : Normalisation",
    "section": "Preuve (terminaison)",
    "text": "Preuve (terminaison)"
  },
  {
    "objectID": "slides/DF_norm_3.html#preuve-correction",
    "href": "slides/DF_norm_3.html#preuve-correction",
    "title": "BD xxx : Normalisation",
    "section": "Preuve (correction)",
    "text": "Preuve (correction)"
  },
  {
    "objectID": "slides/DF_norm_3.html#proposition-3",
    "href": "slides/DF_norm_3.html#proposition-3",
    "title": "BD xxx : Normalisation",
    "section": "Proposition",
    "text": "Proposition\nL’algorithme de décomposition en FNBC fournit une décomposition sans Perte d’Information"
  },
  {
    "objectID": "slides/DF_norm_3.html#preuve",
    "href": "slides/DF_norm_3.html#preuve",
    "title": "BD xxx : Normalisation",
    "section": "Preuve",
    "text": "Preuve"
  },
  {
    "objectID": "slides/DF_norm_3.html#définition-projection-dune-dépendance-fonctionnelle-sur-un-sous-schéma",
    "href": "slides/DF_norm_3.html#définition-projection-dune-dépendance-fonctionnelle-sur-un-sous-schéma",
    "title": "BD xxx : Normalisation",
    "section": "Définition : Projection d’une dépendance fonctionnelle sur un sous-schéma",
    "text": "Définition : Projection d’une dépendance fonctionnelle sur un sous-schéma"
  },
  {
    "objectID": "slides/DF_norm_3.html#définition-perte-de-dépendance-fonctionnelle",
    "href": "slides/DF_norm_3.html#définition-perte-de-dépendance-fonctionnelle",
    "title": "BD xxx : Normalisation",
    "section": "Définition : perte de dépendance fonctionnelle",
    "text": "Définition : perte de dépendance fonctionnelle"
  },
  {
    "objectID": "slides/DF_norm_3.html#définition-forme-normale-3-fn3",
    "href": "slides/DF_norm_3.html#définition-forme-normale-3-fn3",
    "title": "BD xxx : Normalisation",
    "section": "Définition : forme normale 3 (FN3)",
    "text": "Définition : forme normale 3 (FN3)"
  },
  {
    "objectID": "slides/DF_norm_3.html#algorithme-de-décomposition-en-fn3",
    "href": "slides/DF_norm_3.html#algorithme-de-décomposition-en-fn3",
    "title": "BD xxx : Normalisation",
    "section": "Algorithme de Décomposition en FN3",
    "text": "Algorithme de Décomposition en FN3"
  },
  {
    "objectID": "slides/DF_norm_3.html#proposition-4",
    "href": "slides/DF_norm_3.html#proposition-4",
    "title": "BD xxx : Normalisation",
    "section": "Proposition",
    "text": "Proposition\nL’algorithme termine en un nombre fini d’itérations\nLa décomposition produite par l’algorithme est\n\nen FN3\nsans perte d’information\nsans perte de dépendances fonctionnelles"
  },
  {
    "objectID": "slides/DF_norm_3.html#preuve-terminaison-1",
    "href": "slides/DF_norm_3.html#preuve-terminaison-1",
    "title": "BD xxx : Normalisation",
    "section": "Preuve (terminaison)",
    "text": "Preuve (terminaison)"
  },
  {
    "objectID": "slides/DF_norm_3.html#preuve-fn3",
    "href": "slides/DF_norm_3.html#preuve-fn3",
    "title": "BD xxx : Normalisation",
    "section": "Preuve (FN3)",
    "text": "Preuve (FN3)"
  },
  {
    "objectID": "slides/DF_norm_3.html#preuve-sans-pi",
    "href": "slides/DF_norm_3.html#preuve-sans-pi",
    "title": "BD xxx : Normalisation",
    "section": "Preuve (sans PI)",
    "text": "Preuve (sans PI)"
  },
  {
    "objectID": "slides/DF_norm_3.html#preuve-sans-perte-de-df",
    "href": "slides/DF_norm_3.html#preuve-sans-perte-de-df",
    "title": "BD xxx : Normalisation",
    "section": "Preuve (sans perte de DF)",
    "text": "Preuve (sans perte de DF)"
  },
  {
    "objectID": "slides/SQL_0.html#un-peu-de-formalisation",
    "href": "slides/SQL_0.html#un-peu-de-formalisation",
    "title": "BD I: Algèbre Relationnelle",
    "section": "Un peu de formalisation",
    "text": "Un peu de formalisation\nRappel sur la notion de relation (au sens classique)\n\n\n\n\n\n\nDefinition : Domaine\n\n\nUn ensemble d’éléments\n\n\n\nExemples : entiers, flottants, chaines de caractères, date, …\nLes types d’un langage de programmation comme C, Java, …"
  },
  {
    "objectID": "slides/SQL_0.html#remarque",
    "href": "slides/SQL_0.html#remarque",
    "title": "BD I: Algèbre Relationnelle",
    "section": "Remarque",
    "text": "Remarque\n\n\nUn domaine peut se définir\n\nen extension (en donnant la liste de toutes les valeurs possibles) ou\nen intention (en donnant une propriété caractéristique)."
  },
  {
    "objectID": "slides/SQL_0.html#produit-cartésien",
    "href": "slides/SQL_0.html#produit-cartésien",
    "title": "BD I: Algèbre Relationnelle",
    "section": "Produit cartésien",
    "text": "Produit cartésien\n\n\n\n\n\n\nDéfinition\n\n\nLe Produit cartésien d’une liste de domaines \\(D_1, D_2, \\dots, D_k\\), noté\n\\[D_1 \\times D_2 \\times \\dots \\times D_k\\]\nest l’ensemble\n\\[\\Bigl\\{(t_1,t_2,\\dots,t_k);\\ t_i\\in D_i \\text{ pour } i=1,\\dots,k\\Bigr\\}\\]\nUn élément \\(t=(t_1,t_2,\\dots,t_k)\\in D_1 \\times D_2 \\times \\dots \\times  D_k\\) est appelé \\(k\\) -uplet"
  },
  {
    "objectID": "slides/SQL_0.html#relations-classiques",
    "href": "slides/SQL_0.html#relations-classiques",
    "title": "BD I: Algèbre Relationnelle",
    "section": "Relations (classiques)",
    "text": "Relations (classiques)\nUne Relation \\(R\\) est un sous-ensemble de\n\\[D_1\\times D_2\\times \\cdots \\times D_k\\]\noù \\(D_1,...,D_k\\) sont des domaines\n\\[R\\subset D_1  \\times D_2\\times \\cdots \\times D_k\\]"
  },
  {
    "objectID": "slides/SQL_0.html#exemple",
    "href": "slides/SQL_0.html#exemple",
    "title": "BD I: Algèbre Relationnelle",
    "section": "Exemple",
    "text": "Exemple\n\n\nDeux domaines\n\\[D_1=\\left\\{1,2,5\\right\\} \\quad D_2=\\left\\{2,4\\right\\}\\]\nUn produit cartésien\n\\[D_1 \\times D_2 =\n\\left\\{(1,2),(1,4),(2,2),(2,4),(5,2),(5,4)\\right\\}\\]\nUne relation\n\\[R =\\left\\{(1,2),(1,4),(5,2),(5,4)\\right\\}\\]\nUne relation est un (sous-) ensemble (d’un produit cartésien)\n\nOn peut représenter \\(R\\) par le tableau :\n\n\n\\(X_1\\)\n\\(X_2\\)\n\n\n\n1\n2\n\n\n1\n4\n\n\n5\n2\n\n\n5\n4\n\n\n\nChaque ligne de la table correspond à un élément de la relation \\(R\\)"
  },
  {
    "objectID": "slides/SQL_0.html#relations-classiques-1",
    "href": "slides/SQL_0.html#relations-classiques-1",
    "title": "BD I: Algèbre Relationnelle",
    "section": "Relations (classiques)",
    "text": "Relations (classiques)\nDans ce cours, toutes les relations ont un nombre fini d’éléments !"
  },
  {
    "objectID": "slides/SQL_0.html#cardinalité-de-la-relation-r-r",
    "href": "slides/SQL_0.html#cardinalité-de-la-relation-r-r",
    "title": "BD I: Algèbre Relationnelle",
    "section": "\nCardinalité de la relation \\(R\\): \\(|R|\\)\n",
    "text": "Cardinalité de la relation \\(R\\): \\(|R|\\)\n\nOn appelle cardinalité d’une relation \\(R\\), notée \\(|R|\\), le nombre d’éléments de \\(R\\)."
  },
  {
    "objectID": "slides/SQL_0.html#arité-de-la-relation-r",
    "href": "slides/SQL_0.html#arité-de-la-relation-r",
    "title": "BD I: Algèbre Relationnelle",
    "section": "\nArité de la relation \\(R\\)\n",
    "text": "Arité de la relation \\(R\\)\n\nSoit \\(R\\subset D_1\\times D_2\\times \\cdots \\times D_k\\), l’entier \\(k\\) est appelé arité de \\(R\\).\nOn parle parfois aussi de degré d’une relation.\nUne relation binaire est une relation d’arité \\(2\\)"
  },
  {
    "objectID": "slides/SQL_0.html#relations-et-schémas",
    "href": "slides/SQL_0.html#relations-et-schémas",
    "title": "BD I: Algèbre Relationnelle",
    "section": "Relations et schémas",
    "text": "Relations et schémas\n\nUne relation (au sens classique) peut se voir comme une table à deux dimensions :\nchaque ligne correspond alors à un \\(k\\)-uplet (si la relation est d’arité \\(k\\)),\nchaque élément d’une colonne est à valeur dans un domaine.\nUn domaine peut apparaître plusieurs fois dans la définition d’une relation.\n\n\nEn BD relationnelle, on veut pouvoir donner un nom à chaque colonne\n\n\nAttribut: nom/rôle de la colonne. Précise la sémantique de celle-ci.\n\n Pas deux attributs identiques dans une même table\n\n\n\n\n\n\nNote\n\n\nL’idée de nommer les colonnes plutôt que de les désigner par une position/un numéro se retrouve dans les sytèmes qui manipulent des données tabulaires (Pandas/Python, R, Spark, …)."
  },
  {
    "objectID": "slides/SQL_0.html#schéma-dune-relation",
    "href": "slides/SQL_0.html#schéma-dune-relation",
    "title": "BD I: Algèbre Relationnelle",
    "section": "Schéma d’une relation",
    "text": "Schéma d’une relation\n\n\n\n\n\n\nDéfinition\n\n\nLe Schéma d’une relation \\(R\\) est la donnée des attributs et domaines de la relation\n\n\n\nLe schéma peut se noter\n\\[R(A_1\\! :\\!\nD_1,A_2\\! :\\! D_2,\\dots,A_k\\! :\\! D_k)\\]\noù \\(A_i\\) : attribut et \\(D_i\\) : domaine."
  },
  {
    "objectID": "slides/SQL_0.html#exemple-de-schéma",
    "href": "slides/SQL_0.html#exemple-de-schéma",
    "title": "BD I: Algèbre Relationnelle",
    "section": "Exemple de schéma",
    "text": "Exemple de schéma\nville : ensemble de chaînes de caractères (noms de villes).\nheure : ensemble de chaînes de caractères de la forme \\(XYhZT\\) où \\(X,Y,Z,T\\) sont des chiffres\nEn notation ISO une heure s’écrit ‘HH:MM:SS’ (s’ on oublie le fuseau horaire) 2024-06-27 19:56:09.688513\n\n\nh-dep\ndest\nh-arr\nprov\n\n\n\n13h15\nLyon\n15h15\nParis\n\n\n13h22\nNantes\n15h30\nParis\n\n\n\nSchéma: Train(h-dep:heure, dest:ville , h-arr:heure , prov:ville)\nArité : \\(4\\), Cardinalité : \\(2\\)\nL’ordre (des lignes ou colonnes) n’a pas vraiment d’importance"
  },
  {
    "objectID": "slides/SQL_0.html#formalisation-alternative",
    "href": "slides/SQL_0.html#formalisation-alternative",
    "title": "BD I: Algèbre Relationnelle",
    "section": "Formalisation alternative",
    "text": "Formalisation alternative\n\nEn BD, l’ordre des éléments et l’ordre des colonnes n’a pas d’importance (on désigne les membres d’un \\(k\\)-uplet par leur nom plutôt que par leur position/rang)\nLa définition formelle diffère donc de celle d’une relation classique\nSoient \\(\\{A_1,...,A_k\\}\\) un ensemble fini et \\(D_1,...,D_k\\) suite de domaines.\n\n\n\n\n\n\n\nNotation\n\n\nUne relation \\(R\\) de schéma \\(R(A_1\\! :\\! D_1,A_2\\! :\\! D_2,\\dots,A_k\\! :\\! D_k)\\) est la donnée d’un ensemble d’éléments, noté \\(\\mathcal{R}\\) et de \\(k\\) fonctions \\(\\mathcal{A}_1: \\mathcal{R}\\rightarrow D_1\\), …, \\(\\mathcal{A}_k: \\mathcal{R}\\rightarrow D_k\\).\nPour tout \\(t\\in \\mathcal{R}\\) et \\(i\\leq k\\), on note \\(t.A_i=\\mathcal{A}_i(t)\\) l’image par \\(\\mathcal{A}_i\\) de \\(t\\).\nUn élément \\(t\\) de \\(\\mathcal{R}\\) est appelé tuple de la relation \\(R\\)"
  },
  {
    "objectID": "slides/SQL_0.html#relations-et-schémas-formalisation",
    "href": "slides/SQL_0.html#relations-et-schémas-formalisation",
    "title": "BD I: Algèbre Relationnelle",
    "section": "Relations et schémas : formalisation",
    "text": "Relations et schémas : formalisation\nLa relation {Train}(h-dep:*heure*, dest:*ville* , harr:*heure* , prov:*ville*)\n\n\n\n\n\n\n\n\nhdep\ndest\nharr\nprov\n\n\n\n13h15\nLyon\n15h15\nParis\n\n\n13h22\nNantes\n15h30\nParis\n\n\n\nest constituée de deux tuples \\(e_1\\), \\(e_2\\) avec :\n\n\n\\(e_1.\\textrm{hdep}=\\textrm{'13h15'}\\),\n\n\\(e_1.\\textrm{dest}=\\textrm{'Lyon'}\\),\n\n\\(e_1.\\textrm{harr}=\\textrm{'15h15'}\\),\n\\(e_1.\\textrm{prov}=\\textrm{'Paris'}\\)"
  },
  {
    "objectID": "slides/SQL_0.html#résumé-informel",
    "href": "slides/SQL_0.html#résumé-informel",
    "title": "BD I: Algèbre Relationnelle",
    "section": "Résumé informel",
    "text": "Résumé informel\n\nRELATION = TABLE A DEUX DIMENSIONS\n(NOM DE) COLONNE = ATTRIBUT\nEN-TÊTE DU TABLEAU = SCHEMA DE LA RELATION\nLIGNE = TUPLE\nENSEMBLE DES LIGNES = CONTENU DE LA RELATION"
  },
  {
    "objectID": "slides/SQL_0.html#opérateurs-de-base",
    "href": "slides/SQL_0.html#opérateurs-de-base",
    "title": "BD I: Algèbre Relationnelle",
    "section": "Opérateurs de base",
    "text": "Opérateurs de base\n\n\n\n\n\n\nListe des opérateurs\n\n\nL’algèbre relationnelle est d’abord un *Langage de Manipulation de Données& (LMD)}.\n\nUnion: \\(\\Large{\\cup}\\)\nIntersection: \\(\\Large{\\cap}\\)\nDifférence: \\(\\Large{\\backslash}\\)\nProjection: \\(\\Large{\\Pi}\\)\nSélection: \\(\\Large{\\sigma}\\)\nProduit cartésien: \\(\\Large{\\times}\\)\nRenommage: \\(\\Large{\\rho}\\)\n\ns’appliquent à des relations pour produire d’autres relations (le résultat)."
  },
  {
    "objectID": "slides/SQL_0.html#union-cup-et-intersection-cap",
    "href": "slides/SQL_0.html#union-cup-et-intersection-cap",
    "title": "BD I: Algèbre Relationnelle",
    "section": "Union \\(\\cup\\) et intersection \\(\\cap\\)\n",
    "text": "Union \\(\\cup\\) et intersection \\(\\cap\\)\n\n\n\n\n\n\n\nDéfinition\n\n\n\nL’union et l’intersection sont des opérations portant sur deux relations \\(R_1\\) et \\(R_2\\) de même schéma\n\\(T=R_1\\cup R_2\\) est constituée des tuples appartenant à \\(R_1\\) ou à \\(R_2\\).\n\\(T=R_1\\cap R_2\\) est constituée des tuples appartenant à \\(R_1\\) et à \\(R_2\\).\nSchémas de \\(R_1\\cup R_2\\), \\(R_1\\cap R_2\\) sont les mêmes que ceux de \\(R_1\\) et \\(R_2\\)"
  },
  {
    "objectID": "slides/SQL_0.html#union-et-intersection",
    "href": "slides/SQL_0.html#union-et-intersection",
    "title": "BD I: Algèbre Relationnelle",
    "section": "Union et intersection",
    "text": "Union et intersection"
  },
  {
    "objectID": "slides/SQL_0.html#exemple-1",
    "href": "slides/SQL_0.html#exemple-1",
    "title": "BD I: Algèbre Relationnelle",
    "section": "Exemple",
    "text": "Exemple\n\n\nTrain 1\n\n\nh-dep\ndest\nnum\n\n\n\n13h15\nLyon\n213\n\n\n13h29\nMarseille\n1024\n\n\n14h15\nLyon\n214\n\n\n\nTrain 2\n\n\nh-dep\ndest\nnum\n\n\n\n13h39\nAvignon\n43\n\n\n14h15\nLyon\n214\n\n\n\n\nTrain 1 \\(\\cup\\) Train 2\n\n\nh-dep\ndest\nnum\n\n\n\n13h15\nLyon\n213\n\n\n13h29\nMarseille\n1024\n\n\n14h15\nLyon\n214\n\n\n13h39\nAvignon\n43\n\n\n\nTrain 1 \\(\\cap\\) Train 2\n\n\nh-dep\ndest\nnum\n\n\n14h15\nLyon\n214"
  },
  {
    "objectID": "slides/SQL_0.html#différence",
    "href": "slides/SQL_0.html#différence",
    "title": "BD I: Algèbre Relationnelle",
    "section": "Différence",
    "text": "Différence\n\n\n\n\n\n\nDéfinition\n\n\n\nLa différence de deux relations \\(R_1\\) et \\(R_2\\) (de même schéma) est une relation \\(T\\)\nde même schéma que \\(R_1\\) et \\(R_2\\)\nconstituée des tuples appartenant à \\(R_1\\) et n’appartenant pas à \\(R_2\\).\nOn note \\(T = R_1 - R_2\\).\n\n\n\n\nOpération non commutative : \\(R_1 - R_2\\neq  R_2 - R_1\\) (en général)."
  },
  {
    "objectID": "slides/SQL_0.html#différence-exemple",
    "href": "slides/SQL_0.html#différence-exemple",
    "title": "BD I: Algèbre Relationnelle",
    "section": "Différence : exemple",
    "text": "Différence : exemple\n\n\nTrain 1\n\n\nh-dep\ndest\nnum\n\n\n\n13h15\nLyon\n213\n\n\n13h29\nMarseille\n1024\n\n\n14h15\nLyon\n214\n\n\n\nTrain 2\n\n\nh-dep\ndest\nnum\n\n\n\n13h39\nAvignon\n43\n\n\n14h15\nLyon\n214\n\n\n\n\nTrain 1 \\(\\backslash\\) Train 2\n\n\nh-dep\ndest\nnum\n\n\n\n13h15\nLyon\n213\n\n\n13h29\nMarseille\n1024"
  },
  {
    "objectID": "slides/SQL_0.html#produit-cartésien-1",
    "href": "slides/SQL_0.html#produit-cartésien-1",
    "title": "BD I: Algèbre Relationnelle",
    "section": "Produit Cartésien",
    "text": "Produit Cartésien\n\n\n\n\n\n\nDéfinition\n\n\n\n\nSoient:\n\n\n\\(R_1\\) de schéma \\(R_1(A_1,A_2,...,A_k)\\)\n\n\n\\(R_2\\) de schéma \\(R_2(B_1,B_2,...,B_\\ell)\\)\n\navec \\(A_i\\neq B_j\\), pour tout \\(i=1,...,k\\), \\(j=1,..,\\ell\\)\n\n\n\nDans le contexte “classique” : \\(R_1 \\times R_2= \\{(e_1,e_2): e_1\\in R_1, e_2\\in R_2\\}\\)\n\\(R=R_1 \\times R_2\\) de schéma \\(R(A_1,A_2,...,A_k,B_1,B_2,...,B_\\ell)\\). Le schéma de \\(R\\) est .red[l’union] des schémas de \\(R_1\\) et \\(R_2\\)\n\n\n\n\n\n\n\n\n\n\nCaution\n\n\nEn algèbre relationnelle, cette opération est commutative ( \\(R_1\\times R_2 = R_2\\times R_1\\) ) et associative"
  },
  {
    "objectID": "slides/SQL_0.html#produit-cartésien-2",
    "href": "slides/SQL_0.html#produit-cartésien-2",
    "title": "BD I: Algèbre Relationnelle",
    "section": "Produit cartésien :",
    "text": "Produit cartésien :\n\n\n\n\n\n\nDéfinition formelle\n\n\n\\(R=R_1\\times R_2\\) est la relation de schéma \\(R(A_1,A_2,...,A_k,B_1,B_2,...,B_\\ell)\\) vérifiant~:\n\nPour tout \\(t\\in R\\), il existe \\(t_1\\in R_1\\), \\(t_2\\in R_2\\) tels que :\n\n\\[t.A_1=t_1.A_1, \\ldots, t.A_k=t_1.A_k,\\quad t.B_1=t_2.B_1, \\ldots, t.B_\\ell=t_2.B_\\ell\\]\n\nRéciproquement, pour tout \\(t_1\\in R_1\\), \\(t_2\\in R_2\\) , il existe \\(t\\in R\\) tels que :\n\n\\[t.A_1=t_1.A_1, \\ldots, t.A_k=t_1.A_k,\\quad t.B_1=t_2.B_1, \\ldots, t.B_\\ell=t_2.B_\\ell\\]"
  },
  {
    "objectID": "slides/SQL_0.html#produit-cartésien-exemple",
    "href": "slides/SQL_0.html#produit-cartésien-exemple",
    "title": "BD I: Algèbre Relationnelle",
    "section": "Produit cartésien : exemple",
    "text": "Produit cartésien : exemple\nTrain 1 \\(\\times\\) Train 2\n\n\n\n\n\n\n\n\n\n\nh-dep(1)\ndest(1)\nnum(1)\nh-dep(2)\ndest(2)\nnum(2)\n\n\n\n13h15\nLyon\n213\n13h39\nAvignon\n43\n\n\n13h15\nLyon\n213\n14h15\nLyon\n214\n\n\n13h29\nMarseille\n1024\n13h39\nAvignon\n43\n\n\n13h29\nMarseille\n1024\n14h15\nLyon\n214\n\n\n14h15\nLyon\n214\n13h39\nAvignon\n43\n\n\n14h15\nLyon\n214\n14h15\nLyon\n214"
  },
  {
    "objectID": "slides/SQL_0.html#projection-largepi",
    "href": "slides/SQL_0.html#projection-largepi",
    "title": "BD I: Algèbre Relationnelle",
    "section": "Projection ( \\(\\Large{\\pi}\\) )",
    "text": "Projection ( \\(\\Large{\\pi}\\) )\n\n\n\n\n\n\nDéfinition\n\n\n\nLa projection d’une relation \\(R\\) de schéma \\(R(A_1,\\dots, A_k)\\) sur les attributs \\(A_{i_1}, \\dots, A_{i_p}\\), \\(i_1,..., i_p\\in \\{1,...,k\\}\\), est la relation \\(S\\)\nde schéma \\(S(A_{i_1}, \\dots,A_{i_p})\\)\ndont les tuples sont obtenus par élimination des attributs non mentionnés dans \\(A_{i_1}, \\dots, A_{i_p}\\) (et par élimination des doublons).\nOn note \\(S = \\pi_{A_{i_1}, \\dots, A_{i_p}} (R)\\).\nDéfinition formelle :\n\n\\[s\\in S\\quad  \\iff \\quad \\exists t\\in R\\ \\forall n\\in\\left\\{1,\\dots,p\\right\\}\\ s.A_{i_n}=t.A_{i_n}\\]\n\n\n\nÉlimination des doublons car une projection peut produire plusieurs fois le même tuple."
  },
  {
    "objectID": "slides/SQL_0.html#projection-exemple",
    "href": "slides/SQL_0.html#projection-exemple",
    "title": "BD I: Algèbre Relationnelle",
    "section": "Projection : Exemple",
    "text": "Projection : Exemple\n\\(\\Large{\\Pi_{\\text{dest, num}}(\\text{Train})}\\)\n\n\ndest\nnum\n\n\n\nLyon\n213\n\n\nMarseille\n1024\n\n\nLyon\n214"
  },
  {
    "objectID": "slides/SQL_0.html#sélection-largesigma",
    "href": "slides/SQL_0.html#sélection-largesigma",
    "title": "BD I: Algèbre Relationnelle",
    "section": "Sélection ( \\(\\Large{\\sigma}\\) )",
    "text": "Sélection ( \\(\\Large{\\sigma}\\) )\n\n\n\n\n\n\nDéfinition\n\n\n\n\nLa sélection d’une relation \\(R\\) par une condition \\(C\\) est une relation \\(S\\)\n\nde même schéma que \\(R\\)\ndont les tuples sont ceux de \\(R\\) qui satisfont la condition \\(C\\).\n\n\nOn note \\(S = \\sigma_C (R)\\).\n\nLa condition \\(C\\)\n\ns’exprime à l’aide des noms d’attributs de la relation ou de constantes (pour les opérandes)\non peut utiliser des opérateurs arithmétiques de comparaison ( \\(=, \\neq, \\leq, \\geq, &lt;, &gt;\\) ) ainsi que des connecteurs logiques ( \\(\\lnot, \\land, \\lor\\) ).."
  },
  {
    "objectID": "slides/SQL_0.html#sélection-exemple",
    "href": "slides/SQL_0.html#sélection-exemple",
    "title": "BD I: Algèbre Relationnelle",
    "section": "Sélection : Exemple",
    "text": "Sélection : Exemple\n\\(\\Large{\\sigma_{\\text{dest}=\\text{'Lyon'}} \\text{Train 1}}\\)\n\n\nh-dep\ndest\nnum\n\n\n\n13h15\nLyon\n213\n\n\n14h15\nLyon\n214\n\n\n\n\\(\\Large{\\sigma_{\\text{dest}=\\text{'Lyon'} \\wedge \\text{hdep} &gt; 14h} \\text{Train 1}}\\)\n\n\nh-dep\ndest\nnum\n\n\n14h15\nLyon\n214"
  },
  {
    "objectID": "slides/SQL_0.html#renommage",
    "href": "slides/SQL_0.html#renommage",
    "title": "BD I: Algèbre Relationnelle",
    "section": "Renommage",
    "text": "Renommage\n\n\n\n\n\n\nDéfinition\n\n\n\nSoit \\(R\\) de schéma \\(R(A_1,\\dots, A_k)\\), le renommage d’un attribut \\(A_i\\), \\(i\\leq k\\), en \\(B\\) est une relation \\(S\\) :\nde même contenu\nde schéma \\(S(A_1,...,A_{i-1},B,A_{i+1},..., A_k)\\)\nOn le note \\(S=\\rho_{A_i\\mapsto B}(R)\\)"
  },
  {
    "objectID": "slides/SQL_0.html#exemple-2",
    "href": "slides/SQL_0.html#exemple-2",
    "title": "BD I: Algèbre Relationnelle",
    "section": "Exemple",
    "text": "Exemple\nTrain :\n\n\nh-dep\ndest\nnum\n\n\n\n13h15\nLyon\n213\n\n\n13h29\nMarseille\n1024\n\n\n14h15\nLyon\n214\n\n\n\n\\[\\rho_{\\text{num}\\mapsto \\text{numero}}(\\text{Train})\\]\n\n\nh-dep\ndest\nnumero\n\n\n\n13h15\nLyon\n213\n\n\n13h29\nMarseille\n1024\n\n\n14h15\nLyon\n214\n\n\n\nUtilité Va permettre d’étendre certains opérateurs pour des relations de schémas non-disjoints"
  },
  {
    "objectID": "slides/SQL_0.html#algèbre-relationnelle",
    "href": "slides/SQL_0.html#algèbre-relationnelle",
    "title": "BD I: Algèbre Relationnelle",
    "section": "Algèbre relationnelle",
    "text": "Algèbre relationnelle\n\nOpérations ensemblistes classiques.\nProjection : élimine des colonnes\nSélection : élimine des lignes\n\nPour interroger une BD, on compose ces opérateurs :"
  },
  {
    "objectID": "slides/SQL_0.html#exemple-3",
    "href": "slides/SQL_0.html#exemple-3",
    "title": "BD I: Algèbre Relationnelle",
    "section": "Exemple",
    "text": "Exemple\n\\(\\pi_{num}(\\sigma_{dest='Lyon'}(Train))\\)\nNuméro des trains dont la ville de destination est ‘Lyon’."
  },
  {
    "objectID": "slides/SQL_0.html#les-jointures",
    "href": "slides/SQL_0.html#les-jointures",
    "title": "BD I: Algèbre Relationnelle",
    "section": "Les jointures",
    "text": "Les jointures\nOn va définir des opérations pratiques pour la manipulation de données~: les jointures\n\nJointure\nJointure naturelle\n\\(\\theta\\)-jointure et équi-jointure"
  },
  {
    "objectID": "slides/SQL_0.html#jointure",
    "href": "slides/SQL_0.html#jointure",
    "title": "BD I: Algèbre Relationnelle",
    "section": "Jointure",
    "text": "Jointure\n\n\n\n\n\n\nDéfinition\n\n\nLa jointure \\(T=R_1\\bowtie_C R_2\\) de deux relations \\(R_1\\) et \\(R_2\\) de schémas disjoints sous la condition \\(C\\) est la relation \\(T\\):\n\nde schéma la concaténation des schémas de \\(R_1\\) et \\(R_2\\)\nformée des tuples du produit cartésien \\(R_1  \\times R_2\\) qui satisfont la condition \\(C\\)\n\nRègles de formation de la condition de jointure : comme pour la sélection\n\n\n\n\n\n\n\n\n\nDéfinition formelle\n\n\n\\[R_1 \\bowtie_C R_2 = \\sigma_C(R_1\\times R_2)\\]"
  },
  {
    "objectID": "slides/SQL_0.html#exemple-4",
    "href": "slides/SQL_0.html#exemple-4",
    "title": "BD I: Algèbre Relationnelle",
    "section": "Exemple",
    "text": "Exemple\nTrDep\n\n\nhdep\ndest\nnumdep\n\n\n\n13h15\nLyon\n213\n\n\n13h29\nMarseille\n1024\n\n\n\nTrArr\n\n\nharr\nprov\nnumarr\n\n\n\n13h39\nAvignon\n43\n\n\n15h15\nParis\n213\n\n\n\n\\(\\texttt{TrDep} \\bowtie_{\\text{numdep} &gt; \\text{numar}} \\texttt{TrArr}\\)\n\n\n\n\n\n\n\n\n\n\nhdep\ndest\nnumdep\nharr\nprov\nnumarr\n\n\n\n13h15\nLyon\n213\n13h39\nAvignon\n43\n\n\n13h29\nMarseille\n1024\n13h39\nAvignon\n43\n\n\n13h29\nMarseille\n1024\n15h15\nParis\n213"
  },
  {
    "objectID": "slides/SQL_0.html#équi-jointure-theta-jointure",
    "href": "slides/SQL_0.html#équi-jointure-theta-jointure",
    "title": "BD I: Algèbre Relationnelle",
    "section": "Équi-jointure, \\(\\theta\\)-jointure",
    "text": "Équi-jointure, \\(\\theta\\)-jointure\n\n\n\n\n\n\nÉqui-jointure\n\n\nJointure avec égalité entre attributs de types comparables\n\n\n\n\\[\\texttt{TrDep} \\bowtie_{\\text{numdep} = \\text{numarr}} \\texttt{TrArr}\\]\n\n\n\n\n\n\n\n\n\n\nhdep\ndest\nnumdep\nharr\nprov\nnumarr\n\n\n13h15\nLyon\n213\n15h15\nParis\n213\n\n\n\n\n\n\n\n\n\n\\(\\theta\\)-jointure\n\n\nCondition de jointure entre attributs de types comparables et avec un opérateur différent de l’égalité, c’est-à-dire dans \\(\\left\\{&lt;,&gt;,\\leq,\\geq, \\neq\\right\\}\\).\n\\[\\text{TrDep} \\bowtie_{\\text{numdep} &gt; \\text{numarr}} \\text{TrArr}\\]"
  },
  {
    "objectID": "slides/SQL_0.html#jointure-naturelle",
    "href": "slides/SQL_0.html#jointure-naturelle",
    "title": "BD I: Algèbre Relationnelle",
    "section": "Jointure naturelle",
    "text": "Jointure naturelle\n\n\n\n\n\n\nDéfinition\n\n\nC’est une équi-jointure concernant les attributs communs (même nom et même type) de deux relations\nOn ne garde dans le résultat qu’une copie des attributs communs \n\n\n\nOn considère\n\n\\(R_1\\) d’attributs \\(A_1,..,A_k,B_1,...,B_h\\)\n\\(R_2\\) d’attributs \\(A_1,..,A_k,B_{h+1},...,B_\\ell\\)\n\\(A_1,..., A_k\\) : attributs communs et \\(\\{B_1,...,B_h\\}\\cap \\{ B_{h+1},...,B_\\ell \\}=\\emptyset\\)\nSoit \\(A'_1, ...., A'_k\\) tels que \\(\\{A_1,..., A_k\\}\\cap \\{ A'_1, ...., A'_k \\}=\\emptyset\\)"
  },
  {
    "objectID": "slides/SQL_0.html#jointure-naturelle-formalisation",
    "href": "slides/SQL_0.html#jointure-naturelle-formalisation",
    "title": "BD I: Algèbre Relationnelle",
    "section": "Jointure naturelle (formalisation)",
    "text": "Jointure naturelle (formalisation)\nConsidérons \\(S\\) d’attributs \\(A_1',..,A_k',B_{h+1},...,B_l\\) définie par :\n\\[S=\\rho_{A_1\\mapsto A_1'}(\\rho_{A_2\\mapsto A_2'}(\\cdots (\\rho_{A_k\\mapsto A_k'}(R_2)\\cdots ))\\]\nLa jointure naturelle sur deux relations \\(R_1\\) et \\(R_2\\) est la relation\n\nd’attributs \\(A_1,..,A_k,B_1,...,B_h, B_{h+1},...,B_\\ell\\)\ndéfinie par :\n\n\\[\\pi_{A_1,..,A_k,B_1,...,B_h, B_{h+1},...,B_\\ell}(R_1\\bowtie_{C} S)\\]\noù \\(C\\) est \\((A_1=A_1') \\wedge (A_2=A'_2) \\wedge \\ldots \\wedge (A_k=A_k')\\)\n on réalise une équi-jointure sur tous les attributs communs et on ne garde qu’un seul “exemplaire” de ces attributs communs par projection.\nOn note cette opération : \\(R_1 \\bowtie R_2\\).\n\nPour éviter le renommage, on peut décider de préfixer les noms des attributs par ceux de la relation. La condition \\(C\\) devient :\n\\[(R_1.A_1=R_2.A_1) \\wedge \\ldots \\wedge (R_1.A_k=R_2.A_k)\\]"
  },
  {
    "objectID": "slides/SQL_0.html#exemple-de-jointure-naturelle",
    "href": "slides/SQL_0.html#exemple-de-jointure-naturelle",
    "title": "BD I: Algèbre Relationnelle",
    "section": "Exemple de Jointure naturelle",
    "text": "Exemple de Jointure naturelle\n\n\nTrDep\n\n\nhdep\ndest\nnum\n\n\n\n13h15\nLyon\n213\n\n\n13h29\nMarseille\n1024\n\n\n\nTrArr\n\n\nharr\nprov\nnum\n\n\n\n13h39\nAvignon\n43\n\n\n15h15\nParis\n213\n\n\n\n\n\\[\\text{TrDep} \\bowtie \\text{TrArr}\\]\n\n\n\n\n\n\n\n\n\nhdep\ndest\nnum\nharr\nprov\n\n\n13h15\nLyon\n213\n15h15\nParis"
  },
  {
    "objectID": "slides/SQL_0.html#exemples-de-requêtes",
    "href": "slides/SQL_0.html#exemples-de-requêtes",
    "title": "BD I: Algèbre Relationnelle",
    "section": "Exemples de requêtes",
    "text": "Exemples de requêtes\nBase constituée des trois tables suivantes:\nfournisseurs(fno, nom, adresse, ville)\nproduits(pno, design, prix, poids, couleur)\ncommandes(cno, fno, pno, qte)"
  },
  {
    "objectID": "slides/SQL_0.html#exemples-de-requêtes-suite",
    "href": "slides/SQL_0.html#exemples-de-requêtes-suite",
    "title": "BD I: Algèbre Relationnelle",
    "section": "Exemples de requêtes (suite)",
    "text": "Exemples de requêtes (suite)\n\ndéterminer les numéros des fournisseurs ayant comme nom “Durand”\n\n\\[\\pi_{\\text{fno}} \\bigl( \\sigma_{\\text{nom}=\\text{'Durand'}} (\\text{fournisseurs})\\bigr)\\]\n\ndéterminer les références, prix et quantités des produits commandés à plus de 10 exemplaires.\n\n\\[\\pi_{\\text{pno,prix,qte}} \\bigl( \\sigma_{\\text{qte}&gt;10} (\\text{commandes} \\bowtie \\text{produits})\\bigr)\\]"
  },
  {
    "objectID": "slides/SQL_0.html#jointure-externe",
    "href": "slides/SQL_0.html#jointure-externe",
    "title": "BD I: Algèbre Relationnelle",
    "section": "Jointure externe",
    "text": "Jointure externe\n\n\n\n\n\n\nPerte d’information dans jointure naturelle\n\n\nLes tuples ne satisfaisant pas la condition (non appariés) disparaissent\n\n\n\n\n\n\n\n\n\nDéfinition\n\n\n\nOn ajoute symboliquement” une ligne dont les valeurs sont vides (ou avec valeur spéciale NULL) pour garder les tuples initiaux “non satisfaisants” après la jointure\nOn note cette opération entre deux relations \\(R\\) et \\(S\\) :\n\\[R \\bowtie^+ S\\]"
  },
  {
    "objectID": "slides/SQL_0.html#jointure-externe-exemple",
    "href": "slides/SQL_0.html#jointure-externe-exemple",
    "title": "BD I: Algèbre Relationnelle",
    "section": "Jointure externe (exemple)",
    "text": "Jointure externe (exemple)\n\n\nTrDep\n\n\nhdep\ndest\nnum\n\n\n\n13h15\nLyon\n213\n\n\n13h29\nMarseille\n1024\n\n\n\nTrArr\n\n\nharr\nprov\nnum\n\n\n\n13h39\nAvignon\n43\n\n\n15h15\nParis\n213\n\n\n\n\n\\[\\text{TrDep} \\bowtie^+ \\text{TrArr}\\]\n\n\n\n\n\n\n\n\n\nhdep\ndest\nnum\nharr\nprov\n\n\n\n13h15\nLyon\n213\n15h15\nParis\n\n\n13h29\nMarseille\n1024\n-\n-\n\n\n-\n-\n43\n13h39\nAvignon"
  },
  {
    "objectID": "slides/SQL_0.html#division",
    "href": "slides/SQL_0.html#division",
    "title": "BD I: Algèbre Relationnelle",
    "section": "Division",
    "text": "Division\n\n\n\n\n\n\nDéfinition\n\n\nLa division ou quotient\n\nd’une relation \\(R\\) de schéma \\(R(A_1,A_2,\\dots,A_k)\\)\npar une relation \\(S\\) de schéma \\(S(A_{p+1},\\dots ,A_k)\\)\n\nest la relation \\(T\\) de schéma \\(T(A_1, \\dots, A_p)\\) formée des tuples qui complétés par chaque tuple de \\(S\\) donnent un tuple de \\(R\\).\nAutrement dit\n\\[\\begin{array}{l} t\\in T(A_1,\\dots,A_p)  \\quad \\Longleftrightarrow \\\\\n\\forall s\\in S(A_{p+1},\\dots ,A_k) \\quad \\exists r\\in R \\quad \\begin{cases}\nt.A_1=r.A_1, \\dots, t.A_p=r.A_p\\\\ s.A_{p+1}=r.A_{p+1},\\dots, s.A_{k}=r.A_{k} \\end{cases} \\end{array}\\]\nOn note \\[T = R \\div S\\]"
  },
  {
    "objectID": "slides/SQL_0.html#division-exemple",
    "href": "slides/SQL_0.html#division-exemple",
    "title": "BD I: Algèbre Relationnelle",
    "section": "Division (exemple)",
    "text": "Division (exemple)\n\n\nVoyage : contient pour chaque numéro de client la ville de départ et d’arrivée des voyages qu’il a effectué\n\n\nnumclient\nvdep\nvarr\n\n\n\n1\nParis\nMarseille\n\n\n3\nMarseille\nLyon\n\n\n1\nParis\nNantes\n\n\n5\nMarseille\nAvignon\n\n\n4\nParis\nNantes\n\n\n3\nParis\nMarseille\n\n\n2\nCaen\nLe Mans\n\n\n3\nParis\nNantes\n\n\n\n\nVilles contient des couples villes de départ/villes d’arrivée\n\n\nvdep\nvarr\n\n\n\nParis\nMarseille\n\n\nParis\nNantes"
  },
  {
    "objectID": "slides/SQL_0.html#division-exemple-suite",
    "href": "slides/SQL_0.html#division-exemple-suite",
    "title": "BD I: Algèbre Relationnelle",
    "section": "Division (exemple, suite)",
    "text": "Division (exemple, suite)\n\\[\\texttt{Voyage} \\div \\texttt{Villes}\\]\n\n\nnumclient\n\n\n\n1\n\n\n3\n\n\n\nRésultat : numéros des clients ayant effectué tous les voyages entre les villes de la table Villes (i.e. à la fois un Paris-Marseille et un Paris-Nantes.)"
  },
  {
    "objectID": "slides/SQL_0.html#interdéfinissabilité-des-opérateurs",
    "href": "slides/SQL_0.html#interdéfinissabilité-des-opérateurs",
    "title": "BD I: Algèbre Relationnelle",
    "section": "Interdéfinissabilité des opérateurs",
    "text": "Interdéfinissabilité des opérateurs\n\nL’union, la différence, le produit cartésien, la sélection et la projection et le renommage sont suffisants pour définir tous les opérateurs que l’on a vu.\nMais avoir un panier plus large d’opérateurs simplifie l’écriture des requêtes.\n\nQuelques définitions\n\nPour la Jointure : \\(R \\bowtie_C S \\equiv \\sigma_C (R \\times S)\\)\nPour l’intersection : \\(A \\cap B = A \\cup B - ((B - A) \\cup (A - B))\\)"
  },
  {
    "objectID": "slides/SQL_0.html#définition-de-la-division",
    "href": "slides/SQL_0.html#définition-de-la-division",
    "title": "BD I: Algèbre Relationnelle",
    "section": "Définition de la division",
    "text": "Définition de la division\n\n\n\n\n\n\nFormalisation\n\n\nSoient \\(R\\) de schéma \\(R(A_1,A_2,\\dots,A_k)\\), \\(S\\) de schéma \\(S(A_{p+1},\\dots ,A_k)\\)\nest la relation \\(T= R \\div S\\) de schéma \\(T(A_1, \\dots, A_p)\\)."
  },
  {
    "objectID": "slides/SQL_0.html#from-wikipedia-smaller",
    "href": "slides/SQL_0.html#from-wikipedia-smaller",
    "title": "BD I: Algèbre Relationnelle",
    "section": "From Wikipedia {smaller}",
    "text": "From Wikipedia {smaller}\n\nIn the 1960s and 1970s he worked out his theories of data arrangement, issuing his paper “A Relational Model of Data for Large Shared Data Banks”[14] in 1970, after an internal IBM paper one year earlier.[15] To his disappointment, IBM proved slow to exploit his suggestions until commercial rivals started implementing them.[16]\n\n\nInitially, IBM refused to implement the relational model to preserve revenue from IMS/DB.[citation needed] Codd then showed IBM customers the potential of the implementation of its model, and they in turn pressured IBM. Then IBM included in its Future Systems project a System R subproject – but put in charge of it developers who were not thoroughly familiar with Codd’s ideas, and isolated the team from Codd.[citation needed] As a result, they did not use Codd’s own Alpha language but created a non-relational one, SEQUEL. Even so, SEQUEL was so superior to pre-relational systems that it was copied, in 1979, based on pre-launch papers presented at conferences, by Larry Ellison, of Relational Software Inc, in his Oracle Database, which actually reached market before SQL/DS – because of the then-already proprietary status of the original name, SEQUEL had been renamed SQL.\n\n\nCodd continued to develop and extend his relational model, sometimes in collaboration with Christopher J. Date. One of the normalised forms, the Boyce–Codd normal form, is named after him.\n\n\nCodd’s theorem, a result proven in his seminal work on the relational model, equates the expressive power of relational algebra and relational calculus.[14]"
  },
  {
    "objectID": "computing-troubleshooting.html",
    "href": "computing-troubleshooting.html",
    "title": "Computing troubleshooting",
    "section": "",
    "text": "If you’re having difficulty launching a dbeaver session from your reserved container, go to  and scroll down to Teaching and Learning Tools. Under this heading you’ll find an entry called Container Manager (CMGR Coursework Containers).\n\nIf the status shows something other than Operational, this means there is a known incident with the containers. Check back later to see if it’s been resolved. If there’s a deadline coming up soon, post on the course forum to let us know that there’s an issue. We can look into how quickly it might get resolved and decide on what to do about the deadline accordingly. Note: We don’t anticipate this to happen regularly, the systems are Operational a huge majority of the time!\nIf the status shows Operational, this means the system is expected to be working. Check your internet connection, if need be, restart your computer to ensure a fresh new connection. If your issue persists, post on the course forum with details on what you’ve tried and the errors you see (including verbatim errors and/or screenshots).\nEither way you can also fill out the form here, which will notify us They’ll be able to help diagnose the issue.",
    "crumbs": [
      "Computing",
      "Troubleshooting"
    ]
  },
  {
    "objectID": "cours-support.html",
    "href": "cours-support.html",
    "title": "Course support",
    "section": "",
    "text": "Posez des questions, cela aide tout le monde : les enseignants, vous, vos condisciples.",
    "crumbs": [
      "Course information",
      "Support"
    ]
  },
  {
    "objectID": "cours-support.html#cours-magistraux",
    "href": "cours-support.html#cours-magistraux",
    "title": "Course support",
    "section": "",
    "text": "Posez des questions, cela aide tout le monde : les enseignants, vous, vos condisciples.",
    "crumbs": [
      "Course information",
      "Support"
    ]
  },
  {
    "objectID": "cours-support.html#exercices",
    "href": "cours-support.html#exercices",
    "title": "Course support",
    "section": "Exercices",
    "text": "Exercices\n\nCherchez d’abord les solutions par vous même.\nLes solutions sont disponibles en ligne.\nUtilisez les aides en ligne (StackOverflow, ChatGPT, copilot, …)\nDécryptez les messages d’erreur\nPosez des questions, , cela aide tout le monde (bis)",
    "crumbs": [
      "Course information",
      "Support"
    ]
  },
  {
    "objectID": "cours-support.html#forums-moodle",
    "href": "cours-support.html#forums-moodle",
    "title": "Course support",
    "section": "Forums moodle",
    "text": "Forums moodle",
    "crumbs": [
      "Course information",
      "Support"
    ]
  },
  {
    "objectID": "cours-support.html#courriel",
    "href": "cours-support.html#courriel",
    "title": "Course support",
    "section": "Courriel",
    "text": "Courriel\nPlease refrain from emailing any course content questions (those should go Conversations, and only use email for questions about personal matters that may not be appropriate for the public course forum (e.g., illness, accommodations, etc.).\nIf there is a question that’s not appropriate for the public forum, you are welcome to email me directly. If you email me, please include “MA15Y030” in the subject line.\nResponse time may be slower for emails sent Friday evening - Sunday.",
    "crumbs": [
      "Course information",
      "Support"
    ]
  },
  {
    "objectID": "cours-support.html#soutien-académique",
    "href": "cours-support.html#soutien-académique",
    "title": "Course support",
    "section": "Soutien académique",
    "text": "Soutien académique",
    "crumbs": [
      "Course information",
      "Support"
    ]
  },
  {
    "objectID": "cours-support.html#soutien-équipement-informatique",
    "href": "cours-support.html#soutien-équipement-informatique",
    "title": "Course support",
    "section": "Soutien équipement informatique",
    "text": "Soutien équipement informatique\nStudents with demonstrated high financial need who have limited access to computers may request assistance in the form of loaner laptops. Please note that supplies are limited.\nNote that we will be using Université Paris Citéomputational resources in this course. These resources are freely available to you. As long as your computer can connect to the internet and open a browser window, you can perform the necessary computing for this course. All software we use is open-source and/or freely available.",
    "crumbs": [
      "Course information",
      "Support"
    ]
  },
  {
    "objectID": "project-description.html",
    "href": "project-description.html",
    "title": "Project description",
    "section": "",
    "text": "Topic ideas due Fri, Feb 18\nProposal due Fri, Mar 18\nDraft report due Fri, Apr 8\nPeer review due Fri, Apr 15\nFinal report due Mon, Apr 25\nVideo presentation + slides and final GitHub repo due Thu, Apr 28\nPresentation comments due Sat, Apr 30",
    "crumbs": [
      "Project",
      "Description"
    ]
  },
  {
    "objectID": "project-description.html#timeline",
    "href": "project-description.html#timeline",
    "title": "Project description",
    "section": "",
    "text": "Topic ideas due Fri, Feb 18\nProposal due Fri, Mar 18\nDraft report due Fri, Apr 8\nPeer review due Fri, Apr 15\nFinal report due Mon, Apr 25\nVideo presentation + slides and final GitHub repo due Thu, Apr 28\nPresentation comments due Sat, Apr 30",
    "crumbs": [
      "Project",
      "Description"
    ]
  },
  {
    "objectID": "project-description.html#introduction",
    "href": "project-description.html#introduction",
    "title": "Project description",
    "section": "Introduction",
    "text": "Introduction\nTL;DR: Pick a data set and do a regression analysis. That is your final project.\nThe goal of the final project is for you to use regression analysis to analyze a data set of your own choosing. The data set may already exist or you may collect your own data by scraping the web.\nChoose the data based on your group’s interests or work you all have done in other courses or research projects. The goal of this project is for you to demonstrate proficiency in the techniques we have covered in this class (and beyond, if you like!) and apply them to a data set to analyze it in a meaningful way.\nAll analyses must be done in RStudio, and all components of the project must be reproducible (with the exception of the presentation).\n\nLogistics\nYou will work on the project with your lab groups.\nThe four primary deliverables for the final project are\n\nA written, reproducible report detailing your analysis\nA GitHub repository corresponding to your report\nSlides + a video presentation\nFormal peer review on another team’s project",
    "crumbs": [
      "Project",
      "Description"
    ]
  },
  {
    "objectID": "project-description.html#topic-ideas",
    "href": "project-description.html#topic-ideas",
    "title": "Project description",
    "section": "Topic ideas",
    "text": "Topic ideas\nIdentify 2-3 data sets you’re interested in potentially using for the final project. If you’re unsure where to find data, you can use the list of potential data sources in the Tips + Resources section as a starting point. It may also help to think of topics you’re interested in investigating and find data sets on those topics.\nThe purpose of submitting project ideas is to give you time to find data for the project and to make sure you have a data set that can help you be successful in the project. Therefore, you must use one of the data sets submitted as a topic idea, unless otherwise notified by the teaching team.\nThe data sets should meet the following criteria:\n\nAt least 500 observations\nAt least 10 columns\nAt least 6 of the columns must be useful and unique predictor variables.\n\nIdentifier variables such as “name”, “social security number”, etc. are not useful predictor variables.\nIf you have multiple columns with the same information (e.g. “state abbreviation” and “state name”), then they are not unique predictors.\n\nAt least one variable that can be identified as a reasonable response variable.\n\nThe response variable can be quantitative or categorical.\n\nA mix of quantitative and categorical variables that can be used as predictors.\nObservations should reasonably meet the independence condition. Therefore, avoid data with repeated measures, data collected over time, etc.\nYou may not use data that has previously been used in any course materials, or any derivation of data that has been used in course materials.\n\nPlease ask a member of the teaching team if you’re unsure whether your data set meets the criteria.\nFor each data set, include the following:\n\nIntroduction and data\n\nState the source of the data set.\nDescribe when and how it was originally collected (by the original data curator, not necessarily how you found the data)\nDescribe the observations and the general characteristics being measured in the data\n\n\n\nResearch question\n\nDescribe a research question you’re interested in answering using this data.\n\n\n\nGlimpse of data\n\nUse the glimpse function to provide an overview of each data set\n\nSubmit the PDF of the topic ideas to Gradescope. Mark all pages associated with each data set.",
    "crumbs": [
      "Project",
      "Description"
    ]
  },
  {
    "objectID": "project-description.html#project-proposal",
    "href": "project-description.html#project-proposal",
    "title": "Project description",
    "section": "Project proposal",
    "text": "Project proposal\nThe purpose of the project proposal is to help you think about your analysis strategy early.\nInclude the following in the proposal:\n\nSection 1 - Introduction\nThe introduction section includes\n\nan introduction to the subject matter you’re investigating\nthe motivation for your research question (citing any relevant literature)\nthe general research question you wish to explore\nyour hypotheses regarding the research question of interest.\n\n\n\nSection 2 - Data description\nIn this section, you will describe the data set you wish to explore. This includes\n\ndescription of the observations in the data set,\ndescription of how the data was originally collected (not how you found the data but how the original curator of the data collected it).\n\n\n\nSection 3 - Analysis approach\nIn this section, you will provide a brief overview of your analysis approach. This includes:\n\nDescription of the response variable.\nVisualization and summary statistics for the response variable.\nList of variables that will be considered as predictors\nRegression model technique (multiple linear regression and logistic regression)\n\n\n\nData dictionary (aka code book)\nSubmit a data dictionary for all the variables in your data set in the README of your project repo, in the data folder. Link to this file from your proposal writeup.\n\n\nSubmission\nPush all of your final changes to the GitHub repo, and submit the PDF of your proposal to Gradescope.\n\n\nProposal grading\n\n\n\nTotal\n10 pts\n\n\n\n\nIntroduction\n3 pts\n\n\nData description\n2 pts\n\n\nAnalysis plan\n4 pts\n\n\nData dictionary\n1 pts\n\n\n\nEach component will be graded as follows:\n\nMeets expectations (full credit): All required elements are completed and are accurate. The narrative is written clearly, all tables and visualizations are nicely formatted, and the work would be presentable in a professional setting.\nClose to expectations (half credit): There are some elements missing and/or inaccurate. There are some issues with formatting.\nDoes not meet expectations (no credit): Major elements missing. Work is not neatly formatted and would not be presentable in a professional setting.",
    "crumbs": [
      "Project",
      "Description"
    ]
  },
  {
    "objectID": "project-description.html#draft-report",
    "href": "project-description.html#draft-report",
    "title": "Project description",
    "section": "Draft report",
    "text": "Draft report\nThe purpose of the draft and peer review is to give you an opportunity to get early feedback on your analysis. Therefore, the draft and peer review will focus primarily on the exploratory data analysis, modeling, and initial interpretations.\nWrite the draft in the written-report.qmd file in your project repo. You do not need to submit the draft on Gradescope.\nBelow is a brief description of the sections to focus on in the draft:\n\nIntroduction and data\nThis section includes an introduction to the project motivation, data, and research question. Describe the data and definitions of key variables. It should also include some exploratory data analysis. All of the EDA won’t fit in the paper, so focus on the EDA for the response variable and a few other interesting variables and relationships.\n\n\nMethodology\nThis section includes a brief description of your modeling process. Explain the reasoning for the type of model you’re fitting, predictor variables considered for the model including any interactions. Additionally, show how you arrived at the final model by describing the model selection process, any variable transformations (if needed), and any other relevant considerations that were part of the model fitting process.\n\n\nResults\nIn this section, you will output the final model and include a brief discussion of the model assumptions, diagnostics, and any relevant model fit statistics.\nThis section also includes initial interpretations and conclusions drawn from the model.",
    "crumbs": [
      "Project",
      "Description"
    ]
  },
  {
    "objectID": "project-description.html#peer-review",
    "href": "project-description.html#peer-review",
    "title": "Project description",
    "section": "Peer review",
    "text": "Peer review\nCritically reviewing others’ work is a crucial part of the scientific process, and STA 210 is no exception. Each lab team will be assigned two other teams’s projects to review. Each team should push their draft to their GitHub repo by the due date. One lab in the following week will be dedicated to the peer review, and all reviews will be due by the end of that lab session.\nDuring the peer review process, you will be provided read-only access to your partner teams’ GitHub repos. Provide your review in the form of GitHub issues to your partner team’s GitHub repo using the issue template provided. The peer review will be graded on the extent to which it comprehensively and constructively addresses the components of the partner team’s report: the research context and motivation, exploratory data analysis, modeling, interpretations, and conclusions.\n\nPairings\n\nSection 1 - M 1:45PM - 3:00PM\n\n\n\nTeam being reviewed\nReviewer 1\nReviewer 2\n\n\n\n\nchaa_chaa_chaa\nyay_stats\nstat_over_flow\n\n\ndekk\nchaa_chaa_chaa\nyay_stats\n\n\neight\ndekk\nchaa_chaa_chaa\n\n\nhousecats\neight\ndekk\n\n\nkrafthouse\nhousecats\neight\n\n\nrrawr\nkrafthouse\nhousecats\n\n\nstat_over_flow\nrrawr\nkrafthouse\n\n\nyay_stats\nstat_over_flow\nrrawr\n\n\n\n\n\nSection 2 - M 3:30PM - 4:45PM\n\n\n\nTeam being reviewed\nReviewer 1\nReviewer 2\n\n\n\n\na_plus_plus_plus\nwe_r\ntina\n\n\npredictors\na_plus_plus_plus\nwe_r\n\n\nsixers\npredictors\na_plus_plus_plus\n\n\nsoy_nuggets\nsixers\npredictors\n\n\ntina\nsoy_nuggets\nsixers\n\n\nwe_r\ntina\nsoy_nuggets\n\n\n\n\n\nSection 3 - M 5:15PM - 6:30PM\n\n\n\n\n\n\n\n\nTeam being reviewed\nReviewer 1\nReviewer 2\n\n\n\n\ndown_to_earth_goats\nthe_three_musketeers\nteam_five\n\n\nginger_and_stats\ndown_to_earth_goats\nthe_three_musketeers\n\n\npineapple_wedge_and_diced_papaya\nginger_and_stats\ndown_to_earth_goats\n\n\nstatchelorettes\npineapple_wedge_and_diced_papaya\nginger_and_stats\n\n\nstatisix\nstatchelorettes\npineapple_wedge_and_diced_papaya\n\n\nstats_squad\nstatisix\nstatchelorettes\n\n\nteam_five\nstats_squad\nstatisix\n\n\nthe_three_musketeers\nteam_five\nstats_squad\n\n\n\n\n\n\nProcess and questions\nSpend ~30 mins to review each team’s project.\n\nFind your team name on the Reviewer 1 and Reviewer 2 columns.\nFor each of the columns, find the name of the team to review in the Team being reviewed column. You should already have access to this team’s repo.\nOpen the repo of the team you’re reviewing, read their project draft, and browser around the rest of their repo.\nThen, go to the Issues tab in that repo, click on New issue, and click on Get started for the Peer review issue. Fill out this issue, answering the following questions:\n\nPeer review by: [NAME OF TEAM DOING THE REVIEW]\nNames of team members that participated in this review: [FULL NAMES OF TEAM MEMBERS DOING THE REVIEW]\nDescribe the goal of the project.\nDescribe the data used or collected, if any. If the proposal does not include the use of a specific dataset, comment on whether the project would be strengthened by the inclusion of a dataset.\nDescribe the approaches, tools, and methods that will be used.\nIs there anything that is unclear from the proposal?\nProvide constructive feedback on how the team might be able to improve their project. Make sure your feedback includes at least one comment on the statistical modeling aspect of the project, but do feel free to comment on aspects beyond the modeling.\nWhat aspect of this project are you most interested in and would like to see highlighted in the presentation.\nProvide constructive feedback on any issues with file and/or code organization.\n(Optional) Any further comments or feedback?",
    "crumbs": [
      "Project",
      "Description"
    ]
  },
  {
    "objectID": "project-description.html#written-report",
    "href": "project-description.html#written-report",
    "title": "Project description",
    "section": "Written report",
    "text": "Written report\nYour written report must be completed in the written-report.qmd file and must be reproducible. All team members should contribute to the GitHub repository, with regular meaningful commits.\nBefore you finalize your write up, make sure the printing of code chunks is off with the option echo = FALSE.\nYou will submit the PDF of your final report on Gradescope.\nThe PDF you submit must match the files in your GitHub repository exactly. The mandatory components of the report are below. You are free to add additional sections as necessary. The report, including visualizations, should be no more than 10 pages long. is no minimum page requirement; however, you should comprehensively address all of the analysis and report.\nBe selective in what you include in your final write-up. The goal is to write a cohesive narrative that demonstrates a thorough and comprehensive analysis rather than explain every step of the analysis.\nYou are welcome to include an appendix with additional work at the end of the written report document; however, grading will largely be based on the content in the main body of the report. You should assume the reader will not see the material in the appendix unless prompted to view it in the main body of the report. The appendix should be neatly formatted and easy for the reader to navigate. It is not included in the 10-page limit.\nThe written report is worth 40 points, broken down as follows\n\n\n\nTotal\n40 pts\n\n\n\n\nIntroduction/data\n6 pts\n\n\nMethodology\n10 pts\n\n\nResults\n14 pts\n\n\nDiscussion + conclusion\n6 pts\n\n\nOrganization + formatting\n4 pts\n\n\n\nClick here for a PDF of the written report rubric.\n\nIntroduction and data\nThis section includes an introduction to the project motivation, data, and research question. Describe the data and definitions of key variables. It should also include some exploratory data analysis. All of the EDA won’t fit in the paper, so focus on the EDA for the response variable and a few other interesting variables and relationships.\n\nGrading criteria\nThe research question and motivation are clearly stated in the introduction, including citations for the data source and any external research. The data are clearly described, including a description about how the data were originally collected and a concise definition of the variables relevant to understanding the report. The data cleaning process is clearly described, including any decisions made in the process (e.g., creating new variables, removing observations, etc.) The explanatory data analysis helps the reader better understand the observations in the data along with interesting and relevant relationships between the variables. It incorporates appropriate visualizations and summary statistics.\n\n\n\nMethodology\nThis section includes a brief description of your modeling process. Explain the reasoning for the type of model you’re fitting, predictor variables considered for the model including any interactions. Additionally, show how you arrived at the final model by describing the model selection process, interactions considered, variable transformations (if needed), assessment of conditions and diagnostics, and any other relevant considerations that were part of the model fitting process.\n\nGrading criteria\nThe analysis steps are appropriate for the data and research question. The group used a thorough and careful approach to select the final model; the approach is clearly described in the report. The model selection process took into account potential interaction effects and addressed any violations in model conditions. The model conditions and diagnostics are thoroughly and accurately assessed for their model. If violations of model conditions are still present, there was a reasonable attempt to address the violations based on the course content.\n\n\n\nResults\nThis is where you will output the final model with any relevant model fit statistics.\nDescribe the key results from the model. The goal is not to interpret every single variable in the model but rather to show that you are proficient in using the model output to address the research questions, using the interpretations to support your conclusions. Focus on the variables that help you answer the research question and that provide relevant context for the reader.\n\nGrading criteria\nThe model fit is clearly assessed, and interesting findings from the model are clearly described. Interpretations of model coefficients are used to support the key findings and conclusions, rather than merely listing the interpretation of every model coefficient. If the primary modeling objective is prediction, the model’s predictive power is thoroughly assessed.\n\n\n\nDiscussion + Conclusion\nIn this section you’ll include a summary of what you have learned about your research question along with statistical arguments supporting your conclusions. In addition, discuss the limitations of your analysis and provide suggestions on ways the analysis could be improved. Any potential issues pertaining to the reliability and validity of your data and appropriateness of the statistical analysis should also be discussed here. Lastly, this section will include ideas for future work.\n\nGrading criteria\nOverall conclusions from analysis are clearly described, and the model results are put into the larger context of the subject matter and original research question. There is thoughtful consideration of potential limitations of the data and/or analysis, and ideas for future work are clearly described.\n\n\n\nOrganization + formatting\nThis is an assessment of the overall presentation and formatting of the written report.\n\nGrading criteria\nThe report neatly written and organized with clear section headers and appropriately sized figures with informative labels. Numerical results are displayed with a reasonable number of digits, and all visualizations are neatly formatted. All citations and links are properly formatted. If there is an appendix, it is reasonably organized and easy for the reader to find relevant information. All code, warnings, and messages are suppressed. The main body of the written report (not including the appendix) is no longer than 10 pages.",
    "crumbs": [
      "Project",
      "Description"
    ]
  },
  {
    "objectID": "project-description.html#video-presentation-slides",
    "href": "project-description.html#video-presentation-slides",
    "title": "Project description",
    "section": "Video presentation + slides",
    "text": "Video presentation + slides\n\nSlides\nIn addition to the written report, your team will also create presentation slides and record a video presentation that summarize and showcase your project. Introduce your research question and data set, showcase visualizations, and discuss the primary conclusions. These slides should serve as a brief visual addition to your written report and will be graded for content and quality.\nFor submission, convert these slides to a .pdf document, and submit the PDF of the slides on Gradescope.\nThe slide deck should have no more than 6 content slides + 1 title slide. Here is a suggested outline as you think through the slides; you do not have to use this exact format for the 6 slides.\n\nTitle Slide\nSlide 1: Introduce the topic and motivation\nSlide 2: Introduce the data\nSlide 3: Highlights from EDA\nSlide 4: Final model\nSlide 5: Interesting findings from the model\nSlide 6: Conclusions + future work\n\n\n\nVideo presentation\nFor the video presentation, you can speak over your slide deck, similar to the lecture content videos. The video presentation must be no longer than 8 minutes. It is fine if the video is shorter than 8 minutes, but it cannot exceed 8 minutes. You may use can use any platform that works best for your group to record your presentation. Below are a few resources on recording videos:\n\nRecording presentations in Zoom\nApple Quicktime for screen recording\nWindows 10 built-in screen recording functionality\nKap for screen recording\n\nOnce your video is ready, upload the video to Warpwire, then embed the video in an new discussion post on Conversations.\n\nTo upload your video to Warpwire:\n\nClick the Warpwire tab in the course Sakai site.\nClick the “+” and select “Upload files”.\nLocate the video on your computer and click to upload.\nOnce you’ve uploaded the video to Warpwire, click to share the video and copy the video’s URL. You will need this when you post the video in the discussion forum.\n\n\n\nTo post the video to the discussion forum\n\nClick the Presentations tab in the course Sakai site.\nClick the Presentations topic.\nClick “Start a new conversation”.\nMake the title “Your Team Name: Project Title”. For example, “Teaching Team: Our Awesome Presentation”.\nClick the Warpwire icon (between the table and shopping cart icons).\nSelect your video, then click “Insert 1 item.” This will embed your video in the conversation.\nUnder the video, paste the URL to your video.\nYou’re done!",
    "crumbs": [
      "Project",
      "Description"
    ]
  },
  {
    "objectID": "project-description.html#presentation-comments",
    "href": "project-description.html#presentation-comments",
    "title": "Project description",
    "section": "Presentation comments",
    "text": "Presentation comments\nEach student will be assigned 2 presentations to watch. Your viewing assignments will be posted later in the semester.\nWatch the group’s video, then click “Reply” to post a question for the group. You may not post a question that’s already been asked on the discussion thread. Additionally, the question should be (i) substantive (i.e. it shouldn’t be “Why did you use a bar plot instead of a pie chart”?), (ii) demonstrate your understanding of the content from the course, and (iii) relevant to that group’s specific presentation, i.e demonstrating that you’ve watched the presentation.\nThis portion of the project will be assessed individually.\n\nPairings\nFind your team name in the first column, watch videos from teams in the second column and leave comments.\n\n\n\n\n\n\n\n\nReviewer\nFirst video to review\nSecond video to review\n\n\n\n\nGinger and Stats\nEight\nWe R\n\n\nKrafthouse\nGinger and Stats\nEight\n\n\nSoy Nuggets\nKrafthouse\nGinger and Stats\n\n\nDown To Earth Goats\nSoy Nuggets\nKrafthouse\n\n\nA+++\nDown To Earth Goats\nSoy Nuggets\n\n\nTeam Five\nA+++\nDown To Earth Goats\n\n\nRrawr\nTeam Five\nA+++\n\n\nHousecats\nRrawr\nTeam Five\n\n\nDekk\nHousecats\nRrawr\n\n\nStat OverFlow\nDekk\nHousecats\n\n\nThe Three Musketeers\nStat OverFlow\nDekk\n\n\nPredictors\nThe Three Musketeers\nStat OverFlow\n\n\nStats Squad\nPredictors\nThe Three Musketeers\n\n\nStatisix\nStats Squad\nPredictors\n\n\nSixers\nStatisix\nStats Squad\n\n\nYay Stats\nSixers\nStatisix\n\n\nTINA\nYay Stats\nSixers\n\n\nStatchelorettes\nTINA\nYay Stats\n\n\nPineapple Wedge and Diced Papaya\nStatchelorettes\nTINA\n\n\nChaa Chaa Chaa\nPineapple Wedge and Diced Papaya\nStatchelorettes\n\n\nWe R\nChaa Chaa Chaa\nPineapple Wedge and Diced Papaya\n\n\nEight\nWe R\nChaa Chaa Chaa",
    "crumbs": [
      "Project",
      "Description"
    ]
  },
  {
    "objectID": "project-description.html#reproducibility-organization",
    "href": "project-description.html#reproducibility-organization",
    "title": "Project description",
    "section": "Reproducibility + organization",
    "text": "Reproducibility + organization\nAll written work (with exception of presentation slides) should be reproducible, and the GitHub repo should be neatly organized.\nThe GitHub repo should have the following structure:\n\nREADME: Short project description and data dictionary\nwritten-report.qmd & written-report.pdf: Final written report\n/data: Folder that contains the data set for the final project.\n/previous-work: Folder that contains the topic-ideas and project-proposal files.\n/presentation: Folder with the presentation slides.\n\nIf your presentation slides are online, you can put a link to the slides in a README.md file in the presentation folder.\n\n\nPoints for reproducibility + organization will be based on the reproducibility of the written report and the organization of the project GitHub repo. The repo should be neatly organized as described above, there should be no extraneous files, all text in the README should be easily readable.",
    "crumbs": [
      "Project",
      "Description"
    ]
  },
  {
    "objectID": "project-description.html#peer-teamwork-evaluation",
    "href": "project-description.html#peer-teamwork-evaluation",
    "title": "Project description",
    "section": "Peer teamwork evaluation",
    "text": "Peer teamwork evaluation\nYou will be asked to fill out a survey where you rate the contribution and teamwork of each team member by assigning a contribution percentage for each team member. Filling out the survey is a prerequisite for getting credit on the team member evaluation. If you are suggesting that an individual did less than half the expected contribution given your team size (e.g., for a team of four students, if a student contributed less than 12.5% of the total effort), please provide some explanation. If any individual gets an average peer score indicating that this was the case, their grade will be assessed accordingly.\nIf you have concerns with the teamwork and/or contribution from any team members, please email me by the project video deadline. You only need to email me if you have concerns. Otherwise, I will assume everyone on the team equally contributed and will receive full credit for the teamwork portion of the grade.",
    "crumbs": [
      "Project",
      "Description"
    ]
  },
  {
    "objectID": "project-description.html#overall-grading",
    "href": "project-description.html#overall-grading",
    "title": "Project description",
    "section": "Overall grading",
    "text": "Overall grading\nThe grade breakdown is as follows:\n\n\n\nTotal\n100 pts\n\n\n\n\nTopic ideas\n5 pts\n\n\nProject proposal\n10 pts\n\n\nPeer review\n10 pts\n\n\nWritten report\n40 pts\n\n\nSlides + video presentation\n20 pts\n\n\nReproducibility + organization\n5 pts\n\n\nVideo comments\n5 pts\n\n\nPeer teamwork evaluation\n5 pts\n\n\n\nNote: No late project reports or videos are accepted.\n\nGrading summary\nGrading of the project will take into account the following:\n\nContent - What is the quality of research and/or policy question and relevancy of data to those questions?\nCorrectness - Are statistical procedures carried out and explained correctly?\nWriting and Presentation - What is the quality of the statistical presentation, writing, and explanations?\nCreativity and Critical Thought - Is the project carefully thought out? Are the limitations carefully considered? Does it appear that time and effort went into the planning and implementation of the project?\n\nA general breakdown of scoring is as follows:\n\n90%-100%: Outstanding effort. Student understands how to apply all statistical concepts, can put the results into a cogent argument, can identify weaknesses in the argument, and can clearly communicate the results to others.\n80%-89%: Good effort. Student understands most of the concepts, puts together an adequate argument, identifies some weaknesses of their argument, and communicates most results clearly to others.\n70%-79%: Passing effort. Student has misunderstanding of concepts in several areas, has some trouble putting results together in a cogent argument, and communication of results is sometimes unclear.\n60%-69%: Struggling effort. Student is making some effort, but has misunderstanding of many concepts and is unable to put together a cogent argument. Communication of results is unclear.\nBelow 60%: Student is not making a sufficient effort.\n\n\n\nLate work policy\nThere is no late work accepted on this project. Be sure to turn in your work early to avoid any technological mishaps.",
    "crumbs": [
      "Project",
      "Description"
    ]
  },
  {
    "objectID": "slides/SQL_2.html#opérateurs-ensemblistes-capcupsetminus",
    "href": "slides/SQL_2.html#opérateurs-ensemblistes-capcupsetminus",
    "title": "BD II: SQL II",
    "section": "Opérateurs ensemblistes: \\(\\cap,\\cup,\\setminus\\)",
    "text": "Opérateurs ensemblistes: \\(\\cap,\\cup,\\setminus\\)\n Les deux tables doivent avoir des schémas identiques\n\nIntersection ( \\(\\cap\\) ) : les tuples qui sont à la fois dans la requête 1 et dans la requête 2\n\n  &lt;requete1&gt; INTERSECT &lt;requete2&gt;\n–\n\nUnion ( \\(\\cup\\) ) : les tuples de la requête 1 et ceux de la requête 2\n\n  &lt;requete1&gt; UNION &lt;requete2&gt;\n–\n\nDifférence ( \\(\\backslash\\) ) : les tuples de la requête 1 qui ne sont pas des tuples de la requête 2\n\n  &lt;requete1&gt; EXCEPT &lt;requete2&gt;"
  },
  {
    "objectID": "slides/SQL_2.html#exemple-pour-except",
    "href": "slides/SQL_2.html#exemple-pour-except",
    "title": "BD II: SQL II",
    "section": "Exemple pour EXCEPT",
    "text": "Exemple pour EXCEPT\nFournisseur (NomF, VilleF, AdresseF) \n\nPiece(NomP, Prix, Couleur)\n\nLivraison(NumLiv, NomP, NomF, DateLiv, Quantite)\nFournisseurs qui ont livré la pièce x22 mais pas la pièce x21\n  SELECT NomF \n  FROM Livraison \n  WHERE NomP='x22'\n\n  EXCEPT #&lt;&lt;\n  \n  SELECT NomF\n  FROM Livraison \n  WHERE NomP='x21';"
  },
  {
    "objectID": "slides/SQL_2.html#requêtes-imbriquées-in-exists-all-any-lateral",
    "href": "slides/SQL_2.html#requêtes-imbriquées-in-exists-all-any-lateral",
    "title": "BD II: SQL II",
    "section": "Requêtes imbriquées IN, EXISTS, ALL, ANY, LATERAL",
    "text": "Requêtes imbriquées IN, EXISTS, ALL, ANY, LATERAL\n\nLe résultat d’une requête SQL est un ensemble de tuples… donc une relation.\n Dans la clause WHERE d’une requête, on peut utiliser une fonction d’une autre requête, appelée sous-requête\nIN, EXISTS, ALL, ANY sont des fonctions qui prennent une sous-requête (une relation) en argument.\nDans une sous-requête, on peut se référer à des attributs des tables de la clause FROM.\nPour chaque ligne d’un item FROM qui fournit la colonne référencée, l’item LATERAL est évalué en utilisant cette ligne. Les lignes du résultat sont jointes avec la ligne qui a servi à les calculer.\nOn peut utiliser ces résultats comme données d’une autre requête\n Moyens : utiliser des fonctions de table dans la clause WHERE."
  },
  {
    "objectID": "slides/SQL_2.html#utilisation-de-sous-requêtes-in",
    "href": "slides/SQL_2.html#utilisation-de-sous-requêtes-in",
    "title": "BD II: SQL II",
    "section": "Utilisation de sous-requêtes : IN",
    "text": "Utilisation de sous-requêtes : IN\n\nOpérateur IN déjà vu pour exprimer que l’attribut est à valeur dans une certaine liste\nNouvelle utilisation de IN avec des sous-requêtes.\n\n&lt;attribut&gt; [NOT] IN (&lt;sous-requete&gt;)\nEvaluée à vraie si  appartient au résultat de la sous-requête"
  },
  {
    "objectID": "slides/SQL_2.html#utilisation-de-sous-requêtes-in-1",
    "href": "slides/SQL_2.html#utilisation-de-sous-requêtes-in-1",
    "title": "BD II: SQL II",
    "section": "Utilisation de sous-requêtes : IN",
    "text": "Utilisation de sous-requêtes : IN\nLister les villes de fournisseurs qui ont livré la pièce ‘x21’.\n.fl.w-50.pa2[\nSELECT DISTINCT VilleF \n\nFROM Fournisseur \n\nWHERE NomF IN ( SELECT NomF  #&lt;&lt;\n                FROM Livraison #&lt;&lt;\n                WHERE NomP = 'x21') ;  #&lt;&lt;\n]\n–\n.fl.w-50.pa2[ est équivalente à :\nSELECT DISTINCT F.VilleF \n\nFROM Fournisseur F, Livraison L \n\nWHERE  (F. NomF = L. NomF) AND \n       (L. NomP = 'x21');\n]"
  },
  {
    "objectID": "slides/SQL_2.html#utilisation-de-sous-requêtes-in-2",
    "href": "slides/SQL_2.html#utilisation-de-sous-requêtes-in-2",
    "title": "BD II: SQL II",
    "section": "Utilisation de sous-requêtes : IN",
    "text": "Utilisation de sous-requêtes : IN\nLister les couleurs de pièces livrées par des fournisseurs de Paris\nSELECT DISTINCT Couleur \nFROM Piece\nWHERE NomP IN (   \n    SELECT NomP  #&lt;&lt; \n  FROM Livraison  #&lt;&lt; \n    WHERE NomF IN (SELECT NomF   #&lt;&lt;\n                 FROM Fournisseur   #&lt;&lt;\n                     WHERE VilleF='Paris')  #&lt;&lt;\n);  \n–\nest équivalente à\nSELECT DISTINCT P.Couleur\n\nFROM Piece P, Livraison L, Fournisseur F\n\nWHERE P.NomP = L.NomP AND\n      L.NomF = F.NomF   \n      VilleF = 'Paris'  ;"
  },
  {
    "objectID": "slides/SQL_2.html#utilisation-de-sous-requêtes-in-3",
    "href": "slides/SQL_2.html#utilisation-de-sous-requêtes-in-3",
    "title": "BD II: SQL II",
    "section": "Utilisation de sous-requêtes : IN",
    "text": "Utilisation de sous-requêtes : IN\n\nUtilisation ci-dessus pas très utile mais…\nPratique à utiliser sous la forme NOT IN\n\nLister les noms de pièces qui n’ont jamais été livrées.\nSELECT NomP\nFROM Piece P \nWHERE NomP NOT IN    (\n    SELECT NomP   #&lt;&lt;\n    FROM  Livraison  #&lt;&lt;\n);\nEquivalence en algèbre relationnelle :\n\\[\\pi_{\\text{NomP}}(\\text{Piece}) - \\pi_{\\text{NomP}}(\\text{Livraison})\\]\n…. Une des façons de coder la .blue[différence] en SQL"
  },
  {
    "objectID": "slides/SQL_2.html#utilisation-de-sous-requêtes-in-4",
    "href": "slides/SQL_2.html#utilisation-de-sous-requêtes-in-4",
    "title": "BD II: SQL II",
    "section": "Utilisation de sous-requêtes : IN",
    "text": "Utilisation de sous-requêtes : IN\nLes capitales dont la population est plus grande que la moitié de la population du pays\nSELECT name_city FROM city\nWHERE id IN (\n  SELECT capital \n  FROM country\n  WHERE population_city&gt;=population_country*.5\n);\n–\nest équivalente à :\nSELECT name_city \nFROM country JOIN city \n     ON capital=id\nWHERE population_city&gt;=population_country*.5;"
  },
  {
    "objectID": "slides/SQL_2.html#utilisation-de-sous-requêtes-any-all",
    "href": "slides/SQL_2.html#utilisation-de-sous-requêtes-any-all",
    "title": "BD II: SQL II",
    "section": "Utilisation de sous-requêtes : ANY, ALL",
    "text": "Utilisation de sous-requêtes : ANY, ALL\nDeux nouveaux opérateurs manipulant des sous-requêtes : ANY, ALL\n&lt;attributs&gt; =|&lt;&gt;|&lt;=|&lt;|&gt;|=&gt; ANY (&lt;sous-requete&gt;)\névaluée à vraie si au moins un des résultats de la sous requête vérifie la comparaison avec &lt;attributs&gt;\n\n&lt;attributs&gt; =|&lt;&gt;|&lt;=|&lt;|&gt;|=&gt; ALL (&lt;sous-requete&gt;)\névaluée à vraie si tous les résultats de la sous-requête vérifient la comparaison avec &lt;attributs&gt;\n\n\n\n.blue[&lt;attributs&gt;]: peut être une liste d’attributs"
  },
  {
    "objectID": "slides/SQL_2.html#utilisation-de-sous-requêtes-any-all-1",
    "href": "slides/SQL_2.html#utilisation-de-sous-requêtes-any-all-1",
    "title": "BD II: SQL II",
    "section": "Utilisation de sous-requêtes : ANY, ALL",
    "text": "Utilisation de sous-requêtes : ANY, ALL\nAlternative au IN\nlister les noms de fournisseurs qui ont livré la pièce ‘x21’.\nSELECT NomF\nFROM Fournisseur\nWHERE NomF = ANY (\n    SELECT NomF\n    FROM Livraison\n    WHERE NomP = 'x21' );"
  },
  {
    "objectID": "slides/SQL_2.html#utilisation-de-sous-requêtes-any-all-2",
    "href": "slides/SQL_2.html#utilisation-de-sous-requêtes-any-all-2",
    "title": "BD II: SQL II",
    "section": "Utilisation de sous-requêtes : ANY, ALL",
    "text": "Utilisation de sous-requêtes : ANY, ALL\nInformation sur la commande dont la quantité de ièces livrées était la plus importante.\nSELECT *\nFROM Livraison\nWHERE Quantite &gt;= ALL (\n    SELECT Quantite FROM Livraison);"
  },
  {
    "objectID": "slides/SQL_2.html#utilisation-de-sous-requêtes-any-all-3",
    "href": "slides/SQL_2.html#utilisation-de-sous-requêtes-any-all-3",
    "title": "BD II: SQL II",
    "section": "Utilisation de sous-requêtes : ANY, ALL",
    "text": "Utilisation de sous-requêtes : ANY, ALL\nNoms et prix des pièces livrées les plus chères\nSELECT P.NomP, P.Prix \nFROM Livraison L, Piece P\nWHERE L.NomP = P.NomP AND \n      P.Prix&gt;=ALL (\n        SELECT Prix \n        FROM Piece\n);"
  },
  {
    "objectID": "slides/SQL_2.html#utilisation-de-sous-requêtes-any-all-4",
    "href": "slides/SQL_2.html#utilisation-de-sous-requêtes-any-all-4",
    "title": "BD II: SQL II",
    "section": "Utilisation de sous-requêtes : ANY, ALL",
    "text": "Utilisation de sous-requêtes : ANY, ALL\nLa ville la plus peuplée de chaque pays\nSELECT c1.name_city \nFROM city as c1\nWHERE population_city &gt;= ALL (\n    SELECT c2.population_city \n    FROM city as c2\n    WHERE c1.countrycode=c2.countrycode\n);"
  },
  {
    "objectID": "slides/SQL_2.html#utilisation-de-sous-requêtes-exists",
    "href": "slides/SQL_2.html#utilisation-de-sous-requêtes-exists",
    "title": "BD II: SQL II",
    "section": "Utilisation de sous-requêtes : EXISTS",
    "text": "Utilisation de sous-requêtes : EXISTS\n[NOT] EXISTS (&lt;sous-requete&gt;)\nest évaluée à vraie si la sous-requête renvoie au moins un résultat.\n\nNom et prix des pièces qui ont été livrées\nSELECT NomP, Prix \nFROM Piece P \nWHERE EXISTS (\n  SELECT * \n  FROM Livraison \n  WHERE Livraison.NomP = P.NomP\n);\n\n\n Différence avec ANY\nL’ utilisation de EXISTS s’apparente à une condition booléenne.\nPas de test sur la valeur d’un attribut particulier."
  },
  {
    "objectID": "slides/SQL_2.html#utilisation-de-sous-requêtes-exists-1",
    "href": "slides/SQL_2.html#utilisation-de-sous-requêtes-exists-1",
    "title": "BD II: SQL II",
    "section": "Utilisation de sous-requêtes : EXISTS",
    "text": "Utilisation de sous-requêtes : EXISTS\nNom des Fournisseurs ayant livré la pièce x21 mais qui n’ont jamais livré la pièce a22.\nSELECT DISTINCT NomF \nFROM Livraison L \nWHERE L.NomP='x21' AND \n  NOT EXISTS (\n    SELECT * \n    FROM Livraison L1 \n    WHERE L2.NomP='a22' AND L2.NomF=L.NomF\n  );"
  },
  {
    "objectID": "slides/SQL_2.html#utilisation-de-sous-requêtes-exists-2",
    "href": "slides/SQL_2.html#utilisation-de-sous-requêtes-exists-2",
    "title": "BD II: SQL II",
    "section": "Utilisation de sous-requêtes : EXISTS",
    "text": "Utilisation de sous-requêtes : EXISTS\nLes régions qui ont au moins une langue officielle :\nSELECT DISTINCT region \nFROM world.country AS co\nWHERE EXISTS (\n  SELECT * \n  FROM world.countrylanguage AS cl\n  WHERE co.countrycode = cl.countrycode  AND cl.isofficial\n);"
  },
  {
    "objectID": "slides/SQL_2.html#requêtes-imbriquées-lateral",
    "href": "slides/SQL_2.html#requêtes-imbriquées-lateral",
    "title": "BD II: SQL II",
    "section": "Requêtes imbriquées : LATERAL",
    "text": "Requêtes imbriquées : LATERAL\n\n\n\n\n\n\nImportant\n\n\nLes sous-requêtes d’une clause FROM peuvent être précédées du mot-clé LATERAL\nOn peut alors faire référence à des colonnes des éléments précédents de la clause FROM"
  },
  {
    "objectID": "slides/SQL_2.html#pour-les-fonction-tables",
    "href": "slides/SQL_2.html#pour-les-fonction-tables",
    "title": "BD II: SQL II",
    "section": "Pour les fonction-tables …",
    "text": "Pour les fonction-tables …\nLes arguments de la fonction peuvent contenir des références à des colonnes des items précédents de la clause FROM."
  },
  {
    "objectID": "slides/SQL_2.html#evaluation",
    "href": "slides/SQL_2.html#evaluation",
    "title": "BD II: SQL II",
    "section": "Evaluation",
    "text": "Evaluation\nPour chaque ligne d’un item FROM qui fournit la colonne référencée, l’item LATERAL est évalué en utilisant cette ligne. Les lignes du résultat sont jointes avec la ligne qui a servi à les calculer\nOn peut parler de sous-requête paramétrée"
  },
  {
    "objectID": "slides/SQL_2.html#un-exemple-de-lusage-de-lateral",
    "href": "slides/SQL_2.html#un-exemple-de-lusage-de-lateral",
    "title": "BD II: SQL II",
    "section": "Un exemple de l’usage de LATERAL",
    "text": "Un exemple de l’usage de LATERAL\nSELECT name_country, name_city \nFROM country, LATERAL (  #&lt;&lt;\n  SELECT name_city       #&lt;&lt;\n  FROM city              #&lt;&lt;\n  WHERE city.countrycode=country.countrycode) ss  #&lt;&lt; \nORDER BY name_country;\néquivalent à\nselect name_country, name_city \nfrom country natural join city\norder by name_country;\n LATERAL est surtout utilisé quand la colonne référencée est nécessaire au calcul des lignes à joindre"
  },
  {
    "objectID": "slides/SQL_2.html#lateral-en-action-sur-world",
    "href": "slides/SQL_2.html#lateral-en-action-sur-world",
    "title": "BD II: SQL II",
    "section": "LATERAL en action sur world",
    "text": "LATERAL en action sur world\n\n\nSELECT name_country, name_city \n\nFROM country, LATERAL ( #&lt;&lt;\n  SELECT name_city  #&lt;&lt;\n  FROM city  #&lt;&lt;\n  WHERE city.countrycode=country.countrycode) ss #&lt;&lt; \n\nORDER BY name_city \n\nLIMIT 10 ;\n\n\n\n\nname_country\nname_city\n\n\n\n\nSpain\nA Coruña (La Coruña)\n\n\nGermany\nAachen\n\n\nDenmark\nAalborg\n\n\nNigeria\nAba\n\n\nIran\nAbadan\n\n\nBrazil\nAbaetetuba\n\n\nRussian Federation\nAbakan\n\n\nCanada\nAbbotsford\n\n\nNigeria\nAbeokuta\n\n\n…\n…\n\n\n\n::::: SELECT  name_country,   name_city, lifeexpectancy\nFROM (SELECT countrycode,   name_country, lifeexpectancy\n          FROM country\n          WHERE gnpold &gt;0 AND gnp / gnpold &gt; 1.1\n     ) AS better_off \nJOIN LATERAL (SELECT c.countrycode, name_city  #&lt;&lt; \n                  FROM country c\n                  JOIN city ON (capital = id)\n                  WHERE better_off.countrycode=c.countrycode AND  #&lt;&lt;\n                          population_city&gt; 2000000\n) AS big_capital \nON TRUE ;  #&lt;&lt; \n\n\nCountry\nCity\nLife expectancy\n\n\n\n\nIran\nTeheran\n69.7\n\n\nCongo, The Democratic Republic of the\nKinshasa\n48.8\n\n\nTurkey\nAnkara\n71.0\n\n\nSee Trumpetting lateral joinCould be useful for implementing exploratory pipelines into postgresql without to much tears and sweat.\nWITH\n\n\n\nSyntaxe des clauses WITH\nWITH r AS (\n  SELECT ...\n  FROM ...\n  WHERE ...\n), s AS (\n  SELECT ...\n  FROM ...\n  WHERE ...     -- possible reference to r \n)\nSELECT ...\nFROM   ... -- possible reference to r, s \nWHERE \n\nUne clause WITH permet d’écrire des requêtes intermédiaires et de décomposer une requête complexe\nCes expressions/requêtes sont souvent désignées par le vocable Common Table Expressions ou CTEs\nLes CTEs (éléments d’une clasuse WITH) peuvent être des requêtes, mais aussi des expressions de manipulation (mise à jour, insertion, suppression) de données\nLes CTEs permettent de coller plus fidèlement à l’algèbre relationnelle que les requêtes imbriquées\n\n\n…\nWITH better_off AS (\n  SELECT countrycode, name_country, lifeexpectancy, capital\n  FROM country\n  WHERE gnpold &gt;0 AND gnp / gnpold &gt; 1.1\n),\nbig_capital AS (\n  SELECT id, countrycode\n  FROM city \n  WHERE population &gt; 2000000\n)\nSELECT bo.countrycode, name_country, lifeexpectancy\nFROM better_off bo JOIN big_capital bc ON\n  (bo.countrycode=bc.countrycode AND bc.id=bo.capital) ;\n\n\nFin"
  },
  {
    "objectID": "slides/SQL_2.html#syntaxe-des-clauses-with",
    "href": "slides/SQL_2.html#syntaxe-des-clauses-with",
    "title": "BD II: SQL II",
    "section": "Syntaxe des clauses WITH",
    "text": "Syntaxe des clauses WITH\nWITH r AS (\n  SELECT ...\n  FROM ...\n  WHERE ...\n), s AS (\n  SELECT ...\n  FROM ...\n  WHERE ...     -- possible reference to r \n)\nSELECT ...\nFROM   ... -- possible reference to r, s \nWHERE \n\nUne clause WITH permet d’écrire des requêtes intermédiaires et de décomposer une requête complexe\nCes expressions/requêtes sont souvent désignées par le vocable Common Table Expressions ou CTEs\nLes CTEs (éléments d’une clasuse WITH) peuvent être des requêtes, mais aussi des expressions de manipulation (mise à jour, insertion, suppression) de données\nLes CTEs permettent de coller plus fidèlement à l’algèbre relationnelle que les requêtes imbriquées"
  },
  {
    "objectID": "slides/SQL_2.html#section",
    "href": "slides/SQL_2.html#section",
    "title": "BD II: SQL II",
    "section": "…",
    "text": "…\nWITH better_off AS (\n  SELECT countrycode, name_country, lifeexpectancy, capital\n  FROM country\n  WHERE gnpold &gt;0 AND gnp / gnpold &gt; 1.1\n),\nbig_capital AS (\n  SELECT id, countrycode\n  FROM city \n  WHERE population &gt; 2000000\n)\nSELECT bo.countrycode, name_country, lifeexpectancy\nFROM better_off bo JOIN big_capital bc ON\n  (bo.countrycode=bc.countrycode AND bc.id=bo.capital) ;"
  },
  {
    "objectID": "slides/BD_admin_2.html#les-lois-des-tables",
    "href": "slides/BD_admin_2.html#les-lois-des-tables",
    "title": "BD VII: Administration et Droits",
    "section": "Les lois des tables",
    "text": "Les lois des tables\n\n\n\n\n\n\nCodd’s Twelve Principles\n\n\n\nInformation is represented logically in tables\n\nData must be logically accessible by table, primary key, and column.\n\nNull values must be uniformly treated as “missing information,” not as empty strings, blanks, or zeros.\nMetadata (data about the database) must be stored in the database just as regular data is\nA single language must be able to define data, views, integrity constraints, authorization, transactions, and data manipulation\n\nViews must show the updates of their base tables and vice versa\nA single operation must be available to do each of the following operations: retrieve data, insert data, update data, or delete data\nBatch and end-user operations are logically separate from physical storage and access methods\nBatch and end-user operations can change the database schema without having to recreate it or the applications built upon it\n\nIntegrity constraints must be available and stored in the metadata, not in an application program\nThe data manipulation language of the relational system should not care where or how the physical data is distributed and should not require alteration if the physical data is centralized or distributed\nAny row processing done in the system must obey the same integrity rules and constraints that set-processing operations do"
  },
  {
    "objectID": "slides/BD_admin_2.html#problème",
    "href": "slides/BD_admin_2.html#problème",
    "title": "BD VII: Administration et Droits",
    "section": "Problème",
    "text": "Problème\nUn serveur de BD met à la disposition d’une collectivité d’usagers un multitude de bases formées d’une collection de tables, de vues, de routines…\n\nLes usagers ne sont pas tous égaux…\n\n–\nCertains utilisateurs doivent pouvoir créer des bases, d’autres les mettre à jour, d’autres les consulter\n–\n\n\n Le contrôle de l’accès…\n\nPeut être motivé par un désir de maintenir l’intégrité ou la confidentialité des données.\nLe niveau de contrôle (granularité) désirable peut varier : base, schema, table, colonne, ligne…."
  },
  {
    "objectID": "slides/BD_admin_2.html#confidentialité-et-sécurité",
    "href": "slides/BD_admin_2.html#confidentialité-et-sécurité",
    "title": "BD VII: Administration et Droits",
    "section": "Confidentialité et sécurité",
    "text": "Confidentialité et sécurité\nObjectif :\nProtéger les données gérées contre tout accès (malveillant ou accidentel) non autorisé\n\n\nQuels outils ?\n\nUn système de privilèges implémenté dans SQL pour définir l’accès des usagers et plus généralement des rôles aux différents objets"
  },
  {
    "objectID": "slides/BD_admin_2.html#commandes",
    "href": "slides/BD_admin_2.html#commandes",
    "title": "BD VII: Administration et Droits",
    "section": "Commandes",
    "text": "Commandes\nPour octroyer ou retirer des droits d’accès (par exemple sur une relation ou une vue) :\nGRANT et REVOKE\nLes droits d’accès donnent la possibilité d’exécuter des requêtes SQL\n Le propriétaire (créateur) d’une relation à tous les droits sur cette relation et on ne peut lui les retirer"
  },
  {
    "objectID": "slides/BD_admin_2.html#les-commandes",
    "href": "slides/BD_admin_2.html#les-commandes",
    "title": "BD VII: Administration et Droits",
    "section": "Les commandes",
    "text": "Les commandes\nDépendent du type d’objet auquel on s’intéresse.\nPour une table ou une vue :\n\n\nSyntaxe :\nGRANT {ALL PRIVILEGES |\n   privilege {,privilege*}\nON {[TABLE] table_name [, ...]\n    | ALL TABLES IN SCHEMA schema_name}\nTO role-specification [, ...]\n[WITH GRANT OPTION]\n\nrole-specification :\nrole_name, PUBLIC, ...\n\nprivilege :\nSELECT, DELETE, INSERT,\nUPDATE [(nom-attribut\n    {, nom-attribut})],\nREFERENCES [(nom-attribut\n     {, nom-attribut})]\n\n *WITH GRANT OPTION:] si spécifié, donne le droit de transmettre les droits obtenus\n voir : https://www.postgresql.org/docs/current/sql-grant.html"
  },
  {
    "objectID": "slides/BD_admin_2.html#les-commandes-suite-granularité",
    "href": "slides/BD_admin_2.html#les-commandes-suite-granularité",
    "title": "BD VII: Administration et Droits",
    "section": "Les commandes (suite) : granularité",
    "text": "Les commandes (suite) : granularité\nOn peut aller plus loin et spécifier le droit d’accès à seulement une ou plusieurs colonnes d’une table\nPour d’autres objets, comme les domaines, fonction, bases de données, schémas ou rôles d’autres types de droits sont pertinents:\n\nle droit de créer une BD ou un schéma dans une BD existante\nle droit de se connecter à une BD existante\nle droit d’exécuter une fonction\nle droit d’usage d’un schéma (i.e. d’en voir les objets existants)\nle droit d’attribuer des rôles à des utilisateurs"
  },
  {
    "objectID": "slides/BD_admin_2.html#révoquer-des-droits",
    "href": "slides/BD_admin_2.html#révoquer-des-droits",
    "title": "BD VII: Administration et Droits",
    "section": "Révoquer des droits",
    "text": "Révoquer des droits\nvia le mot clé REVOKE\nSyntaxe (simplifiée) :\nREVOKE [ GRANT OPTION FOR ]\n{ { SELECT | INSERT | UPDATE | DELETE }\n| ALL [ PRIVILEGES ] }\n\nON { [ TABLE ] table_name [, ...]\n      | ALL TABLES IN SCHEMA schema_name }\n\nFROM role_spec [, ...]\n[ GRANTED BY role_spec ]\n[ CASCADE | RESTRICT ]\n *syntaxe complète:] voir https://www.postgresql.org/docs/current/sql-revoke.html\nCommentaire\n\nGRANT OPTION FOR\nCASCADE\nRESTRICT"
  },
  {
    "objectID": "slides/BD_admin_2.html#exemples",
    "href": "slides/BD_admin_2.html#exemples",
    "title": "BD VII: Administration et Droits",
    "section": "Exemples",
    "text": "Exemples\nGRANT USAGE\nON SCHEMA durand\nTO thomas007\n\nGRANT SELECT\nON ALL TABLES IN SCHEMA durand\nTO thomas007\n\n\nOn peut se mettre “à la place” de l’utilisateur thomas007 par la commande :\nset role thomas007\n\n\nREVOKE SELECT\nON ALL TABLES IN SCHEMA durand\nFROM thomas007\nREVOKE USAGE\nON SCHEMA durand\nFROM thomas007\nOn pouvait donner directement les mêmes droits à tous les utilisateurs d’un même rôle etudiant par exemple plutôt qu’un seul utilisateur\n\nUSAGE\nSELECT\nEXECUTE"
  },
  {
    "objectID": "slides/BD_admin_2.html#exemples-suite",
    "href": "slides/BD_admin_2.html#exemples-suite",
    "title": "BD VII: Administration et Droits",
    "section": "Exemples (suite)",
    "text": "Exemples (suite)\nSupposons que le schema durand contiennent une table resultat dont une des colonnes se nomme identifiant.\nQue peut faire (et ne pas faire) l’utilisateur thomas007 après ces trois commandes ?\n\nGRANT INSERT (identifiant) ON TABLE durand.resultat TO thomas007;\nGRANT USAGE ON SCHEMA durand  TO thomas007\nGRANT SELECT ON TABLE durand.resultat TO thomas007;\n\n\nIl peut selectionner les infos de la table resultat, inserer un tuple avec une valeur pour l’attribut identifiant et null pour les autres attributs\nIl ne peut pas effacer son insertion…"
  },
  {
    "objectID": "slides/BD_admin_2.html#politique-de-droits",
    "href": "slides/BD_admin_2.html#politique-de-droits",
    "title": "BD VII: Administration et Droits",
    "section": "Politique de droits",
    "text": "Politique de droits\n\nLors de la conception d’une base de données, on anticipe le fait que tous les utilisateurs ne vont pas avoir les mêmes droits\nIl peut y avoir plusieurs niveaux d’administrateurs aussi\nL’architecture des droits doit être pensée le plus finement possible pour éviter les problèmes de sécurité\nSQL permet d’implémenter directement cela (et ne pas le laisser à la couche applicative au dessus)\n\nRenvoyer aux principes de Codd"
  },
  {
    "objectID": "slides/BD_admin_2.html#administrer-utilisation-dune-métabase",
    "href": "slides/BD_admin_2.html#administrer-utilisation-dune-métabase",
    "title": "BD VII: Administration et Droits",
    "section": "Administrer : utilisation d’une “métabase”",
    "text": "Administrer : utilisation d’une “métabase”\n\n\nLes SGBD relationnels contiennent des schémas particuliers qui décrivent totalement l’état des bases :\n\nschéma existants,\ntables,\ncolonnes,\nutilisateurs,\nfonction stockées,\ncontraintes,\netc\n\n\nCes schémas constituent une métabase\nOn peut utiliser SQL pour interroger ces tables et donc (presque) tout savoir de l’état du SGBD sans faire appel à un langage extérieur\nOn peut aussi apporter des modifications en utilisant les instructions SQL classiques INSERT, UPDATE, DELETE, etc"
  },
  {
    "objectID": "slides/BD_admin_2.html#administrer-utilisation-dune-méta-base",
    "href": "slides/BD_admin_2.html#administrer-utilisation-dune-méta-base",
    "title": "BD VII: Administration et Droits",
    "section": "Administrer : utilisation d’une “méta-base”",
    "text": "Administrer : utilisation d’une “méta-base”\nDeux schémas jouent un rôle essentiel dans l’administration de Postgres (situation similaire dans tous les SGBD)\ninformation_schema\n\nles définitions de tables, de vues, de colonnes, les contraintes, …\nil est formé de tables et surtout de (très nombreuses) vues\ncomme pour les autres tables, les instructions, CREATE, ALTER, DROP modifient le contenu de ce schéma (une seule instruction ALTER TABLE peut engendrer en cascade plusieurs mises à jours dans les tables de information_schema)\ncontient, en théorie, des informations compatibles avec le standard SQL (identique sur tout SGBD respectant la norme)\n\npg_catalog\n\nContient des informations de nature similaire à information_schema mais spécifiques à l’organisation de Postgres"
  },
  {
    "objectID": "slides/BD_admin_2.html#quelques-tables-et-vues-de-information_schema",
    "href": "slides/BD_admin_2.html#quelques-tables-et-vues-de-information_schema",
    "title": "BD VII: Administration et Droits",
    "section": "Quelques tables et vues de information_schema\n",
    "text": "Quelques tables et vues de information_schema\n\n Une liste complète des tables et vues de information_schema se trouve ici :\nhttps://www.postgresql.org/docs/current/information-schema.html\nQuelques exemples:\n\nschemata contient la liste des schémas, leurs propriétaires, leurs catalogue d’appartenance, etc\ntables contient la liste des noms de toutes les tables et vues et, entre autres, leurs BD et schémas d’appartenance\ncolumns contient les noms de colonnes, les tables (et donc schémas et BD) auxquels elles appartiennent.\nrole_table_grants contient la liste de tous les droits alloués, à qui, par qui etc"
  },
  {
    "objectID": "slides/BD_admin_2.html#quelques-tables-et-vues-de-pg_catalog",
    "href": "slides/BD_admin_2.html#quelques-tables-et-vues-de-pg_catalog",
    "title": "BD VII: Administration et Droits",
    "section": "Quelques tables et vues de pg_catalog\n",
    "text": "Quelques tables et vues de pg_catalog\n\nUne liste complète des tables et vues de pg_catalog se trouve ici :\n https://www.postgresql.org/docs/current/catalogs.html\nQuelques exemples:\n\npg_user contient la liste des utilisateurs, leur id système\npg_tables contient des informations similaires à information_schema.tables\npg_views contient la liste des vues\npg_roles contient la liste des roles\npg_auth_members met en relation les rôles entre eux (quel rôle est contenu dans tel autre)"
  },
  {
    "objectID": "slides/BD_admin_2.html#exemples-1",
    "href": "slides/BD_admin_2.html#exemples-1",
    "title": "BD VII: Administration et Droits",
    "section": "Exemples",
    "text": "Exemples\nSELECT *\nFROM information_schema.tables;\nSELECT table_name\nFROM information_schema.tables\nWHERE table_type='VIEW' AND table_schema='durand';\n    +------------------+\n    | table_name       |\n    |------------------|\n    | listevuecc1      |\n    | notescc1         |\n    | listevuecc1_isif |\n    | q4               |\n    | q5               |\n    | q6               |\n    | defi1            |\n    | q1               |\n    | q2               |\n    | q3               |\n    +------------------+"
  },
  {
    "objectID": "slides/BD_admin_2.html#exemple-représentation-des-droits-dans-la-metabase",
    "href": "slides/BD_admin_2.html#exemple-représentation-des-droits-dans-la-metabase",
    "title": "BD VII: Administration et Droits",
    "section": "Exemple : Représentation des droits dans la metabase",
    "text": "Exemple : Représentation des droits dans la metabase\nSELECT table_schema, table_name, privilege_type\nFROM information_schema.role_table_grants\nWHERE grantee='durand'\n +----------------+--------------------+------------------+\n | table_schema   | table_name         | privilege_type   |\n |----------------+--------------------+------------------|\n | gestion_2022   | etudiantsmiashs    | INSERT           |\n | gestion_2022   | etudiantsmiashs    | SELECT           |\n | gestion_2022   | etudiantsmiashs    | UPDATE           |\n | gestion_2022   | etudiantsmiashs    | DELETE           |\n | gestion_2022   | etudiantsmiashs    | TRUNCATE         |\n | gestion_2022   | etudiantsmiashs    | REFERENCES       |\n | gestion_2022   | etudiantsmiashs    | TRIGGER          |"
  },
  {
    "objectID": "slides/BD_admin_2.html#information_schema.table_privileges",
    "href": "slides/BD_admin_2.html#information_schema.table_privileges",
    "title": "BD VII: Administration et Droits",
    "section": "information_schema.table_privileges",
    "text": "information_schema.table_privileges\nThe view table_privileges identifies all privileges granted on tables or views to a currently enabled role or by a currently enabled role.\nThere is one row for each combination of table, grantor, and grantee.\n\nLe role PUBLIC dispose du privilège de SELECT sur les tables de pg_catalog et de information_schema"
  },
  {
    "objectID": "slides/BD_intro.html#les-données-en-sciences-sociales",
    "href": "slides/BD_intro.html#les-données-en-sciences-sociales",
    "title": "BD I: Introduction aux SGBD",
    "section": "Les données en Sciences Sociales",
    "text": "Les données en Sciences Sociales\nPourquoi ?\nDe quoi sont faites les données ?\nComment les accumuler ?\nComment les interroger ?\nComment les conserver ? les éditer ?"
  },
  {
    "objectID": "slides/BD_intro.html#sources",
    "href": "slides/BD_intro.html#sources",
    "title": "BD I: Introduction aux SGBD",
    "section": "Sources",
    "text": "Sources\nData humanities with R. Arnold and Tilton\nQuantitative tour at social sciences Gelman and ?\nHumanités numériques\n\nConstitution\nAcquisition\nUsage(s)\nMaintenance"
  },
  {
    "objectID": "slides/BD_intro.html#les-données-de-lentreprisedes-administrations",
    "href": "slides/BD_intro.html#les-données-de-lentreprisedes-administrations",
    "title": "BD I: Introduction aux SGBD",
    "section": "Les données de l’entreprise/des administrations",
    "text": "Les données de l’entreprise/des administrations\n\n\n\nLa comptabilité\nLes stocks (ERP)\nLa clientèle (CRM)\n…\n\n\nTODO"
  },
  {
    "objectID": "slides/BD_intro.html#la-vie-des-données",
    "href": "slides/BD_intro.html#la-vie-des-données",
    "title": "BD I: Introduction aux SGBD",
    "section": "La vie des données",
    "text": "La vie des données\n\nSaisie\nTraitement(s)\nUsage(s)\nArchivage\nMaintenance"
  },
  {
    "objectID": "slides/BD_intro.html#les-enjeux",
    "href": "slides/BD_intro.html#les-enjeux",
    "title": "BD I: Introduction aux SGBD",
    "section": "Les enjeux",
    "text": "Les enjeux"
  },
  {
    "objectID": "slides/BD_intro.html#avant-hier",
    "href": "slides/BD_intro.html#avant-hier",
    "title": "BD I: Introduction aux SGBD",
    "section": "Avant-hier",
    "text": "Avant-hier\n\n\nLes entreprises et les administrations ont toujours cultivé une mémoire sous forme de fichiers plus ou moins mécanisés et formattés.\nCes collections de fichiers mécanisées répondaient à des exigences de fiabilité, de convenance (facilité de la recherche, de la maintenance)"
  },
  {
    "objectID": "slides/BD_intro.html#aujourdhui",
    "href": "slides/BD_intro.html#aujourdhui",
    "title": "BD I: Introduction aux SGBD",
    "section": "Aujourd’hui",
    "text": "Aujourd’hui\nExplosion des volumes\nBesoins mixtes"
  },
  {
    "objectID": "slides/BD_intro.html#systèmes-dinformation-si-et-bases-de-données-bd-sgbd-sgbdr",
    "href": "slides/BD_intro.html#systèmes-dinformation-si-et-bases-de-données-bd-sgbd-sgbdr",
    "title": "BD I: Introduction aux SGBD",
    "section": "Systèmes d’information (SI) et Bases de Données (BD, SGBD, SGBDR)",
    "text": "Systèmes d’information (SI) et Bases de Données (BD, SGBD, SGBDR)\nAu coeur des systèmes d’information (modernes) on trouve les bases de données"
  },
  {
    "objectID": "slides/BD_intro.html#des-propriétés-désirables-acid",
    "href": "slides/BD_intro.html#des-propriétés-désirables-acid",
    "title": "BD I: Introduction aux SGBD",
    "section": "Des propriétés désirables (ACID)",
    "text": "Des propriétés désirables (ACID)\nQuelle que soit la forme, on souhaite avoir :\n\nAtomicité : chaque ajout/modification d’information doit former un tout cohérent. Si tout se passe correctement, les actions de la transaction sont toutes validées, sinon on retourne à l’état initial. L’unité de travail est indivisible. Une transaction ne peut être partiellement effectuée.\nCohérence : le contenu de la base de données doit rester conforme à des contraintes qui ont été définies lors de la conception de la base\nIsolation : la bases de données doit pouvoir être utilisée concurremment par plusieurs usagers\nDurabilité : la vie d’une base de données s’étale sur plusieurs dizaines d’années"
  },
  {
    "objectID": "slides/BD_intro.html#bases-de-données",
    "href": "slides/BD_intro.html#bases-de-données",
    "title": "BD I: Introduction aux SGBD",
    "section": "Bases de données\n",
    "text": "Bases de données\n\n\n\nQu’est-ce que c’est ?\nCe sont des logiciels intermédiaires (middleware) entre :\n\nSystèmes de gestion de fichiers/Systèmes d’exploitation\nApplications (CRM, ERP, CMS, …)\n\nLes bases de données ne sont pas (simplement) un langage (comme JAVA,  ou un environnement de calcul"
  },
  {
    "objectID": "slides/BD_intro.html#collection-de-tablesdata-frames",
    "href": "slides/BD_intro.html#collection-de-tablesdata-frames",
    "title": "BD I: Introduction aux SGBD",
    "section": "Collection de tables/data frames",
    "text": "Collection de tables/data frames\nCaricaturalement :\n\nUne base de données relationnelle est une collection de tables\n\nLes tables s’incarnent de plusieurs façons en informatique\nR, Pandas, les tableurs (Excel …), offrent un environnement interactif de manipulation de données et un environnement de définition de données"
  },
  {
    "objectID": "slides/BD_intro.html#data-frame",
    "href": "slides/BD_intro.html#data-frame",
    "title": "BD I: Introduction aux SGBD",
    "section": "Data frame",
    "text": "Data frame\n\n\nUn dataframe est une liste de vecteurs (colonnes)\nLes vecteurs (colonnes) d’un dataframe sont tous de même longueur\nLes éléments d’un vecteur sont d’un même type de base\nChaque vecteur a un nom et son propre type"
  },
  {
    "objectID": "slides/BD_intro.html#autres-environments-excel-java-python",
    "href": "slides/BD_intro.html#autres-environments-excel-java-python",
    "title": "BD I: Introduction aux SGBD",
    "section": "Autres environments (Excel, JAVA, Python)",
    "text": "Autres environments (Excel, JAVA, Python)\n\n\nLes spreadsheet des tableurs\nLes Dataframes de Pandas \nLes tableaux d’objets en JAVA\n\npermettent de représenter ce que les dataframes représentent en R"
  },
  {
    "objectID": "slides/BD_intro.html#les-sgbd-vont-au-delà",
    "href": "slides/BD_intro.html#les-sgbd-vont-au-delà",
    "title": "BD I: Introduction aux SGBD",
    "section": "Les SGBD vont au delà :",
    "text": "Les SGBD vont au delà :\nIls offrent:\n\nPersistance\n\n\nEntre deux sessions les données sont confiées au système de fichiers de l’ordinateur\n\n\nIntégrité\n\n\nLes données confiées au système de fichiers ne peuvent pas être altérées par d’autre logiciel\n\n\nConcurrence\n\nLes données peuvent être manipulées/consultées/mises à jour de manière concurrente par plusieurs ou du moins par une grande quantité d’ utilisateurs."
  },
  {
    "objectID": "slides/BD_intro.html#usages",
    "href": "slides/BD_intro.html#usages",
    "title": "BD I: Introduction aux SGBD",
    "section": "Usages",
    "text": "Usages\n\nSites web dynamiques\nLogiciels personnels\n\nDerrière certaines applications (gestion de photos, de carnet d’adresses, …), on trouve des bases de données légères (SQLITE)\n\n\nPartout\n\nsmartphones, tablettes, …\nweb, réseaux sociaux\nadministrations (APOGEE, …)\nentreprises (Stocks Supply Chain, Customer Relationship Management, …)\nNSA"
  },
  {
    "objectID": "slides/BD_intro.html#lidée-clé-codd-1970",
    "href": "slides/BD_intro.html#lidée-clé-codd-1970",
    "title": "BD I: Introduction aux SGBD",
    "section": "L’idée clé (Codd, 1970)",
    "text": "L’idée clé (Codd, 1970)\nOrganiser les informations en tables ou relations\nDévelopper et formaliser un langage de manipulation de tables : l’algèbre relationnelle} (langage SQL, Structured Query Language)\n\nL’usager peut définir l’organisation des données\nIl peut interroger celles-ci (par des requêtes)\n\nLe langage est déclaratif :\n\nOn décrit ce que l’on veut obtenir (quoi mais pas comment)\nLe système fait le reste…\n\n\nL’évaluation de toutes les requêtes s’arrête (au moins en théorie : si on y met les moyens…)\nL’algèbre relationnelle/SQL n’est pas un langage complet (différence avec JAVA, C, Python, etc)"
  },
  {
    "objectID": "slides/BD_intro.html#quelques-acteurs",
    "href": "slides/BD_intro.html#quelques-acteurs",
    "title": "BD I: Introduction aux SGBD",
    "section": "Quelques acteurs",
    "text": "Quelques acteurs\n\n\nServeurs\n\nORACLE (commercial)\nDB2 (IBM commercial)\nSQLSERVER (Microsoft commercial)\nMySQL (open source)\nPostGres (open source)\nHana (commercial)\n\n\nClients\n\npsql\npgcli\ndbeaver\nPgAdmin4\n…"
  },
  {
    "objectID": "slides/BD_intro.html#postgres-postgresql",
    "href": "slides/BD_intro.html#postgres-postgresql",
    "title": "BD I: Introduction aux SGBD",
    "section": "PostGres (PostgreSQL)",
    "text": "PostGres (PostgreSQL)\n\nUn serveur : etu-pgsql\nUn catalogue : bd_2023-24\nDes schémas: world, pagila, nycflights13, ..."
  },
  {
    "objectID": "slides/BD_intro.html#un-exemple-de-schéma-world",
    "href": "slides/BD_intro.html#un-exemple-de-schéma-world",
    "title": "BD I: Introduction aux SGBD",
    "section": "Un exemple de schéma world\n",
    "text": "Un exemple de schéma world\n\nUn schema\nDes schémas de table\n\ncontinent : association nom de continent (texte)-code de continent (entier)\ncountry : chaque tuple porte sur un état/territoire\ncity : chaque tuple porte sur une ville (déisgnée par id) qui appartient à un état/territoire désigné par countrycode\ncountrylanguage : chaque tuple indique la part de la population d’un état/territoire (désigné par countrycode) qui parle/connaît une langue (désignée par language) et précise si la langue est officielle dans cet état/territoire."
  },
  {
    "objectID": "slides/BD_intro.html#détails-du-schema-world",
    "href": "slides/BD_intro.html#détails-du-schema-world",
    "title": "BD I: Introduction aux SGBD",
    "section": "Détails du schema world\n",
    "text": "Détails du schema world\n\n\nImage WorldUn schéma de table : la donnée des noms des colonnes et des types des colonnes"
  },
  {
    "objectID": "slides/BD_intro.html#quelques-questions-et-propriétés-typiques",
    "href": "slides/BD_intro.html#quelques-questions-et-propriétés-typiques",
    "title": "BD I: Introduction aux SGBD",
    "section": "Quelques questions et propriétés typiques",
    "text": "Quelques questions et propriétés typiques\n\nExtraire de l’information\n\nAssurer de la cohérence après modification\n\nFaire en sorte que chaque état/territoire soit identifié par un numéro unique\nFaire en sorte que chaque ville soit identifiée par un numéro unique\nNe pas proposer de données sur des villes/territoires/états qui n’existent pas\n\n\n\nPropager l’information\n\nHistoriciser le schéma"
  },
  {
    "objectID": "slides/BD_intro.html#objectifs-du-cours",
    "href": "slides/BD_intro.html#objectifs-du-cours",
    "title": "BD I: Introduction aux SGBD",
    "section": "Objectifs du cours",
    "text": "Objectifs du cours\n\nCompétences d’un usager de BD relationnelles\nExprimer des requêtes en algèbre relationnelle et en SQL\nSQL Définition, manipulation et contrôle des données\nConcevoir un Modèle Conceptuel de Données (Entités/Associations)\nDéterminer les dépendances fonctionnelles et normaliser une relation"
  },
  {
    "objectID": "slides/BD_intro.html#plan-du-cours",
    "href": "slides/BD_intro.html#plan-du-cours",
    "title": "BD I: Introduction aux SGBD",
    "section": "Plan du cours",
    "text": "Plan du cours\n\nAlgèbre et calcul relationnels\nSQL (algèbre relationnelle stricte)\nSQL sous-requêtes\nSQL agrégation\nSQL requêtes paramétrées\nDéfinition de données/Conception\nNormalisation"
  },
  {
    "objectID": "slides/BD_intro.html#entrepôts-de-données-fin-des-années-1980",
    "href": "slides/BD_intro.html#entrepôts-de-données-fin-des-années-1980",
    "title": "BD I: Introduction aux SGBD",
    "section": "Entrepôts de données (Fin des années 1980)",
    "text": "Entrepôts de données (Fin des années 1980)\n(Datawarehouse)\n\nUn Data Warehouse est une technologie qui regroupe des données structurées provenant d’une ou de plusieurs sources afin qu’elles puissent être comparées et analysées.\n\n\nEntrepôt_de_données sur Wikipedia"
  },
  {
    "objectID": "slides/BD_intro.html#lacs-de-données-2010",
    "href": "slides/BD_intro.html#lacs-de-données-2010",
    "title": "BD I: Introduction aux SGBD",
    "section": "Lacs de données (2010)",
    "text": "Lacs de données (2010)\n(Datalake)\n\nLe concept de Data Lake a été évoqué pour la première fois, en 2010, par James Dixon, comme une solution pour le stockage de données sans pré-traitement et sans connaître précisément l’usage futur qui en sera fait. L’image du lac, permettant d’expliquer, que différentes sources peuvent l’alimenter de manière naturelle et brute, et que les utilisateurs peuvent y plonger pour l’explorer et en rapporter des échantillons à examiner"
  },
  {
    "objectID": "slides/BD_intro.html#au-delà-du-relationnel-no-sql",
    "href": "slides/BD_intro.html#au-delà-du-relationnel-no-sql",
    "title": "BD I: Introduction aux SGBD",
    "section": "Au delà du relationnel: No SQL",
    "text": "Au delà du relationnel: No SQL\n\nCe sont les grandes entreprises du web amenées à traiter des volumes de données très importants qui ont été les premières confrontées aux limitations intrinsèques des SGBD relationnels traditionnels. Ces systèmes fondés sur une application stricte des propriétés ACID et généralement conçus pour fonctionner sur des ordinateurs uniques ont rapidement posé des problèmes d’extensibilité.\n\n\nAfin de répondre à ces limites, ces entreprises ont commencé à développer leurs propres systèmes de gestion de bases de données pouvant fonctionner sur des architectures matérielles distribuées et permettant de traiter des volumes de données importants. Les systèmes propriétaires qui en ont résulté, Google (BigTable), Amazon (Dynamo (en)), LinkedIn (Voldemort), Facebook (Cassandra puis HBase), SourceForge.net (MongoDB), Ubuntu One (CouchDB), Baidu (Hypertable) ont été les précurseurs du modèle NoSQL.\n\n\nLes performances restent bonnes avec la montée en charge en multipliant simplement le nombre de serveurs, solution raisonnable avec la baisse des coûts, en particulier si les revenus croissent en même temps que l’activité5. Les systèmes géants sont les premiers concernés : énormes quantités de données6, structuration relationnelle faible (ou de moindre importance que la capacité d’accès très rapide, quitte à multiplier les serveurs).\n\n\nUn modèle typique en NoSQL est le système clé-valeur, avec une base de données pouvant se résumer topologiquement à un simple tableau associatif unidimensionnel avec des millions — voire des milliards — d’entrées. Parmi les applications typiques, on retrouve des analyses temps-réel, statistiques, du stockage de logs (journaux), etc.\n\n\nNoSQL"
  },
  {
    "objectID": "slides/BD_intro.html#lire-plus",
    "href": "slides/BD_intro.html#lire-plus",
    "title": "BD I: Introduction aux SGBD",
    "section": "Lire plus",
    "text": "Lire plus\nGuy Harrison. Next Generation Databases. NoSQL, NewSQL, Big Data"
  },
  {
    "objectID": "slides/LDD_2.html#schema-de-world",
    "href": "slides/LDD_2.html#schema-de-world",
    "title": "BD VII: Corriger le schéma World",
    "section": "Schema de world",
    "text": "Schema de world"
  },
  {
    "objectID": "slides/LDD_2.html#conraintes-sur-la-table-country",
    "href": "slides/LDD_2.html#conraintes-sur-la-table-country",
    "title": "BD VII: Corriger le schéma World",
    "section": "Conraintes sur la table country",
    "text": "Conraintes sur la table country\n\nUn pays est identifié par son countrycode\nDeux pays ne devraient pas avoir le même nom\nUne région ne devrait appartenir qu’à un seul continent\nLa capitale d’un pays devrait être une ville connue dans city\nLa capitale d’un pays devrait être une ville de ce pays\nLes capitales de deux pays différents devraient être des villes différentes\n…\n\nCe ne sont pas les seules contraintes possibles"
  },
  {
    "objectID": "slides/LDD_2.html#mise-en-œuvre-des-contraintes",
    "href": "slides/LDD_2.html#mise-en-œuvre-des-contraintes",
    "title": "BD VII: Corriger le schéma World",
    "section": "Mise en œuvre des contraintes",
    "text": "Mise en œuvre des contraintes\n\nUn pays est identifié par son countrycode : PRIMARY KEY\nDeux pays ne devraient pas avoir le même nom : UNIQUE\nUne région ne devrait appartenir qu’à un seul continent : ???\nLa capitale d’un pays devrait être une ville connue dans city : REFERENCES\nLa capitale d’un pays devrait être une ville de ce pays : ???\nLes capitales de deux pays différents devraient être des villes différentes : UNIQUE\nDeux pays différents ne peuvent avoir le même code2"
  },
  {
    "objectID": "slides/LDD_2.html#examen-du-schema-de-country",
    "href": "slides/LDD_2.html#examen-du-schema-de-country",
    "title": "BD VII: Corriger le schéma World",
    "section": "Examen du schema de country",
    "text": "Examen du schema de country\n+--------------------+---------------+-----------+----------+--------------+-------------+\n| Column             | Type          | Modifiers | Storage  | Stats target | Description |\n|--------------------+---------------+-----------+----------+--------------+-------------|\n| countrycode        | character(3)  |  not null | extended | &lt;null&gt;       | &lt;null&gt;      |\n| name_country       | text          |  not null | extended | &lt;null&gt;       | &lt;null&gt;      |\n| continent          | text          |  not null | extended | &lt;null&gt;       | &lt;null&gt;      |\n| region             | text          |  not null | extended | &lt;null&gt;       | &lt;null&gt;      |\n| surfacearea        | real          |  not null | plain    | &lt;null&gt;       | &lt;null&gt;      |\n| indepyear          | smallint      |           | plain    | &lt;null&gt;       | &lt;null&gt;      |\n| population_country | integer       |  not null | plain    | &lt;null&gt;       | &lt;null&gt;      |\n| lifeexpectancy     | real          |           | plain    | &lt;null&gt;       | &lt;null&gt;      |\n| gnp                | numeric(10,2) |           | main     | &lt;null&gt;       | &lt;null&gt;      |\n| gnpold             | numeric(10,2) |           | main     | &lt;null&gt;       | &lt;null&gt;      |\n| localname          | text          |  not null | extended | &lt;null&gt;       | &lt;null&gt;      |\n| governmentform     | text          |  not null | extended | &lt;null&gt;       | &lt;null&gt;      |\n| headofstate        | text          |           | extended | &lt;null&gt;       | &lt;null&gt;      |\n| capital            | integer       |           | plain    | &lt;null&gt;       | &lt;null&gt;      |\n| code2              | character(2)  |  not null | extended | &lt;null&gt;       | &lt;null&gt;      |\n+--------------------+---------------+-----------+----------+--------------+-------------+\nUn schéma de table ne se réduit pas"
  },
  {
    "objectID": "slides/LDD_2.html#continued",
    "href": "slides/LDD_2.html#continued",
    "title": "BD VII: Corriger le schéma World",
    "section": "(continued)",
    "text": "(continued)\nIndexes:\n    \"country_pkey\" PRIMARY KEY, btree (countrycode)\nCheck constraints:\n    \"country_continent_check\" CHECK (continent = 'Asia'::text OR \n                                     continent = 'Europe'::text OR \n                                     continent = 'North America'::text OR \n                                     continent = 'Africa'::text OR\n                                     continent = 'Oceania'::text OR\n                                     continent = 'Antarctica'::text OR\n                                     continent = 'South America'::text),\nForeign-key constraints:\n    \"country_capital_fkey\" FOREIGN KEY (capital) REFERENCES city(id)\n    \"country_fk\" FOREIGN KEY (continent) REFERENCES code_continent(continent)"
  },
  {
    "objectID": "slides/LDD_2.html#ddl-pour-country",
    "href": "slides/LDD_2.html#ddl-pour-country",
    "title": "BD VII: Corriger le schéma World",
    "section": "DDL pour country",
    "text": "DDL pour country\nCREATE TABLE world.country (\n    countrycode bpchar(3) NOT NULL,\n    name_country text NOT NULL,\n    continent text NOT NULL,\n    region text NOT NULL,\n    surfacearea float4 NOT NULL,\n    indepyear int2 NULL,\n    population_country int4 NOT NULL,\n    lifeexpectancy float4 NULL,\n    gnp numeric(10, 2) NULL,\n    gnpold numeric(10, 2) NULL,\n    localname text NOT NULL,\n    governmentform text NOT NULL,\n    headofstate text NULL,\n    capital int4 NULL,\n    code2 bpchar(2) NOT NULL,\n    CONSTRAINT country_continent_check CHECK (((continent = 'Asia'::text) \n    OR (continent = 'Europe'::text) \n    OR (continent = 'North America'::text) \n    OR (continent = 'Africa'::text) \n    OR (continent = 'Oceania'::text)\n    OR (continent = 'Antarctica'::text) \n    OR (continent = 'South America'::text))),\n    CONSTRAINT country_pkey PRIMARY KEY (countrycode)\n);"
  },
  {
    "objectID": "slides/LDD_2.html#ajout-de-contraintes-référentielles",
    "href": "slides/LDD_2.html#ajout-de-contraintes-référentielles",
    "title": "BD VII: Corriger le schéma World",
    "section": "Ajout de contraintes référentielles",
    "text": "Ajout de contraintes référentielles\n-- world.country foreign keys\n\nALTER TABLE world.country ADD CONSTRAINT \n  country_capital_fkey FOREIGN KEY (capital) REFERENCES world.city(id);\n\nALTER TABLE world.country ADD CONSTRAINT \n  country_fk FOREIGN KEY (continent) REFERENCES world.code_continent(continent);\nLes contraintes country_capital_fkey et country_fk sont émises par la table country"
  },
  {
    "objectID": "slides/LDD_2.html#contraintes-ajoutées",
    "href": "slides/LDD_2.html#contraintes-ajoutées",
    "title": "BD VII: Corriger le schéma World",
    "section": "Contraintes ajoutées",
    "text": "Contraintes ajoutées\n-- world.country foreign keys\n\nALTER TABLE world.country ADD CONSTRAINT \n  country_capital_fkey FOREIGN KEY (capital) REFERENCES world.city(id);\n\nALTER TABLE world.country ADD CONSTRAINT \n  country_fk FOREIGN KEY (continent) REFERENCES world.code_continent(continent);\n La contrainte country_fk sur continent remplit la même fonction que la contrainte country_continent_check\n\n Conseil:\n\nSi le domaine est de grande cardinalité, utiliser une table pour représenter le domaine, et une contrainte référentielle\nSi le domaine est de petite cardinalité, une contrainte CHECK est aussi pratique\n\n\n\n Comment procéder pour mettre en œuvre une contrainte de domaine sur region ?"
  },
  {
    "objectID": "slides/LDD_2.html#une-région-nappartient-quà-un-continent",
    "href": "slides/LDD_2.html#une-région-nappartient-quà-un-continent",
    "title": "BD VII: Corriger le schéma World",
    "section": "Une région n’appartient qu’à un continent",
    "text": "Une région n’appartient qu’à un continent\nCette contrainte signifie que le résultat de la requête suivante est vide :\nSELECT *\nFROM world.country c1 JOIN world.country c2 ON \n  (c1.continent&lt;&gt; c2.continent AND c1.region=c2.region);\n\nOn exclut l’existence de deux lignes qui coïncideraient sur region mais pas sur continent\nNous postulons l’existence d’une dépendance fonctionnelle\n\\[\\texttt{region} \\longrightarrow \\texttt{continent}\\]\n\n\nOn peut considérer qu’il s’agit d’une anomalie de schéma et normaliser le schéma\nOn peut mettre en place une contrainte d’exclusion avec EXCLUDE"
  },
  {
    "objectID": "slides/LDD_2.html#index-pour-la-contrainte-dexclusion",
    "href": "slides/LDD_2.html#index-pour-la-contrainte-dexclusion",
    "title": "BD VII: Corriger le schéma World",
    "section": "Index pour la contrainte d’exclusion",
    "text": "Index pour la contrainte d’exclusion"
  },
  {
    "objectID": "slides/LDD_2.html#éclatement-de-la-table-country",
    "href": "slides/LDD_2.html#éclatement-de-la-table-country",
    "title": "BD VII: Corriger le schéma World",
    "section": "Éclatement de la table country",
    "text": "Éclatement de la table country\n\nMise en place d’une table region_continent(region, continent)\nÉmission d’une contrainte référentielle de country vers region_continent"
  },
  {
    "objectID": "slides/LDD_2.html#préparation",
    "href": "slides/LDD_2.html#préparation",
    "title": "BD VII: Corriger le schéma World",
    "section": "Préparation",
    "text": "Préparation\nCREATE SCHEMA monde AUTHORIZATION superdupont ;\n\nGRANT ALL ON SCHEMA monde TO superdupont ;\n\nCREATE TABLE monde.code_continent AS \n       TABLE world.code_continent ;\n\nALTER TABLE monde.code_continent ADD CONSTRAINT \n  code_continent_pk PRIMARY KEY (codecontinent);\nALTER TABLE monde.code_continent ADD CONSTRAINT \n  code_continent_un UNIQUE (continent);"
  },
  {
    "objectID": "slides/LDD_2.html#création-de-region_continent",
    "href": "slides/LDD_2.html#création-de-region_continent",
    "title": "BD VII: Corriger le schéma World",
    "section": "Création de region_continent",
    "text": "Création de region_continent\nCREATE TABLE monde.region_continent AS \n  SELECT DISTINCT region, continent \n  FROM world.country c ;\nLa requête suivante renvoie une table vide:\nSELECT * \nFROM monde.region_continent rc1 JOIN \n     monde.region_continent rc2 ON (\n    rc1.region=rc2.region AND \n  rc1.continent&lt;&gt; rc2.continent\n) ;\nALTER TABLE monde.region_continent ADD CONSTRAINT \n    region_continent_pk PRIMARY KEY (region);\n\nALTER TABLE mode.region_continent ADD CONSTRAINT \n  region_continent_fk FOREIGN KEY (continent) \n  REFERENCES monde.code_continent(continent);"
  },
  {
    "objectID": "slides/LDD_2.html#création-de-la-table-monde.country",
    "href": "slides/LDD_2.html#création-de-la-table-monde.country",
    "title": "BD VII: Corriger le schéma World",
    "section": "Création de la table monde.country",
    "text": "Création de la table monde.country\nCREATE TABLE monde.country AS  \n  SELECT  countrycode, name_country, region, surfacearea, \n          indepyear, population_country, \n          lifeexpectancy, gnp, gnpold, localname,\n          governmentform, headofstate, capital,  code2            \n  FROM world.country ;\n sans colonne continent"
  },
  {
    "objectID": "slides/LDD_2.html#mise-en-place-des-contraintes-sur-monde.country",
    "href": "slides/LDD_2.html#mise-en-place-des-contraintes-sur-monde.country",
    "title": "BD VII: Corriger le schéma World",
    "section": "Mise en place des contraintes sur monde.country",
    "text": "Mise en place des contraintes sur monde.country\nALTER TABLE monde.country ADD CONSTRAINT \n  country_pk PRIMARY KEY (countrycode);\nALTER TABLE monde.country ADD CONSTRAINT c\n  ountry_un_name UNIQUE (name_country);\nALTER TABLE monde.country ADD CONSTRAINT \n  country_un_code2 UNIQUE (code2);\nALTER TABLE monde.country ADD CONSTRAINT \n  country_un_capital UNIQUE (capital);\n\nALTER TABLE monde.country ADD CONSTRAINT country_fk \n  FOREIGN KEY (region) REFERENCES monde.region_continent(region) \n  ON DELETE SET NULL \n  ON UPDATE CASCADE;"
  },
  {
    "objectID": "slides/LDD_2.html#copie-de-city",
    "href": "slides/LDD_2.html#copie-de-city",
    "title": "BD VII: Corriger le schéma World",
    "section": "Copie de city",
    "text": "Copie de city\nCREATE TABLE monde.city AS TABLE world.city;\n On a copié le schéma a minima (sans les contraintes)"
  },
  {
    "objectID": "slides/LDD_2.html#dans-un-pays-plusieurs-villes-peuvent-elles-porter-le-même-nom",
    "href": "slides/LDD_2.html#dans-un-pays-plusieurs-villes-peuvent-elles-porter-le-même-nom",
    "title": "BD VII: Corriger le schéma World",
    "section": "Dans un pays plusieurs villes peuvent elles porter le même nom ?",
    "text": "Dans un pays plusieurs villes peuvent elles porter le même nom ?\nSELECT *\nFROM monde.city c JOIN monde.city c2 \n    ON (c.name_city=c2.name_city AND \n      c.countrycode = c2.countrycode  AND \n      c.id&lt;&gt; c2.id) ;\nrenvoie 48 lignes\n\nSELECT *\nFROM monde.city c JOIN monde.city c2 \n    ON (c.name_city=c2.name_city AND \n      c.countrycode = c2.countrycode  AND\n      c.district = c2.district  AND\n      c.id&lt;&gt; c2.id) ;\nrenvoie 2 lignes"
  },
  {
    "objectID": "slides/LDD_2.html#existe-t-il-un-pays-dont-la-capitale-est-dans-un-autre-pays",
    "href": "slides/LDD_2.html#existe-t-il-un-pays-dont-la-capitale-est-dans-un-autre-pays",
    "title": "BD VII: Corriger le schéma World",
    "section": "Existe-t-il un pays dont la capitale est dans un autre pays ?",
    "text": "Existe-t-il un pays dont la capitale est dans un autre pays ?\nSELECT c. countrycode, c.name_country, cc.name_city, cc.countrycode\nFROM world.country c JOIN world.city cc ON (c.capital=cc.id AND cc.countrycode &lt;&gt; c.countrycode) ;\nrenvoie 0 lignes"
  },
  {
    "objectID": "slides/LDD_2.html#blocages-possibles",
    "href": "slides/LDD_2.html#blocages-possibles",
    "title": "BD VII: Corriger le schéma World",
    "section": " Blocages possibles",
    "text": "Blocages possibles\nSi\n\ncity emet une contrainte référentielle sur country (countrycode)\ncountry emet une contrainte référentielle sur city (capital \\(\\rightarrow\\) id)\n\nRisque de blocage : qui précède la capitale ou le pays ?"
  },
  {
    "objectID": "slides/LDD_2.html#émission-de-la-contrainte-de-city-vers-country",
    "href": "slides/LDD_2.html#émission-de-la-contrainte-de-city-vers-country",
    "title": "BD VII: Corriger le schéma World",
    "section": "Émission de la contrainte de city vers country",
    "text": "Émission de la contrainte de city vers country\nALTER TABLE monde.city \n  ADD CONSTRAINT city_fk FOREIGN KEY (countrycode) \n      REFERENCES monde.country(countrycode) \n  ON DELETE SET NULL ON UPDATE CASCADE;"
  },
  {
    "objectID": "slides/LDD_2.html#table-countrylanguage",
    "href": "slides/LDD_2.html#table-countrylanguage",
    "title": "BD VII: Corriger le schéma World",
    "section": "Table countrylanguage",
    "text": "Table countrylanguage\nCREATE TABLE monde.countrylanguage  AS TABLE world.countrylanguage ;\nALTER TABLE monde.countrylanguage \n  ADD CONSTRAINT countrylanguage_fk \n        FOREIGN KEY (countrycode) REFERENCES monde.country(countrycode) \n        ON DELETE CASCADE \n      ON UPDATE CASCADE;\n\nALTER TABLE monde.countrylanguage \n  ADD CONSTRAINT countrylanguage_pk \n    PRIMARY KEY (\"language\",countrycode);\n\nALTER TABLE monde.countrylanguage \n  ADD CONSTRAINT countrylanguage_check \n    CHECK (percentage &lt;= 100.0 AND percentage &gt;=0.0 );"
  },
  {
    "objectID": "slides/LDD_2.html#synthèse-régionale",
    "href": "slides/LDD_2.html#synthèse-régionale",
    "title": "BD VII: Corriger le schéma World",
    "section": "Synthèse régionale",
    "text": "Synthèse régionale\nCREATE OR REPLACE VIEW monde.regionale AS (\nSELECT C.region, \n       SUM(c.population_country) AS population_region,\n       SUM(COALESCE(c.surfacearea, 0)) AS surfacearea_region,\n       SUM(c.gnp) AS gnp_region,\n       SUM(c.gnpold) AS gnpold_region\nFROM monde.country c \nGROUP BY c.region ) ;"
  },
  {
    "objectID": "slides/LDD_2.html#synthèse-continentale",
    "href": "slides/LDD_2.html#synthèse-continentale",
    "title": "BD VII: Corriger le schéma World",
    "section": "Synthèse continentale",
    "text": "Synthèse continentale\nSELECT r.* \nFROM monde.regionale r JOIN monde.region_continent rc \n     ON (r.region=rc.region AND rc.continent='Europe') ;\n+----------------+-----------------+------------------+----------+-------------+\n|region          |population_region|surfacearea_region|gnp_region|gnpold_region|\n+----------------+-----------------+------------------+----------+-------------+\n|Western Europe  |        183247600|         1108456.5|4673272.00|   4578420.00|\n|Southern Europe |        144674200|         1316392.4|2012289.00|   1944737.00|\n|Baltic Countries|          7561900|          175117.0|  22418.00|     18595.00|\n|Nordic Countries|         24166400|         1321901.0| 676655.00|    677698.00|\n|British Islands |         63398500|          313173.0|1454251.00|   1369962.00|\n|Eastern Europe  |        307026000|          18814094| 659980.00|    792589.00|"
  },
  {
    "objectID": "slides/LDD_2.html#synthèse-continentale-1",
    "href": "slides/LDD_2.html#synthèse-continentale-1",
    "title": "BD VII: Corriger le schéma World",
    "section": "Synthèse continentale",
    "text": "Synthèse continentale\nCREATE OR REPLACE VIEW monde.continentale AS (\nSELECT rc.continent, \n       SUM(r.population_region) AS population,\n       SUM(r.surfacearea_region) AS surfacearea,\n       SUM(r.gnp_region) AS gcp,\n       SUM(r.gnpold_region) AS gcpold\nFROM monde.regionale r JOIN monde.region_continent rc \n     ON (r.region=rc.region) \nGROUP BY rc.continent;) ;\n+-------------+----------+-----------+----------+----------+\n|continent    |population|surfacearea|gcp       |gcpold    |\n+-------------+----------+-----------+----------+----------+\n|South America| 345780000|   17864926|1511874.00|1520641.00|\n|North America| 482993000|   24214472|9688627.20|9288175.00|\n|Oceania      |  30401150|  8564294.0| 419774.70| 469058.00|\n|Antarctica   |         0|   13132101|      0.00|          |\n|Africa       | 784475000|   30250376| 580375.00| 553264.00|\n|Europe       | 730074600|   23049132|9498865.00|9382001.00|\n|Asia         |3705025700|   31881006|7655392.00|8251969.00|"
  },
  {
    "objectID": "slides/SQL_5.html#trois-objectifs",
    "href": "slides/SQL_5.html#trois-objectifs",
    "title": "BD : Fonctions et extension PlpgSQL de SQL",
    "section": "Trois objectifs",
    "text": "Trois objectifs\n\nAutomatisation de taches répétitives (administration)\n\n\nOn veut répéter une même tache sur une collection de schémas\nOn veut traiter une collection de roles\n\n\n\nCalculs impossibles à réaliser en SQL :\n\n\nCalculer la fermeture transitive d’une relation comme film_actors\n\nL’algèbre relationnelle est un modèle de calculabilité restreint·\n\n\nTriggers\n\n\nCertaines contraintes ne peuvent pas être mises en place avec les seules constructions primary key , unique, foreign key, check et exclude (notamment des contraintes d’exclusion qui mettent en jeu plusieurs tables).\nOn peut les maintenir à l’aide de traitements spéciaux : les triggers\n\nLes triggers reposent sur des fonctions spéciales\n\n\nExtensions procédurales de SQL\nplpgsql : Programming Language PostGres SQL"
  },
  {
    "objectID": "slides/SQL_5.html#automatisation-des-tâches-répétitives-deux-outils-nécessaires",
    "href": "slides/SQL_5.html#automatisation-des-tâches-répétitives-deux-outils-nécessaires",
    "title": "BD : Fonctions et extension PlpgSQL de SQL",
    "section": "Automatisation des tâches répétitives : deux outils nécessaires",
    "text": "Automatisation des tâches répétitives : deux outils nécessaires\nLorsqu’on administre une base, on doit souvent engendrer des requêtes dynamiques à l’intérieur d’une fonction PL/pgSQL, c’est à dire des commandes qui vont concerner des tables ou des types différents à chaque exécution\nLes requêtes préparées sont alors très utilement combinées avec les structures de contrôle (itérations, alternatives) pour automatiser les tâches !\n\n 2 outils (pour étendre SQL) :\n\nrequêtes dynamiques EXECUTE, PREPARE\n\nstructures de contrôles IF, LOOP, ... Transforment SQL en un langage de programmation"
  },
  {
    "objectID": "slides/SQL_5.html#fonction-inventory_in_stock",
    "href": "slides/SQL_5.html#fonction-inventory_in_stock",
    "title": "BD : Fonctions et extension PlpgSQL de SQL",
    "section": "Fonction inventory_in_stock()\n",
    "text": "Fonction inventory_in_stock()\n\nObjectif : calculer si un dvd est en stock ou pas\nUn DVD est en stock\n\ns’il n’a jamais été loué\n\nOU\n\nsi toutes les locations de ce DVD sont déjà terminées (return_date n’est pas nul)\n\n-- AN ITEM IS IN-STOCK IF THERE ARE EITHER NO ROWS IN THE rental TABLE\n-- FOR THE ITEM OR ALL ROWS HAVE return_date POPULATED"
  },
  {
    "objectID": "slides/SQL_5.html#fonction-inventory_in_stock-1",
    "href": "slides/SQL_5.html#fonction-inventory_in_stock-1",
    "title": "BD : Fonctions et extension PlpgSQL de SQL",
    "section": "Fonction inventory_in_stock\n",
    "text": "Fonction inventory_in_stock\n\nCREATE OR REPLACE FUNCTION sakila.inventory_in_stock(p_inventory_id integer)\n RETURNS boolean\n LANGUAGE plpgsql\nAS $function$\nDECLARE                 \n    v_rentals INTEGER;  #&lt;&lt;\n    v_out     INTEGER;  #&lt;&lt;\nBEGIN\n    SELECT count(*) INTO v_rentals  #&lt;&lt;\n    FROM rental\n    WHERE inventory_id = p_inventory_id;\n\n    IF v_rentals = 0 THEN   #&lt;&lt;\n      RETURN TRUE;          #&lt;&lt; \n    END IF;                 #&lt;&lt;\n\n    SELECT COUNT(rental_id) INTO v_out     #&lt;&lt; \n    FROM inventory LEFT JOIN rental USING(inventory_id)\n    WHERE inventory.inventory_id = p_inventory_id AND rental.return_date IS NULL;\n\n    IF v_out &gt; 0 THEN\n      RETURN FALSE;\n    ELSE\n      RETURN TRUE;\n    END IF;\nEND $function$ ;"
  },
  {
    "objectID": "slides/SQL_5.html#section",
    "href": "slides/SQL_5.html#section",
    "title": "BD : Fonctions et extension PlpgSQL de SQL",
    "section": "",
    "text": "SELECT ... INTO ...\n\nLe résultat de la requête est ici un entier, il est affecté à une variable locale comme v_rentals, v_out, …\nEn plpgsql, le résultat d’une requête doit être mémorisé ou explicitement négligé en utilisant PERFORM plutôt que SELECT\n\nIF ... THEN ...\n\nAlternative, comme dans un langage de programmation ordinaire\n\nRETURN\n\nRetourne le résultat et termine l’exécution de la fonction"
  },
  {
    "objectID": "slides/SQL_5.html#une-tâche-de-surveillancemaintenance",
    "href": "slides/SQL_5.html#une-tâche-de-surveillancemaintenance",
    "title": "BD : Fonctions et extension PlpgSQL de SQL",
    "section": "Une tâche de surveillance/maintenance",
    "text": "Une tâche de surveillance/maintenance\n\nDéterminer pour chaque usager (schéma) le nombre de tuples dans la table ville_pays de cet usager.\nPour chaque schéma schema, on veut évaluer une requête\nSELECT COUNT(*) \nFROM schema.ville_pays ;\nIci schema doit être calculé en interrogeant le SGBD\n\nSituation inédite :\n\ncomment déterminer les schémas pertinents ?"
  },
  {
    "objectID": "slides/SQL_5.html#la-métabase-information_schema-et-pg_catalog",
    "href": "slides/SQL_5.html#la-métabase-information_schema-et-pg_catalog",
    "title": "BD : Fonctions et extension PlpgSQL de SQL",
    "section": "La métabase : information_schema et pg_catalog\n",
    "text": "La métabase : information_schema et pg_catalog\n\nOn va s’aider des tables d’administration du SGBD\nChaque usager correspond à un role et ce rôle correspond dans notre cas à un schema créé à partir du rôle via l’instruction\nCREATE SCHEMA AUTHORIZATION user_name ;\nOn a envie d’écrire une requête comme\nSELECT COUNT(*) FROM username.tournaments ; \noù username est collectée à partir de\nSELECT usename  FROM pg_catalog.pg_user ;"
  },
  {
    "objectID": "slides/SQL_5.html#deux-schémas-pour-ladministration-la-métabase",
    "href": "slides/SQL_5.html#deux-schémas-pour-ladministration-la-métabase",
    "title": "BD : Fonctions et extension PlpgSQL de SQL",
    "section": "Deux schémas pour l’administration : la métabase\n",
    "text": "Deux schémas pour l’administration : la métabase\n\n\ninformation_schema\n\nCe schema contient l’information sur les schémas du cluster/catalogue :\n\nles définitions de tables, de vues, de colonnes, les contraintes, …\nil est formé de tables et surtout de (très nombreuses) vues\nles instructions, CREATE, ALTER,  DROP modifient le contenu de ce schéma (une seule instruction ALTER  TABLE peut engendrer plusieurs mises à jours dans les tables de information_schema\n\n\n\npg_catalog\n\nCe schema contient lui aussi beaucoup de tables et de vues utiles au fonctionnement du serveur"
  },
  {
    "objectID": "slides/SQL_5.html#exemple-de-vue-de-pg_catalog-pg_user",
    "href": "slides/SQL_5.html#exemple-de-vue-de-pg_catalog-pg_user",
    "title": "BD : Fonctions et extension PlpgSQL de SQL",
    "section": "Exemple de vue de pg_catalog : pg_user\n",
    "text": "Exemple de vue de pg_catalog : pg_user\n\n\n\nSchéma\n+--------------+---------+-------------+\n| Column       | Type    | Modifiers   |\n|--------------+---------+-------------|\n| usename      | name    |             |\n| usesysid     | oid     |             |\n| usecreatedb  | boolean |             |\n| usesuper     | boolean |             |\n| userepl      | boolean |             |\n| usebypassrls | boolean |             |\n| passwd       | text    |             |\n| valuntil     | abstime |             |\n| useconfig    | text[]  |             |\n+--------------+---------+-------------+\n\npg_user nous renseigne sur :\n\n\n les usagers (usename)\n\n leur statut (usesuper : super-utilisateur ou pas)\n\n leurs privilèges (createdb : peut créer une base ou non)"
  },
  {
    "objectID": "slides/SQL_5.html#autre-exemple-dusage-de-la-métabase",
    "href": "slides/SQL_5.html#autre-exemple-dusage-de-la-métabase",
    "title": "BD : Fonctions et extension PlpgSQL de SQL",
    "section": "Autre exemple d’usage de la métabase",
    "text": "Autre exemple d’usage de la métabase\nSELECT datname, application_name, client_addr, backend_start, state \nFROM pg_catalog.pg_stat_activity psa \nWHERE datname='bd_2023';                                               \n\n+-----------+-------------------------------------------+---------------+-------------------------------+---------+\n| datname   | application_name                          | client_addr   | backend_start                 | state   |\n|-----------+-------------------------------------------+---------------+-------------------------------+---------|\n| bd_2023   | DBeaver 22.2.0 - Main &lt;bd_2023&gt;           | 127.0.0.1     | 2022-10-04 22:48:59.57231+02  | idle    |\n| bd_2023   | DBeaver 22.2.0 - Metadata &lt;bd_2023&gt;       | 127.0.0.1     | 2022-10-04 22:48:59.693656+02 | idle    |\n| bd_2023   | DBeaver 22.2.0 - SQLEditor &lt;Script-4.sql&gt; | 127.0.0.1     | 2022-10-04 22:48:59.958616+02 | idle    |\n| bd_2023   | pgcli                                     | &lt;null&gt;        | 2022-10-04 23:23:19.739258+02 | active  |\n| bd_2023   | pgcli                                     | &lt;null&gt;        | 2022-10-04 23:23:19.770006+02 | idle    |\n+-----------+-------------------------------------------+---------------+-------------------------------+---------+"
  },
  {
    "objectID": "slides/SQL_5.html#tentative",
    "href": "slides/SQL_5.html#tentative",
    "title": "BD : Fonctions et extension PlpgSQL de SQL",
    "section": "Tentative",
    "text": "Tentative\nOn engendre dynamiquement une série de requêtes par une instruction de la forme :\nSELECT \n    'SELECT ' || quote_literal(usename) || ', COUNT(*)  FROM ' || usename || '.ville_pays ;'\nFROM pg_catalog.pg_user  ;\n A quoi sert quote_literal() ?"
  },
  {
    "objectID": "slides/SQL_5.html#le-résultat-est-une-table-de-chaines-de-caractères",
    "href": "slides/SQL_5.html#le-résultat-est-une-table-de-chaines-de-caractères",
    "title": "BD : Fonctions et extension PlpgSQL de SQL",
    "section": "Le résultat est une table de chaines de caractères",
    "text": "Le résultat est une table de chaines de caractères\nrqt                                                      |\n---------------------------------------------------------+\nSELECT 'postgres', COUNT(*)  FROM postgres.ville_pays ;  |\nSELECT 'shinken', COUNT(*)  FROM shinken.ville_pays ;    |\nSELECT 'aalahy99', COUNT(*)  FROM aalahy99.ville_pays ;  |\nSELECT 'etemam', COUNT(*)  FROM etemam.ville_pays ;      |\nSELECT 'durand', COUNT(*)  FROM durand.ville_pays ;      |\n...\n\nTel quel, cela ne fonctionnera pas !\n\nIl faut pouvoir confier ces chaines de caractères à l’évaluateur de requêtes\nIl faut pouvoir le faire pour chacune des chaines de caractères produites par la requête (itérer)"
  },
  {
    "objectID": "slides/SQL_5.html#mode-opératoire",
    "href": "slides/SQL_5.html#mode-opératoire",
    "title": "BD : Fonctions et extension PlpgSQL de SQL",
    "section": "Mode opératoire",
    "text": "Mode opératoire\nCREATE OR REPLACE FUNCTION taille_ville_pays()\nLANGUAGE plpgsql RETURNS  TEXT AS\n$$\nDECLARE\n  stmt CHARACTER VARYING ;\n  usename CHARACTER VARYING ;\n  result CHARACTER VARYING    := '' ;\n  resp CHARACTER VARYING := '' ;\nBEGIN\nFOR usename IN SELECT u.usename  #&lt;&lt;\n  FROM pg_catalog.pg_user AS u JOIN\n  information_schema.tables t ON\n  (u.usename=t.table_schema and t.table_name ='ville_pays')\nLOOP\n  stmt = 'SELECT CAST(COUNT(*) AS VARCHAR) FROM '|| usename||'.ville_pays #&lt;&lt;\n  result:=result || usename || ': ' ||resp| '; ';   #&lt;&lt; \nEND LOOP ;\nRETURN result ; #&lt;&lt; \nEND;$$ ;"
  },
  {
    "objectID": "slides/SQL_5.html#extension-de-sql",
    "href": "slides/SQL_5.html#extension-de-sql",
    "title": "BD : Fonctions et extension PlpgSQL de SQL",
    "section": "Extension de SQL",
    "text": "Extension de SQL\nA travers ces deux exemples, on a vu quelques particularités des extensions possible de SQL en un langage procédural pgplSQL. Le principe est le même dans la plupart des SGBD permettant une telle extension (Oracle, SQL Server, …). Il repose sur la norme SQL.\nOn a besoin :\n\nd’instructions conditionnelles (si … alors … sinon)\nd’instruction itératives (boucles)\nde la capacité à définir des variables\n\nde mécanismes d’articulations entre SQL et son extension procédurale :\n\nPouvoir stocker le résultat d’une requête (avec résultat unique) dans une variable\nPouvoir stocker, les uns après les autres, les résultats d’une requêtes complexes pour traitement, définir un curseur (CURSOR)"
  },
  {
    "objectID": "slides/SQL_5.html#extension-de-sql-1",
    "href": "slides/SQL_5.html#extension-de-sql-1",
    "title": "BD : Fonctions et extension PlpgSQL de SQL",
    "section": "Extension de SQL",
    "text": "Extension de SQL\nOn doit avoir un mécanisme qui permet conserver les programmes écrits pour les utiliser lors de sessions futures\nLe langage plpgsql permet :\n\nde définir des fonctions et procédures stockées…\nqui vont avoir la même persistence que les tables, vues, etc\nL’existence de ces fonctions, leurs codes, etc, seront conservés dans des tables et vue d’administration (information_schema.routines)."
  },
  {
    "objectID": "slides/SQL_5.html#exemple",
    "href": "slides/SQL_5.html#exemple",
    "title": "BD : Fonctions et extension PlpgSQL de SQL",
    "section": "Exemple",
    "text": "Exemple\nSELECT routine_catalog, routine_schema, routine_name, data_type, security_type\nFROM information_schema.routines    #&lt;&lt; \nWHERE routine_type='FUNCTION' AND specific_schema='sakila'   #&lt;&lt; \n\nroutine_catalog|routine_schema|routine_name              |data_type   |security_type|\n---------------+--------------+--------------------------+------------+-------------+\nbd_2023        |sakila        |_group_concat             |text        |INVOKER      |\nbd_2023        |sakila        |film_in_stock             |integer     |INVOKER      |\nbd_2023        |sakila        |film_not_in_stock         |integer     |INVOKER      |\nbd_2023        |sakila        |get_customer_balance      |numeric     |INVOKER      |\nbd_2023        |sakila        |inventory_held_by_customer|integer     |INVOKER      |\nbd_2023        |sakila        |inventory_in_stock        |boolean     |INVOKER      |\nbd_2023        |sakila        |last_day                  |date        |INVOKER      |\nbd_2023        |sakila        |last_updated              |trigger     |INVOKER      |\nbd_2023        |sakila        |rewards_report            |USER-DEFINED|DEFINER      |"
  },
  {
    "objectID": "slides/SQL_5.html#rewards_report-signature",
    "href": "slides/SQL_5.html#rewards_report-signature",
    "title": "BD : Fonctions et extension PlpgSQL de SQL",
    "section": "\nrewards_report signature",
    "text": "rewards_report signature\nCREATE OR REPLACE FUNCTION \n    sakila.rewards_report(min_monthly_purchases integer, \n                          min_dollar_amount_purchased numeric)\n RETURNS SETOF sakila.customer\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\nDECLARE\n    last_month_start DATE;\n    last_month_end DATE;\nrr RECORD;\ntmpSQL TEXT;\nBEGIN\n...\nEND $$ ;\nDétermine la liste des bons clients qui beaucoup consommé durant le dernier mois écoulé"
  },
  {
    "objectID": "slides/SQL_5.html#section-1",
    "href": "slides/SQL_5.html#section-1",
    "title": "BD : Fonctions et extension PlpgSQL de SQL",
    "section": "",
    "text": "la signature comporte une déclaration de type originale\nla déclaration des variables locales mentionne un type fourre-tout\n\nSETOF customer\nTable de même schéma que customer (mêmes colonnes)\nConstruction très très utile : SETOF nom_de_table\nRECORD\nUn type générique (fourre-tout) pour désigner les types composés (en particulier comme les types définis à partir des tables)"
  },
  {
    "objectID": "slides/SQL_5.html#rewards_report-corps-i",
    "href": "slides/SQL_5.html#rewards_report-corps-i",
    "title": "BD : Fonctions et extension PlpgSQL de SQL",
    "section": "\nrewards_report corps (I)",
    "text": "rewards_report corps (I)\nBEGIN\n    /* Some sanity checks... */\n    IF min_monthly_purchases = 0 THEN\n        RAISE EXCEPTION 'Minimum monthly purchases parameter must be &gt; 0';\n    END IF;\n    IF min_dollar_amount_purchased = 0.00 THEN\n        RAISE EXCEPTION 'Minimum monthly dollar amount purchased parameter must be &gt; $0.00';  #&lt;&lt; \n    END IF;\n\n    last_month_start := CURRENT_DATE - '3 month'::interval;\n    last_month_start := to_date((extract(YEAR FROM last_month_start) || '-' || extract(MONTH FROM last_month_start) || '-01'),'YYYY-MM-DD');\n    last_month_end := LAST_DAY(last_month_start);\n...\n\n RAISE EXCEPTION 'msg'\ntermine (en erreur) l’exécution de la fonction envoie un message d’erreur"
  },
  {
    "objectID": "slides/SQL_5.html#rewards_report-corps-ii",
    "href": "slides/SQL_5.html#rewards_report-corps-ii",
    "title": "BD : Fonctions et extension PlpgSQL de SQL",
    "section": "\nrewards_report corps (II)",
    "text": "rewards_report corps (II)\n/*\n    Create a temporary storage area for Customer IDs.\n    */\n    CREATE TEMPORARY TABLE tmpCustomer (customer_id INTEGER NOT NULL PRIMARY KEY);\n\n    /*\n    Find all customers meeting the monthly purchase requirements\n    */\n\n    tmpSQL := 'INSERT INTO tmpCustomer (customer_id)\n        SELECT p.customer_id\n        FROM payment AS p\n        WHERE DATE(p.payment_date) BETWEEN '|| quote_literal(last_month_start) ||' AND '|| quote_literal(last_month_end) || '\n        GROUP BY customer_id\n        HAVING SUM(p.amount) &gt; ' || min_dollar_amount_purchased || \n        'AND COUNT(customer_id) &gt; ' || \n        min_monthly_purchases ;\n\n    EXECUTE tmpSQL;  #&lt;&lt;"
  },
  {
    "objectID": "slides/SQL_5.html#create-temporary-table-...",
    "href": "slides/SQL_5.html#create-temporary-table-...",
    "title": "BD : Fonctions et extension PlpgSQL de SQL",
    "section": "\n CREATE TEMPORARY TABLE ...\n",
    "text": "CREATE TEMPORARY TABLE ...\n\nCrée une table (très simple ici) qui sera détruite avant la fin de l’exécution de la fonction.\nSi l’exécution de la fonction devait être interrompue, cette table ne survivrait pas à la session qui a invoqué la fonction"
  },
  {
    "objectID": "slides/SQL_5.html#pourquoi-utiliser-une-requête-créée-dynamiquement",
    "href": "slides/SQL_5.html#pourquoi-utiliser-une-requête-créée-dynamiquement",
    "title": "BD : Fonctions et extension PlpgSQL de SQL",
    "section": "Pourquoi utiliser une requête créée dynamiquement ?",
    "text": "Pourquoi utiliser une requête créée dynamiquement ?\n\nEst ce une nécessité ici ?\nSi non, quel est l’intérêt ?"
  },
  {
    "objectID": "slides/SQL_5.html#rewards_report-corps-iii",
    "href": "slides/SQL_5.html#rewards_report-corps-iii",
    "title": "BD : Fonctions et extension PlpgSQL de SQL",
    "section": "\nrewards_report corps III",
    "text": "rewards_report corps III\n/*\n    Output ALL customer information of matching rewardees.\n    Customize output as needed.\n    */\n    FOR rr IN EXECUTE 'SELECT c.* FROM tmpCustomer AS t INNER JOIN customer AS c ON t.customer_id = c.customer_id' LOOP\n        RETURN NEXT rr;   #&lt;&lt;\n    END LOOP;\n\n    /* Clean up */\n    tmpSQL := 'DROP TABLE tmpCustomer';\n    EXECUTE tmpSQL;\n\nRETURN;   #&lt;&lt;\nEND\n$function$ ;"
  },
  {
    "objectID": "slides/LDD_1.html#problème",
    "href": "slides/LDD_1.html#problème",
    "title": "BD : Contraintes",
    "section": "Problème",
    "text": "Problème\n\nLa définition d’un schéma de base ne s’arrête pas à la définition des tables, des colonnes et des types des colonnes\n\n\n\nLes contraintes décrivent des propriétés que devront vérifier toutes les mises en oeuvre (instances) du schéma durant toute sa durée de vie"
  },
  {
    "objectID": "slides/LDD_1.html#contrainte-de-type",
    "href": "slides/LDD_1.html#contrainte-de-type",
    "title": "BD : Contraintes",
    "section": "Contrainte de type",
    "text": "Contrainte de type\nUne contrainte de type spécifie le type d’une colonne\nLes contrainte de type sont les plus simples à mettre en oeuvre.\n\nAu delà des types de base varchar, integer, ... PostgreSQL propose des types sophistiqués pour :\n\ndates,\nles estampilles avec ou sans fuseau horaire,\ndes types intervalles (rangetype),\ndes types énumérés,\ndes types tableaux,\netc"
  },
  {
    "objectID": "slides/LDD_1.html#consulter-la-liste-des-types",
    "href": "slides/LDD_1.html#consulter-la-liste-des-types",
    "title": "BD : Contraintes",
    "section": "Consulter la liste des types",
    "text": "Consulter la liste des types\nhttps://docs.postgresql.fr/docs/current/datatype.html\nIl faut essayer d’utiliser ces types pour préciser les contenus des colonnes\n Les types disponibles diffèrent d’un SGBD à l’autre (Mysql, Postgres, Oracle, SQL Server, …)"
  },
  {
    "objectID": "slides/LDD_1.html#contraintes-de-tuple",
    "href": "slides/LDD_1.html#contraintes-de-tuple",
    "title": "BD : Contraintes",
    "section": "Contraintes de tuple",
    "text": "Contraintes de tuple\nUne contrainte de tuple peut être vérifiée tuple par tuple (ligne par ligne)\n\nLors d’une insertion ou d’une modification de tuple, il suffit de vérifier que la contrainte est respectée par le nouveau tuple"
  },
  {
    "objectID": "slides/LDD_1.html#exemple",
    "href": "slides/LDD_1.html#exemple",
    "title": "BD : Contraintes",
    "section": "Exemple",
    "text": "Exemple\nDans un tuple de Piece, on devrait toujours avoir une valeur du prix positive.\nOn peut imposer cela en ajoutant au schéma de la table Piece une contrainte de type CHECK"
  },
  {
    "objectID": "slides/LDD_1.html#exemple-suite",
    "href": "slides/LDD_1.html#exemple-suite",
    "title": "BD : Contraintes",
    "section": "Exemple (suite)",
    "text": "Exemple (suite)\nCREATE TABLE piece(\n    nomp VARCHAR(20),\n    prix MONEY CHECK (prix&gt;= 0::money), #&lt;&lt;\n    couleur VARCHAR(15)\n);\n\nHave a look at PostGres Monetary type"
  },
  {
    "objectID": "slides/LDD_1.html#exemple-world.country-smaller",
    "href": "slides/LDD_1.html#exemple-world.country-smaller",
    "title": "BD : Contraintes",
    "section": "Exemple world.country {smaller}",
    "text": "Exemple world.country {smaller}\nDans un tuple de country, les colonnes numériques ne devraient pas prendre de valeur négative\n\nCREATE TABLE world.country (\n    countrycode BPCHAR(3) NOT NULL,\n    name_country TEXT NOT NULL,\n    continent TEXT NOT NULL,\n    region TEXT NOT NULL,\n    surfacearea FLOAT4 CHECK (surfacearea&gt;= 0) NOT NULL, #&lt;&lt;\n    indepyear INT2 NULL,\n    population_country INT4 NOT NULL,\n    lifeexpectancy FLOAT4 CHECK (lifeexpectancy&gt;= 0) NULL, #&lt;&lt;\n    gnp NUMERIC(10, 2) NULL,    #&lt;&lt;\n    gnpold NUMERIC(10, 2) NULL,  #&lt;&lt;\n    localname TEXT NOT NULL,\n    governmentform TEXT NOT NULL,\n    headofstate TEXT NULL,\n    capital INT4 NULL,\n    code2 BPCHAR(2) NOT NULL,\n    CONSTRAINT country_continent_check CHECK (\n        ((continent = 'Asia'::text) OR (continent = 'Europe'::text) OR \n         (continent = 'North America'::text) OR (continent = 'Africa'::text) OR \n         (continent = 'Oceania'::text) OR (continent = 'Antarctica'::text) OR \n         (continent = 'South America'::text))),\n    CONSTRAINT country_pkey PRIMARY KEY (countrycode)\n);"
  },
  {
    "objectID": "slides/LDD_1.html#contrainte-de-vérification---exemple-suite",
    "href": "slides/LDD_1.html#contrainte-de-vérification---exemple-suite",
    "title": "BD : Contraintes",
    "section": "Contrainte de vérification - Exemple (suite)",
    "text": "Contrainte de vérification - Exemple (suite)\nCREATE TABLE piece(\n    nomp VARCHAR(20),\n    prix moNey CHECK (prix&gt;= 0::money),  #&lt;&lt;\n    prix_promo MONEY CHECK (prix_promo &gt;= 0::MONEY), #&lt;&lt;\n    couleur VARCHAR(15),\n    CHECK(prix &gt; prix_promo) #&lt;&lt;\n); \n\nINSERT INTO piece VALUES('x21', 1.51, 1.61,'rouge');\nERROR:  new row for relation \"piece\" violates check constraint piece_check \n\n\nINSERT INTO piece VALUES('x21', 1.51, null,'rouge');\nest accepté"
  },
  {
    "objectID": "slides/LDD_1.html#valeurs-nulles-et-contraintes-de-tuple",
    "href": "slides/LDD_1.html#valeurs-nulles-et-contraintes-de-tuple",
    "title": "BD : Contraintes",
    "section": "\n Valeurs nulles et contraintes de tuple",
    "text": "Valeurs nulles et contraintes de tuple\nLes contraintes CHECK sont satisfaites si l’expression associée vaut TRUE ou NULL\n\nComme une expression composée vaut parfois NULL si l’un des opérandes vaut lui-même NULL, les contraintes CHECK ne suffisent pas à prévenir l’insertion de valeurs nulles\n\n\nIl faut compléter les contraintes de tuple avec des contraintes de non-nullité"
  },
  {
    "objectID": "slides/LDD_1.html#pourquoi-imposer-quune-colonne-soit-toujours-renseignée",
    "href": "slides/LDD_1.html#pourquoi-imposer-quune-colonne-soit-toujours-renseignée",
    "title": "BD : Contraintes",
    "section": "Pourquoi imposer qu’une colonne soit toujours renseignée ?",
    "text": "Pourquoi imposer qu’une colonne soit toujours renseignée ?\nLa présence possible des valeurs nulles rend beaucoup d’opérations complexes\nIl faut avoir en tête que en SQL,\n\nles booléens peuvent avoir trois valeurs : TRUE, FALSE et NULL et que\nle fait qu’une expression ne vaille pas FALSE ne veut pas dire qu’elle vaut TRUE …\n\n\nPour imposer qu’une colonne soit renseignée :\n\npréciser après le type : NOT NULL"
  },
  {
    "objectID": "slides/LDD_1.html#contrainte-de-non-nullité-exemple",
    "href": "slides/LDD_1.html#contrainte-de-non-nullité-exemple",
    "title": "BD : Contraintes",
    "section": "Contrainte de non-nullité (Exemple)",
    "text": "Contrainte de non-nullité (Exemple)\nCREATE TABLE piece(\n    nomp VARCHAR(20) NOT NULL,\n    prix MONEY CHECK (prix&gt;= 0::MONEY),  #&lt;&lt;\n    prix_promo MONEY CHECK (prix_promo &gt;= 0::MONEY),  #&lt;&lt;\n    couleur VARCHAR(15),\n    CHECK (prix &gt; prix_promo)   #&lt;&lt;\n);"
  },
  {
    "objectID": "slides/LDD_1.html#contrainte-dunicité-1",
    "href": "slides/LDD_1.html#contrainte-dunicité-1",
    "title": "BD : Contraintes",
    "section": "Contrainte d’unicité",
    "text": "Contrainte d’unicité\n\nLes contraintes d’unicité garantissent l’unicité des données contenues dans une colonne ou un groupe de colonnes par rapport à toutes les lignes de la table\nC’est une contrainte de table puisqu’elle fait intervenir tous les tuples de la table\n\nCREATE TABLE piece(\n    nomp VARCHAR(20) NOT NULL UNIQUE, #&lt;&lt; \n    prix money CHECK (prix&gt;= 0::money),\n    prix_promo MONEY CHECK (prix_promo &gt;= 0::MONEY),\n    couleur VARCHAR(15),\n    CHECK (prix &gt; prix_promo)\n);"
  },
  {
    "objectID": "slides/LDD_1.html#contrainte-dunicité-2",
    "href": "slides/LDD_1.html#contrainte-dunicité-2",
    "title": "BD : Contraintes",
    "section": "Contrainte d’unicité",
    "text": "Contrainte d’unicité\n\nLa contrainte d’unicité peut porter sur un groupe de colonnes\n\nCREATE TABLE fournisseur(\n    nomf VARCHAR(20) NOT NULL,\n    villef VARCHAR(20) NOT NULL,\n    UNIQUE(nomf, villef)  #&lt;&lt;\n);\n\nIl ne peut pas avoir deux lignes identiques dans la table fournisseur"
  },
  {
    "objectID": "slides/LDD_1.html#clef-primaire-primary-key",
    "href": "slides/LDD_1.html#clef-primaire-primary-key",
    "title": "BD : Contraintes",
    "section": "Clef primaire : PRIMARY KEY\n",
    "text": "Clef primaire : PRIMARY KEY\n\n\nUne contrainte de type clef primaire indique qu’une colonne, ou un groupe de colonnes, peuvent être utilisée comme un identifiant unique de ligne pour cette table.\nCeci nécessite que les valeurs soient à la fois uniques et NON NULL\nLes définitions de table suivantes acceptent de ce fait les mêmes données\n\n\n\nCREATE TABLE fournisseur(\n    nomf VARCHAR(20) NOT NULL,\n    villef VARCHAR(20) NOT NULL,\n    UNIQUE(nomf, villef)  \n);\n\nCREATE TABLE fournisseur(\n    nomf VARCHAR(20),\n    villef VARCHAR(20),\n    PRIMARY KEY (nomf, villef)  #&lt;&lt;\n);\n\n Une table a au plus une clef primaire"
  },
  {
    "objectID": "slides/LDD_1.html#clef-étrangère-1",
    "href": "slides/LDD_1.html#clef-étrangère-1",
    "title": "BD : Contraintes",
    "section": "Clef étrangère",
    "text": "Clef étrangère\n\nUne contrainte de clef étrangère stipule que les valeurs d’une colonne (ou d’un groupe de colonnes) doivent correspondre aux valeurs qui apparaissent dans les lignes d’une autre table.\nOn dit que cela maintient l’intégrité référentielle entre les deux tables\nSoit les deux tables suivantes\n\n\n\nCREATE TABLE fournisseur(\n    idf INT PRIMARY KEY,\n    nomf VARCHAR(20),\n    villef VARCHAR(20)\n);\n\nCREATE TABLE piece(\n    nomp VARCHAR(20) PRIMARY KEY,\n    prix MONEY CHECK \n        (prix&gt;= 0::MONEY),\n    prix_promo MONEY CHECK \n        (prix_promo &gt;= 0::MONEY),\n    couleur VARCHAR(15),\n    CHECK (prix &gt; prix_promo)\n);"
  },
  {
    "objectID": "slides/LDD_1.html#clef-étrangère-references",
    "href": "slides/LDD_1.html#clef-étrangère-references",
    "title": "BD : Contraintes",
    "section": "Clef étrangère : REFERENCES",
    "text": "Clef étrangère : REFERENCES\n\nSoit également une table livraison qui stocke les livraisons de ces pièces\nIl est intéressant de s’assurer que la table livraison ne contient que des références de pièces et de fournisseurs qui existent dans la base\n\nPour cela, deux contraintes de clef étrangère sont émises par la table des livraisons\n\nUne contrainte référence piece\n\nUne contrainte référence fournisseur\n\n\nCREATE TABLE livraison(\n    numliv INT PRIMARY KEY,\n    idf INT REFERENCES fournisseur,  #&lt;&lt; \n    nomp VARCHAR(20) REFERENCES piece,  #&lt;&lt;\n    dateLiv DATE DEFAULT NOW(),\n    quantite INT DEFAULT 1 CHECK (quantite&gt;=0)\n);\n \n\nIl est désormais impossible de créer des livraisons pour lesquelles les valeurs non NULL de nomp n’apparaissent pas dans la table piece et les valeurs non NULL de idf n’apparaissent pas dans la table fournisseur\nOn dit que la table des livraisons est la table qui référence et la table des pièces est la table référencée"
  },
  {
    "objectID": "slides/LDD_1.html#définition-de-world.countrylanguage",
    "href": "slides/LDD_1.html#définition-de-world.countrylanguage",
    "title": "BD : Contraintes",
    "section": "Définition de world.countrylanguage",
    "text": "Définition de world.countrylanguage\n+-------------+--------------+-------------+\n| Column      | Type         | Modifiers   |\n|-------------+--------------+-------------|\n| countrycode | character(3) |  not null   |\n| language    | text         |  not null   |\n| isofficial  | boolean      |  not null   |\n| percentage  | real         |  not null   |\n+-------------+--------------+-------------+\nIndexes:\n    \"countrylanguage_pkey\" PRIMARY KEY, btree (countrycode, language)"
  },
  {
    "objectID": "slides/LDD_1.html#définition-de-world.country-smaller",
    "href": "slides/LDD_1.html#définition-de-world.country-smaller",
    "title": "BD : Contraintes",
    "section": "Définition de world.country {smaller}",
    "text": "Définition de world.country {smaller}\n+--------------------+---------------+-------------+\n| Column             | Type          | Modifiers   |\n|--------------------+---------------+-------------|\n| countrycode        | character(3)  |  not null   |\n| name_country       | text          |  not null   |\n| continent          | text          |  not null   |\n| region             | text          |  not null   |\n| surfacearea        | real          |  not null   |\n| indepyear          | smallint      |             |\n| population_country | integer       |  not null   |\n| lifeexpectancy     | real          |             |\n| gnp                | numeric(10,2) |             |\n| gnpold             | numeric(10,2) |             |\n| localname          | text          |  not null   |\n| governmentform     | text          |  not null   |\n| headofstate        | text          |             |\n| capital            | integer       |             |\n| code2              | character(2)  |  not null   |\n+--------------------+---------------+-------------+\nIndexes:\n    \"country_pkey\" PRIMARY KEY, btree (countrycode)\nCheck constraints:\n    \"country_continent_check\" CHECK\n    (continent = 'Asia'::text OR continent = 'Europe'::text\n    OR continent = 'North America'::text\n    OR continent = 'Africa'::text OR continent = 'Oceania'::text \n    OR continent = 'Antarctica'::text OR continent = 'South America'::text)\nForeign-key constraints:\n    \"country_capital_fkey\" FOREIGN KEY (capital) REFERENCES world.city(id)  #&lt;&lt;\nReferenced by:\n    TABLE \"world.countrylanguage\"\n    CONSTRAINT \"countrylanguage_countrycode_fkey\" FOREIGN KEY (countrycode)\n    REFERENCES country(countrycode)"
  },
  {
    "objectID": "slides/LDD_1.html#foreign-keys-emitted-by-world.country",
    "href": "slides/LDD_1.html#foreign-keys-emitted-by-world.country",
    "title": "BD : Contraintes",
    "section": "Foreign keys emitted by world.country\n",
    "text": "Foreign keys emitted by world.country\n\nALTER TABLE world.country ADD \n    CONSTRAINT country_capital_fkey \n        FOREIGN KEY (capital)   #&lt;&lt;\n        REFERENCES world.city(id);  #&lt;&lt;\n\nALTER TABLE world.country \n    ADD CONSTRAINT country_fk \n        FOREIGN KEY (continent)   #&lt;&lt;\n        REFERENCES world.code_continent(continent);  #&lt;&lt;"
  },
  {
    "objectID": "slides/DF_norm_2.html#rappel-propriétés-dune-décomposition",
    "href": "slides/DF_norm_2.html#rappel-propriétés-dune-décomposition",
    "title": "BD xxx : Normalisation II",
    "section": "Rappel : Propriétés d’une décomposition",
    "text": "Rappel : Propriétés d’une décomposition\n\nSoit \\(\\mathcal{A}\\) un schéma de relation et \\(\\Sigma\\) un ensemble de DF sur \\(\\mathcal{A}\\).\n\nSoit \\(\\left\\{\\mathcal{A}_1,\\dots, \\mathcal{A}_k\\right\\}\\) une décomposition du schéma \\(\\mathcal{A}\\), on a\n\n\n\\(\\mathcal{A}_i\\not=\\emptyset\\), \\(1\\le i\\le k\\) et\n\\(\\mathcal{A} = \\bigcup_{i=1}^k \\mathcal{A}_i\\)\n\n\n\nOn ne peut pas décomposer arbitrairement, toutes les décompositions ne sont pas intéressantes\n\nConditions pour une décomposition raisonnable :\n\nsans perte d’information\nsans perte de dépendance fonctionnelle"
  },
  {
    "objectID": "slides/DF_norm_2.html#projection-dun-ensemble-de-df",
    "href": "slides/DF_norm_2.html#projection-dun-ensemble-de-df",
    "title": "BD xxx : Normalisation II",
    "section": "Projection d’un ensemble de DF",
    "text": "Projection d’un ensemble de DF\n\n\n\n\n\n\nDéfinition\n\n\nSoit \\(\\mathcal{A}\\) un schéma de relation (\\(\\mathcal{A}\\) est un ensemble d’attributs) et \\(\\Sigma\\) un ensemble de DF sur \\(\\mathcal{A}\\)\nSoit \\(\\mathcal{A}_1\\subset\\mathcal{A}\\) un sous-ensemble d’attributs\n\\[\\pi^{}_{\\mathcal{A}_1}(\\Sigma)=\\left\\{ X\\to Y \\mid \\Sigma⊧ X\\to Y \\text{ et } X,Y\\subset\\mathcal{A}_1\\right\\}\\]\nAutrement dit \\(\\pi_{\\mathcal{A}_1}(\\Sigma)\\) est l’ensemble des DF de la forme \\(X\\to Y\\) impliquée par \\(\\Sigma\\) et telle que \\(X\\subset\\mathcal{A}_1\\) et \\(Y\\subset \\mathcal{A}_1\\)"
  },
  {
    "objectID": "slides/DF_norm_2.html#caractérisation",
    "href": "slides/DF_norm_2.html#caractérisation",
    "title": "BD xxx : Normalisation II",
    "section": "Caractérisation",
    "text": "Caractérisation\nsi \\(X\\subset \\mathcal{A}_1\\) on l’équivalence \\[X\\to Y \\in \\pi_{\\mathcal{A}_1}(\\Sigma) \\iff Y\\subset\\left\\{X\\right\\}^+\\cap\\mathcal{A}_1\\]"
  },
  {
    "objectID": "slides/DF_norm_2.html#exemple",
    "href": "slides/DF_norm_2.html#exemple",
    "title": "BD xxx : Normalisation II",
    "section": "Exemple",
    "text": "Exemple\n\n\\(\\mathcal{A}=\\left\\{A,B,C\\right\\}\\) et \\(\\Sigma=\\left\\{A\\to B, B\\to C, C\\to A\\right\\}\\)\n\\(\\pi_{\\left\\{A,B\\right\\}}(\\Sigma)\\) est équivalent à \\(\\left\\{A\\to B, B\\to A\\right\\}\\)"
  },
  {
    "objectID": "slides/DF_norm_2.html#calcul-de-pi_mathcala_1sigma",
    "href": "slides/DF_norm_2.html#calcul-de-pi_mathcala_1sigma",
    "title": "BD xxx : Normalisation II",
    "section": "Calcul de \\(\\pi_{\\mathcal{A}_1}(\\Sigma)\\)\n",
    "text": "Calcul de \\(\\pi_{\\mathcal{A}_1}(\\Sigma)\\)\n\nOn calcule un ensemble de DF équivalent à \\(\\pi_{\\mathcal{A}_1}(\\Sigma)\\)"
  },
  {
    "objectID": "slides/DF_norm_2.html#algorithme",
    "href": "slides/DF_norm_2.html#algorithme",
    "title": "BD xxx : Normalisation II",
    "section": "Algorithme",
    "text": "Algorithme\n\\(P := \\emptyset\\)\n\npour tout \\(X\\subset \\mathcal{A}_1\\) tel que \\(X\\not=\\emptyset\\) et \\(X\\not=\\mathcal{A}_1\\)\n\ncalculer \\(Y=X^+\\cap\\mathcal{A}_1\\) et ajouter \\(X\\to Y\\) à \\(P\\)\\\nrenvoyer \\(P\\)\n\n\n\n\nL’ensemble de DF obtenu est équivalent à \\(\\pi_{\\mathcal{A}_1}(\\Sigma)\\)\nTrès coûteux !\nLe nombre de sous-ensembles \\(X\\) considérés est \\(2^{\\#\\mathcal{A}_1}-2\\)"
  },
  {
    "objectID": "slides/DF_norm_2.html#exemple-1",
    "href": "slides/DF_norm_2.html#exemple-1",
    "title": "BD xxx : Normalisation II",
    "section": "Exemple",
    "text": "Exemple\n\n\\(\\mathcal{A}=\\left\\{A,B,C,D,E\\right\\}\\) et \\(\\Sigma=\\left\\{A\\to C, BC\\to D, AD\\to E\\right\\}\\)\n\\(\\pi_{AC}(\\Sigma)\\) est équivalent à \\(\\left\\{A\\to C\\right\\}\\) car \\(\\left\\{A\\right\\}^+=\\left\\{A,C\\right\\}\\) et \\(\\left\\{C\\right\\}^+=\\left\\{C\\right\\}\\)\n\\(\\pi_{ABD}(\\Sigma)\\) est équivalent à \\(\\left\\{AB\\to D\\right\\}\\) car \\(\\left\\{A\\right\\}^+=\\left\\{A,C\\right\\}\\), \\(\\left\\{B\\right\\}^+=\\left\\{D\\right\\}\\), \\(\\left\\{D\\right\\}^+=\\left\\{D\\right\\}\\), \\(\\left\\{A,B\\right\\}^+=\\left\\{A,B,C,D,E\\right\\}\\), \\(\\left\\{A,D\\right\\}^+=\\left\\{A,D,C,E\\right\\}\\), \\(\\left\\{B,D\\right\\}^+=\\left\\{B,D\\right\\}\\)\n\n\\(\\pi_{ABCE}(\\Sigma)\\) est équivalent à \\(\\left\\{A\\to C, AB \\to CE, AE\\to C, ABC\\to E, ABE\\to C\\right\\}\\)\n\n\\(A^+=AC \\quad B^+=B \\quad C^+=C \\quad E^+=E\\)\n\n\\(AB^+=ABCDE \\quad AC^+=AC \\quad AE^+=AEC\\) \\(BC^+=BCD \\quad BE^+=BE \\quad CE^+=CE\\)\n\n\n\\(ABC^+=ABCDE \\quad ABE^+=ABECD\\) \\(BCE^+=BCED \\quad ACE^+=ACE\\)\n\n\n\nSimplification : \\(\\pi_{ABCE}(\\Sigma)\\) équivaut à \\(\\left\\{A\\to C, AB\\to E\\right\\}\\)"
  },
  {
    "objectID": "slides/DF_norm_2.html#algorithme-1",
    "href": "slides/DF_norm_2.html#algorithme-1",
    "title": "BD xxx : Normalisation II",
    "section": "Algorithme",
    "text": "Algorithme\n\nC’est une extension de l’algorithme de fermeture permet de tester si une décomposition est sans perte de DF (sans devoir calculer les \\(\\pi_{\\mathcal{A}_i}(\\Sigma)\\))\nSoit \\(X\\to Y\\) une DF de \\(\\Sigma\\)"
  },
  {
    "objectID": "slides/DF_norm_2.html#algorithme-pour-tester-si-xto-y-est-impliquée-par-bigcup_i1k-pi_mathcala_isigma",
    "href": "slides/DF_norm_2.html#algorithme-pour-tester-si-xto-y-est-impliquée-par-bigcup_i1k-pi_mathcala_isigma",
    "title": "BD xxx : Normalisation II",
    "section": "Algorithme pour tester si \\(X\\to Y\\) est impliquée par \\(\\bigcup_{i=1}^k \\pi_{\\mathcal{A}_i}(\\Sigma)\\)\n",
    "text": "Algorithme pour tester si \\(X\\to Y\\) est impliquée par \\(\\bigcup_{i=1}^k \\pi_{\\mathcal{A}_i}(\\Sigma)\\)\n\n\n\\(Z := X\\)\n\ntant que \\(Z\\) change faire\n\npour tout \\(i=1,\\dots, k\\) faire\n\n\\(Z:= Z \\cup \\bigpar{ (Z\\cap \\mathcal{A}_i)^+ \\cap \\mathcal{A}_i}\\)\n\n\nfin pour tout\\\n\n\nfin tant que\nSi \\(Y\\not\\subset Z\\) la réponse est NON, sinon la réponse est OUI"
  },
  {
    "objectID": "slides/DF_norm_2.html#exemple-2",
    "href": "slides/DF_norm_2.html#exemple-2",
    "title": "BD xxx : Normalisation II",
    "section": "Exemple",
    "text": "Exemple\n\n\\(\\mathcal{A}=\\left\\{A,B,C,D\\right\\}\\), \\(\\mathcal{A}_1=\\left\\{A,B\\right\\}\\), \\(\\mathcal{A}_2=\\left\\{B,C\\right\\}\\), \\(\\mathcal{A}_3=\\left\\{C,D\\right\\}\\)\n\\(\\Sigma=\\left\\{A\\to B, B\\to C, C\\to D, D\\to A\\right\\}\\)\nEst-ce que la décomposition \\(\\left\\{\\mathcal{A}_1,\\mathcal{A}_2,\\mathcal{A}_3\\right\\}\\) préserve \\(\\Sigma\\) :\nLes DF locales impliquent \\(A\\to B\\), \\(B\\to C\\), \\(C\\to D\\) (elles sont DF locales)\nEst-ce que les DF locales impliquent \\(D\\to A\\) :\n\nCommencer avec \\(Z=\\left\\{D\\right\\}\\)\n\\((\\left\\{D\\right\\}\\cap\\left\\{CD\\right\\})^+\\cap\\left\\{CD\\right\\}=\\left\\{D\\right\\}^+\\cap\\left\\{CD\\right\\}=\\left\\{DABC\\right\\}\\cap\\left\\{CD\\right\\}=\\left\\{C\\right\\}\\), ajouter \\(C\\)\n\\((DC\\cap BC)^+\\cap BC=C^+\\cap BC=CDAB\\cap BC=B\\), ajouter \\(B\\)\n\\((DCB\\cap AB)^+\\cap AB=B^+\\cap AB=BCDA \\cap AB\\), ajouter \\(A\\)\n\\(DCBA\\) contient \\(A\\) donc \\(D\\to A\\) est préservé"
  },
  {
    "objectID": "slides/DF_norm_2.html#exemple-3",
    "href": "slides/DF_norm_2.html#exemple-3",
    "title": "BD xxx : Normalisation II",
    "section": "Exemple",
    "text": "Exemple\n\n\\(\\mathcal{A}=\\left\\{Ville, CP, Rue, Numero\\right\\}\\)\n\\(\\Sigma=\\left\\{CP\\to Ville, Ville\\, Rue\\, Numero\\to CP\\right\\}\\)\n\\(\\mathcal{A}_1=\\left\\{Ville, CP\\right\\}\\)\\(\\mathcal{A}_2=\\left\\{Rue, Numero, CP\\right\\}\\)\nEst-ce que la décomposition \\(\\left\\{\\mathcal{A}_1,\\mathcal{A}_2\\) préserve \\(\\Sigma\\) :\n\\(CP\\to Ville\\) est préservée car elle est locale à \\(\\mathcal{A}_1\\)\nEst-ce que \\(Ville\\, Rue\\, Numero\\to CP\\) est préservée :\n\n\\(Z:=\\left\\{Ville, Rue, Numero\\right\\}\\)\n\\(\\bigpar{Z\\cap \\left\\{Ville, CP\\right\\}}^+\\cap \\left\\{Ville, CP\\right\\}=\\left\\{Ville\\right\\}\\), rien à ajouter\n\\(\\bigpar{Z\\cap \\left\\{Rue, Numero, CP\\right\\}}^+\\cap \\left\\{Rue, Numero, CP\\right\\}=\\left\\{Rue, Numero\\right\\}\\), rien à ajouter\nDonc Ville, Rue, Numero → CP n’est pas préservée"
  },
  {
    "objectID": "slides/DF_norm_2.html#conception-du-modèle-relationnel",
    "href": "slides/DF_norm_2.html#conception-du-modèle-relationnel",
    "title": "BD xxx : Normalisation II",
    "section": "Conception du modèle relationnel",
    "text": "Conception du modèle relationnel\nUne première approche pour concevoir un modèle relationnel (l’ensemble des schémas d’une bd) consiste à :\n\nidentifier les attributs d’intérêt\nrépartir les attributs dans plusieurs relations\nComment savoir si le modèle relationnel est bon ?\nSi ce n’est pas le cas : y a-t-il des techniques pour le transformer en un bon modèle :"
  },
  {
    "objectID": "slides/DF_norm_2.html#qualité-dun-schéma",
    "href": "slides/DF_norm_2.html#qualité-dun-schéma",
    "title": "BD xxx : Normalisation II",
    "section": "Qualité d’un schéma",
    "text": "Qualité d’un schéma\nQuelles sont de ``bonnes propriétés” d’un schéma :\nExemple\nAttributs relatifs à des vendeurs, produits et livraisons\nV# : numéro du vendeur\n    Vnom : nom du vendeur\n    Vville : ville du vendeur\n\nP# : numéro du produit\n    Pnom : nom du produit\n    Pville : ville où le produit est stocké\n    Qte : quantité de produit livrée au vendeur"
  },
  {
    "objectID": "slides/DF_norm_2.html#qualité-dun-schéma-1",
    "href": "slides/DF_norm_2.html#qualité-dun-schéma-1",
    "title": "BD xxx : Normalisation II",
    "section": "Qualité d’un schéma",
    "text": "Qualité d’un schéma\n\nUn schéma relationnel possible : une seule relation R avec tous les attributs\n\nR(V#, Vnom, Vville, P#, Pnom, Pville, Qte)\n\nC’est une mauvaise modélisation.\n\n\n\nPourquoi :"
  },
  {
    "objectID": "slides/DF_norm_2.html#qualité-dun-schéma-relationnel",
    "href": "slides/DF_norm_2.html#qualité-dun-schéma-relationnel",
    "title": "BD xxx : Normalisation II",
    "section": "Qualité d’un schéma relationnel",
    "text": "Qualité d’un schéma relationnel\n\nRedondance\n\nVnom et Vville sont déterminés par V#, c’est-à-dire si deux livraisons ont le même V#, elles ont aussi le même Vville et le même Vnom\n\nAnomalies de mise à jour\\ Vnom ou Vville pourrait être mis à jour dans une livraison et pas dans une autre, ce qui donnerait une incohérence. Pour éviter cela, la mise à jour est coûteuse\nAnomalies d’insertion\n\nOn ne peut pas enregistrer un vendeur s’il ne reçoit pas de livraison\n\nAnomalies de suppression\n\nSi on supprime toutes les livraisons à un vendeur, on perd toute l’information sur ce vendeur"
  },
  {
    "objectID": "slides/DF_norm_2.html#qualité-dun-schéma-relationnel-1",
    "href": "slides/DF_norm_2.html#qualité-dun-schéma-relationnel-1",
    "title": "BD xxx : Normalisation II",
    "section": "Qualité d’un schéma relationnel",
    "text": "Qualité d’un schéma relationnel\n\nUn ``bon” schéma\n\n\nPlus d’anomalie ! Comment y arriver :\nLa théorie de la normalisation des bd relationnelles fournit\nla notion de forme normale : propriétés d’un schéma qui garantissent l’absence de redondance et des anomalies qui en dérivent. Ces propriétés sont définies par rapport à un ensemble de contraintes\ndes techniques de normalisation : passage d’un schéma arbitraire (mauvais) à un schéma en forme normale (obtenu typiquement par décomposition)"
  },
  {
    "objectID": "slides/DF_norm_2.html#dépendances-fonctionnelles",
    "href": "slides/DF_norm_2.html#dépendances-fonctionnelles",
    "title": "BD xxx : Normalisation II",
    "section": "Dépendances fonctionnelles",
    "text": "Dépendances fonctionnelles\n\nUne dépendance fonctionnelle est une forme particulière de portant sur une relation\nC’est la réalité qu’on modélise qui impose ces contraintes\nExemple :\n\\[ \\text{R(`V#`, Vnom, Vville, P\\#, Pnom, Pville, Qte)} \\] Un ensemble de dépendances fonctionnelles qu’on peut raisonnablement supposer :\\ \nCela signifie que l’on ne considère que des relations R qui satisfont :\\\nsi 2 tuples de R ont la même valeur de V# alors ils ont la même valeur de Vnom et Vville\\\nsi 2 tuples de R ont la même valeur de P# alors ils ont la même valeur de Pnom et Pville\\"
  },
  {
    "objectID": "slides/DF_norm_2.html#df-exemple",
    "href": "slides/DF_norm_2.html#df-exemple",
    "title": "BD xxx : Normalisation II",
    "section": "DF exemple",
    "text": "DF exemple\n{\n}\n\nR satisfait V# \\(→\\) Vnom Vville et P# \\(→\\) Pnom Pville\nR viole V# P#\\(→\\) Qte"
  },
  {
    "objectID": "slides/DF_norm_2.html#exemple-4",
    "href": "slides/DF_norm_2.html#exemple-4",
    "title": "BD xxx : Normalisation II",
    "section": "Exemple",
    "text": "Exemple\nSchéma Films(titre, année, durée, genre, producteur, acteur)\n{\n}\n\nOn sait qu’il n’y a pas 2 films de même nom qui sortent la même année. On a donc la dépendance suivante\n\ntitre, année → durée, genre, producteur\nLa DF titre, année → acteur est certainement fausse puisqu’un film fait intervenir en général plusieurs acteurs.\nA-t-on la DF titre, acteur → année, durée, genre, producteur ?"
  },
  {
    "objectID": "slides/DF_norm_2.html#définition-dune-dépendance-fonctionnelle",
    "href": "slides/DF_norm_2.html#définition-dune-dépendance-fonctionnelle",
    "title": "BD xxx : Normalisation II",
    "section": "Définition d’une dépendance fonctionnelle",
    "text": "Définition d’une dépendance fonctionnelle\n\nSoit \\(\\mathcal{A}\\) un schéma de relation (\\(\\mathcal{A}\\) est un ensemble d’attributs)\nUne dépendance fonctionnelle sur \\(\\mathcal{A}\\) est une expression de la forme \\(X → Y\\) où \\(X\\subset\\mathcal{A}\\) et \\(Y\\subset \\mathcal{A}\\)\nUne relation \\(R\\) de schéma \\(\\mathcal{A}\\) satisfait \\(X → Y\\) si pour tous tuples \\(s,t \\in R\\) on a \\[\\bigl(\\forall A\\in X\\ s.A=t.A\\bigr) \\Longrightarrow \\bigl(\\forall A\\in Y\\ s.A=t.A\\bigr)\\]\n\n(si \\(s\\) et \\(t\\) coïncident sur \\(X\\) alors \\(s\\) et \\(t\\) coïncident sur \\(Y\\))\n\nUne relation \\(R\\) satisfait un ensemble \\(\\Sigma\\) de DF si \\(R\\) satisfait chaque DF de \\(\\Sigma\\)"
  },
  {
    "objectID": "slides/DF_norm_2.html#exemples-et-dépendance-élémentaire",
    "href": "slides/DF_norm_2.html#exemples-et-dépendance-élémentaire",
    "title": "BD xxx : Normalisation II",
    "section": "Exemples et dépendance élémentaire",
    "text": "Exemples et dépendance élémentaire\nDans la base pagila, relation Actor :\n\nActor_id → last_name, first_name\ncar Actor_id est une clé…\n\n\n\n\n\n\n\nDéfinition (dépendance élémentaire)\n\n\n\\(A_1,...,A_p → Y\\) est une dépendance élémentaire si,\npour tout \\(j\\leq p\\) : \\(A_1,...,A_{j-1},A_{j+1},...,A_p \\not→ Y\\)"
  },
  {
    "objectID": "slides/DF_norm_2.html#exemple-5",
    "href": "slides/DF_norm_2.html#exemple-5",
    "title": "BD xxx : Normalisation II",
    "section": "Exemple",
    "text": "Exemple\n\nNo_insee → sexe, mois_naiss, jour_naiss est élémentaire.\nNo_insee, jour_naiss → sexe, mois_naiss, ville_naiss n’est pas élémentaire … No_insee suffit."
  },
  {
    "objectID": "slides/DF_norm_2.html#dépendance-fonctionnelle-triviale",
    "href": "slides/DF_norm_2.html#dépendance-fonctionnelle-triviale",
    "title": "BD xxx : Normalisation II",
    "section": "Dépendance fonctionnelle triviale",
    "text": "Dépendance fonctionnelle triviale\nUne DF triviale est une DF satisfaite par toute relation"
  },
  {
    "objectID": "slides/DF_norm_2.html#définition-dépendance-triviale",
    "href": "slides/DF_norm_2.html#définition-dépendance-triviale",
    "title": "BD xxx : Normalisation II",
    "section": "Définition (dépendance triviale)",
    "text": "Définition (dépendance triviale)\nSoient \\(X,Y\\subset \\mathcal{A}\\).\n\n\n\\(X→ Y\\) est une dépendance triviale si \\(Y \\subset X\\)"
  },
  {
    "objectID": "slides/DF_norm_2.html#exemple-6",
    "href": "slides/DF_norm_2.html#exemple-6",
    "title": "BD xxx : Normalisation II",
    "section": "Exemple",
    "text": "Exemple\nNo_insee → No_insee est triviale"
  },
  {
    "objectID": "slides/DF_norm_2.html#implication-pour-les-df",
    "href": "slides/DF_norm_2.html#implication-pour-les-df",
    "title": "BD xxx : Normalisation II",
    "section": "Implication pour les DF",
    "text": "Implication pour les DF\n\nSoit \\(\\mathcal{A}\\) un schéma de relation (\\(\\mathcal{A}\\) est un ensemble d’attributs) et \\(\\Sigma\\) un ensemble de DF sur \\(\\mathcal{A}\\)\nExemple : \\(\\mathcal{A}=\\left\\{A,B,C\\right\\}\\) et \\(\\Sigma=\\left\\{A→ B, B→ C\\right\\}\\)\nLes DF données impliquent d’autres DF additionnelles\n\nExemple : \\(A→ B\\) et \\(B→ C\\) impliquent \\(A→ C\\)\nc’est-à-dire\ntoute relation de schéma \\(\\mathcal{A}\\) qui satisfait \\(A→ B\\) et \\(B→ C\\) satisfait également \\(A→ C\\)\n\nAutre exemple :\n\n\\(A→ C\\), \\(BC→ D\\), \\(AD→ E\\) impliquent \\(AB→ E\\)"
  },
  {
    "objectID": "slides/DF_norm_2.html#implication-de-dépendance-fonctionnelle",
    "href": "slides/DF_norm_2.html#implication-de-dépendance-fonctionnelle",
    "title": "BD xxx : Normalisation II",
    "section": "Implication de Dépendance Fonctionnelle",
    "text": "Implication de Dépendance Fonctionnelle\n\n\n\n\n\n\nDéfinition\n\n\nUn ensemble \\(\\Sigma\\) de DF implique une autre DF \\(X→ Y\\) si toute relation qui satisfait \\(\\Sigma\\) satisfait également \\(X→ Y\\).\n\n\n\n\n\n\n\n\n\nNotation\n\n\npour \\(\\Sigma\\) implique \\(X→ Y\\) : \\(\\Sigma ⊧ X→ Y\\)"
  },
  {
    "objectID": "slides/DF_norm_2.html#exemple-7",
    "href": "slides/DF_norm_2.html#exemple-7",
    "title": "BD xxx : Normalisation II",
    "section": "Exemple",
    "text": "Exemple\n\\(\\Sigma=\\left\\{A→ B, B→ C\\right\\}\\) implique\n\\(A→ B\\), \\(B→ C\\), \\(A→ C\\), \\(A,B→ C\\),\nmais aussi les DF triviales \\(A→ A\\), \\(AB→ A\\), …"
  },
  {
    "objectID": "slides/DF_norm_2.html#règles-darmstrong",
    "href": "slides/DF_norm_2.html#règles-darmstrong",
    "title": "BD xxx : Normalisation II",
    "section": "Règles d’Armstrong",
    "text": "Règles d’Armstrong\n\n\n\n\n\n\nTrois règles d’inférence faciles à vérifier :\n\n\n\nTransitivité : \\(\\left\\{ X→ Y, Y→ Z\\right\\} ⊧ X→ Z\\)\nAugmentation : \\(X→ Y ⊧ \\left\\{X,Z\\right\\} → \\left\\{Y,Z\\right\\}\\)\nRéflexivité : \\(\\emptyset ⊧ \\left\\{X,Y\\right\\}→ X\\) (DF triviale)"
  },
  {
    "objectID": "slides/DF_norm_2.html#clef-et-super-clef",
    "href": "slides/DF_norm_2.html#clef-et-super-clef",
    "title": "BD xxx : Normalisation II",
    "section": "Clef et super-clef",
    "text": "Clef et super-clef\nSoit \\(\\mathcal{A}\\) un schéma et \\(\\Sigma\\) une ensemble de DF sur \\(\\mathcal{A}\\).\n\n\n\n\n\n\nDéfinition\n\n\nUn ensemble d’attributs \\(X\\) est une super-clef si\n\\(\\Sigma ⊧ X→ \\mathcal{A}\\)\nc-à-d si \\(X\\) détermine tous les attributs de \\(\\mathcal{A}\\)"
  },
  {
    "objectID": "slides/DF_norm_2.html#exemple-8",
    "href": "slides/DF_norm_2.html#exemple-8",
    "title": "BD xxx : Normalisation II",
    "section": "Exemple",
    "text": "Exemple\n\\(R(A,B,C)\\) ET \\(\\Sigma=\\left\\{A→ B, B→ C\\right\\}\\)\n\nSuper-clefs : \\(A\\), \\(AB\\), \\(AC\\), \\(ABC\\)\nClef : \\(A\\) (la seule)"
  },
  {
    "objectID": "slides/DF_norm_2.html#equivalence-de-deux-ensembles-de-df",
    "href": "slides/DF_norm_2.html#equivalence-de-deux-ensembles-de-df",
    "title": "BD xxx : Normalisation II",
    "section": "Equivalence de deux ensembles de DF",
    "text": "Equivalence de deux ensembles de DF\nSoit \\(\\Sigma\\) et \\(\\Sigma'\\) deux ensemble de DF sur un schéma \\(\\mathcal{A}\\)\n\n\n\n\n\n\nDéfinition\n\n\nOn dit que \\(\\Sigma\\) implique \\(\\Sigma'\\)\nsi\n\\(\\Sigma\\) implique toutes les DF de \\(\\Sigma'\\)\nOn le note \\(\\Sigma⊧\\Sigma'\\)"
  },
  {
    "objectID": "slides/DF_norm_2.html#exemple-9",
    "href": "slides/DF_norm_2.html#exemple-9",
    "title": "BD xxx : Normalisation II",
    "section": "Exemple",
    "text": "Exemple\n\n\n\\(\\mathcal{A}=\\left\\{A,B,C,D\\right\\}\\),\n\\(\\Sigma=\\left\\{AB→ C, C→ A, BC→ D\\right\\}\\)\n\\(\\Sigma'=\\left\\{AB→ D\\right\\}\\)\n\n\n\\(\\Sigma⊧\\Sigma'\\)"
  },
  {
    "objectID": "slides/DF_norm_2.html#fermeture-dun-ensemble-dattributs-1",
    "href": "slides/DF_norm_2.html#fermeture-dun-ensemble-dattributs-1",
    "title": "BD xxx : Normalisation II",
    "section": "Fermeture d’un ensemble d’attributs",
    "text": "Fermeture d’un ensemble d’attributs\nSoit \\(X \\subset\\mathcal{A}\\) un sous-ensemble d’attributs et \\(\\Sigma\\) un ensemble de DF sur \\(\\mathcal{A}\\)\n\n\n\n\n\n\nDéfinition\n\n\nLa fermeture de \\(X\\) par rapport à \\(\\Sigma\\) est \\[X^+=\\left\\{ A\\in\\mathcal{A} \\mid \\Sigma ⊧ X→ A \\right\\}\\]\nAutrement dit \\(X^+\\) est l’ensemble des attributs déterminés par \\(X\\)"
  },
  {
    "objectID": "slides/DF_norm_2.html#exemple-10",
    "href": "slides/DF_norm_2.html#exemple-10",
    "title": "BD xxx : Normalisation II",
    "section": "Exemple",
    "text": "Exemple\n\\(R(ABCDE)\\) \\(\\Sigma=\\left\\{AB→ C, C→ D, E→ D\\right\\}\\)\n\n\\(\\left\\{A,B\\right\\}^+=\\left\\{A,B,C,D\\right\\}\\)"
  },
  {
    "objectID": "slides/DF_norm_2.html#algorithme-pour-calculer-une-fermeture",
    "href": "slides/DF_norm_2.html#algorithme-pour-calculer-une-fermeture",
    "title": "BD xxx : Normalisation II",
    "section": "Algorithme pour calculer une fermeture",
    "text": "Algorithme pour calculer une fermeture\nSoit \\(\\Sigma\\) un ensemble de DF sur un schéma \\(\\mathcal{A}\\) et \\(X\\subset\\mathcal{A}\\)\nAlgorithme\n\n\\(X_c := X\\)\nTant qu’il existe \\(Y→ Z\\) dans \\(\\Sigma\\) tel que \\(Y\\subset X_c\\) et \\(Z\\not\\subset X_c\\),\n\n\\(X_c:= X_c \\cup Z\\)\n\n\nrenvoyer \\(X_c\\)"
  },
  {
    "objectID": "slides/DF_norm_2.html#exemple-de-calcul-de-fermeture",
    "href": "slides/DF_norm_2.html#exemple-de-calcul-de-fermeture",
    "title": "BD xxx : Normalisation II",
    "section": "Exemple de calcul de fermeture",
    "text": "Exemple de calcul de fermeture\n\\(\\mathcal{A}=\\left\\{ABCDEF\\right\\}\\) \\(\\Sigma=\\left\\{A→ C, BC→ D, AD→ E\\right\\}\\) \\(X=\\left\\{A,B\\right\\}\\)\n\n\\(X_c=\\left\\{A,B\\right\\}\\)\n\\(A→ C\\) donc on obtient \\(X_c=\\left\\{A,B,C\\right\\}\\)\n\\(BC→ D\\) donc on obtient \\(X_c=\\left\\{A,B,C,D\\right\\}\\)\n\\(AD→ E\\) donc on obtient \\(X_c=\\left\\{A,B,C,D, E\\right\\}\\)\nOn obtient \\(X^+=\\left\\{A,B,C,D, E\\right\\}\\)"
  },
  {
    "objectID": "slides/DF_norm_2.html#correction-de-lalgorithme-de-fermeture",
    "href": "slides/DF_norm_2.html#correction-de-lalgorithme-de-fermeture",
    "title": "BD xxx : Normalisation II",
    "section": "Correction de l’algorithme de fermeture",
    "text": "Correction de l’algorithme de fermeture\n\nL’algorithme calcule uniquement des attributs dans la fermeture car on a toujours \\(X_c\\subset X^+\\)\nL’algorithme calcule tous les attributs dans la fermeture i.e. \\(X_c=X^+\\) quand l’algorithme se termine\n\nPreuve : Supposons que \\(A\\notin X_c\\) quand l’algorithme se termine. La relation \\(R=\\left\\{t_1,t_2\\right\\}\\) suivante (où c\\(\\not=\\)d)\ncar pour toute DF \\(Y→ Z\\) telle que \\(Y\\subset X_c\\) on a \\(Z\\subset X_c\\). Mais \\(R\\) ne satisfait pas \\(X→ A\\). Donc \\(A\\notin X^+\\)."
  },
  {
    "objectID": "slides/DF_norm_2.html#calcul-de-la-fermeture-transitive-exemple",
    "href": "slides/DF_norm_2.html#calcul-de-la-fermeture-transitive-exemple",
    "title": "BD xxx : Normalisation II",
    "section": "Calcul de la fermeture transitive : exemple",
    "text": "Calcul de la fermeture transitive : exemple\n\nsoit \\(R\\) d’ensemble d’attributs \\(\\mathcal{A} =\\{A,B,C,D,E,F,G\\}\\)\nSoit \\(X=\\{B,D\\}\\)\nSoit \\(\\Sigma\\) constituée des DF suivantes :\n\n\n\n\n\\(A,B → C\\)\n\\(C → A\\)\n\\(B,C → D\\)\n\\(A,C,D → B\\)\n\\(F→ A,C\\)\n\n\n\n\\(D → E,G\\)\n\\(B,E → C\\)\n\\(C,G → B,D\\)\n\\(C,E → A,G\\)\n\n\n\n\nMontrer que \\(X^+=\\{A,B,C,D,E,G\\}\\)\nDonner une clef de \\(R\\)"
  },
  {
    "objectID": "slides/DF_norm_2.html#fnbc-exemple-1",
    "href": "slides/DF_norm_2.html#fnbc-exemple-1",
    "title": "BD xxx : Normalisation II",
    "section": "FNBC : exemple 1",
    "text": "FNBC : exemple 1\n\nSchéma \\(\\mathcal{A}=\\left\\{ \\texttt{V#, Vnom, Vville, P#, Pnom, Pville, Qte} \\right\\}\\)\nEnsemble de dépendances fonctionnelles \\(\\Sigma\\) :\n\nV# → Vnom Vville\nP#  → Pnom Pville \nV# P# →  Qte\n\\(\\mathcal{A}\\) n’est pas en FNBC par rapport \\(\\Sigma\\).\nEn effet: ni V# ni P# ne sont des super-clefs"
  },
  {
    "objectID": "slides/DF_norm_2.html#fnbc-exemple-2",
    "href": "slides/DF_norm_2.html#fnbc-exemple-2",
    "title": "BD xxx : Normalisation II",
    "section": "FNBC : exemple 2",
    "text": "FNBC : exemple 2\nSchéma Films(titre, année, durée, genre, producteur, acteur)\n\nOn a la dépendance suivante\n\ntitre, année → durée, genre, producteur\n\ntitre, année, acteur est la seule clef\nLa DF titre, année → durée, genre, producteur viole la condition de FNBC"
  },
  {
    "objectID": "slides/DF_norm_2.html#fnbc-exemple-3",
    "href": "slides/DF_norm_2.html#fnbc-exemple-3",
    "title": "BD xxx : Normalisation II",
    "section": "FNBC : exemple 3",
    "text": "FNBC : exemple 3\nTrois schémas en FNBC :\n\\[\\begin{align*}\n&\\texttt{Vendeur(V#, Vnom, Vville)}\\quad \\texttt{Clef : V#}\\\\\n&\\texttt{Produit(P#, Pnom, Pville)} \\quad \\texttt{Clef : P#}\\\\\n&\\texttt{Livraison(V#, P#, Qte)} \\quad \\texttt{Clef : (V#,P#)}\n\\end{align*}\\]"
  },
  {
    "objectID": "slides/DF_norm_2.html#schéma-avec-deux-attributs",
    "href": "slides/DF_norm_2.html#schéma-avec-deux-attributs",
    "title": "BD xxx : Normalisation II",
    "section": "Schéma avec deux attributs",
    "text": "Schéma avec deux attributs\n\n\n\n\n\n\nProposition\n\n\nSoit \\(\\mathcal{A}=\\left\\{A,B\\right\\}\\) un schéma avec deux attributs et \\(\\Sigma\\) un ensemble de DF non triviales\n\\(\\mathcal{A}\\) est toujours en FNBC par rapport à \\(\\Sigma\\)"
  },
  {
    "objectID": "slides/DF_norm_2.html#preuve",
    "href": "slides/DF_norm_2.html#preuve",
    "title": "BD xxx : Normalisation II",
    "section": "Preuve",
    "text": "Preuve\non distingue 4 cas\n\n\\(\\Sigma=\\emptyset\\)\n\\(\\Sigma=\\left\\{A→ B\\right\\}\\)\n\\(\\Sigma=\\left\\{B→ A\\right\\}\\)\n\\(\\Sigma=\\left\\{A→ B, B→ A\\right\\}\\)"
  },
  {
    "objectID": "slides/DF_norm_2.html#décomposition-dun-schéma-de-relation",
    "href": "slides/DF_norm_2.html#décomposition-dun-schéma-de-relation",
    "title": "BD xxx : Normalisation II",
    "section": "Décomposition d’un schéma de relation",
    "text": "Décomposition d’un schéma de relation\n\nSoit \\(\\mathcal{A}\\) un schéma de relation\n\nUn décomposition de \\(\\mathcal{A}\\) est un ensemble \\(\\left\\{\\mathcal{A}_1,\\dots, \\mathcal{A}_k\\right\\}\\) de sous-ensembles de \\(\\mathcal{A}\\) tel que\n\n\n\\(\\mathcal{A}_i\\not=\\emptyset\\), \\(1\\le i\\le k\\), et\n\\(\\mathcal{A} = \\bigcup_{i=1}^k \\mathcal{A}_i\\)"
  },
  {
    "objectID": "slides/DF_norm_2.html#exemple-11",
    "href": "slides/DF_norm_2.html#exemple-11",
    "title": "BD xxx : Normalisation II",
    "section": "Exemple",
    "text": "Exemple\n\\[\\begin{align*}\n&\\text{Vendeur(`V#`, Vnom, Vville)}\\\\\n&\\text{Produit(P\\#, Pnom, Pville)}\\\\\n&\\text{Livraison(`V#`, P\\#, Qte)}\n\\end{align*}\\]\nest une décomposition du schéma\nR(V#, Vnom, Vville, P#, Pnom, Pville, Qte)"
  },
  {
    "objectID": "slides/DF_norm_2.html#exemple-de-décomposition",
    "href": "slides/DF_norm_2.html#exemple-de-décomposition",
    "title": "BD xxx : Normalisation II",
    "section": "Exemple de décomposition",
    "text": "Exemple de décomposition\n\nSchéma : Films(titre, année, durée, genre, producteur, acteur)\nUne décomposition :\n\n\nFilms1(titre, année, durée, genre, producteur)\nFilms2(titre, année, acteur)\n\nFilms1 est FNBC par rapport à \\(\\Sigma_1=\\left\\{\\texttt{titre, année} → \\texttt{durée, genre, producteur}\\right\\}\\)\nFilms2 est en FNBC par rapport à \\(\\Sigma_2=\\emptyset\\)"
  },
  {
    "objectID": "slides/DF_norm_2.html#propriétés-dune-décomposition",
    "href": "slides/DF_norm_2.html#propriétés-dune-décomposition",
    "title": "BD xxx : Normalisation II",
    "section": "Propriétés d’une décomposition",
    "text": "Propriétés d’une décomposition\n\nOn ne peut pas décomposer arbitrairement, toutes les décompositions ne sont pas intéressantes\nConditions pour une décomposition raisonnable :\nDécomposition sans perte d’information\nDécomposition sans perte de dépendance fonctionnelle"
  },
  {
    "objectID": "slides/DF_norm_2.html#décomposition-sans-perte-dinformation-1",
    "href": "slides/DF_norm_2.html#décomposition-sans-perte-dinformation-1",
    "title": "BD xxx : Normalisation II",
    "section": "Décomposition sans perte d’information",
    "text": "Décomposition sans perte d’information\n\nIdée : Si on remplace le schéma (V#, Vnom, Vville, P#, Pnom, Pville, Qte) par les trois schémas\n\n\\[\\begin{align*}\n&\\texttt{Vendeur(V#, Vnom, Vville)}\\\\\n&\\texttt{Produit(P#, Pnom, Pville)}\\\\\n&\\texttt{Livraison(V#, P#, Qte)}\n\\end{align*}\\]\nalors au lieu de stocker une relation \\(R(\\texttt{V#, Vnom, Vville, P#, Pnom, Pville, Qte})\\), on stockera ses projections\n\\[\\pi_{\\texttt{V#,Vnom,Vville}}(R) \\quad \\pi_{\\texttt{P#,Pnom,Pville}}(R) \\quad \\pi_{\\texttt{V#,P#,Qte}}(R)\\]\n\nPeut-on retrouver \\(R\\) à partir de ces trois projections ?"
  },
  {
    "objectID": "slides/DF_norm_2.html#décomposition-sans-perte-dinformation-2",
    "href": "slides/DF_norm_2.html#décomposition-sans-perte-dinformation-2",
    "title": "BD xxx : Normalisation II",
    "section": "Décomposition sans perte d’information",
    "text": "Décomposition sans perte d’information\n\nLa décomposition doit garantir que pour toute relation R, ses projections contiennent la même information que R au sens que l’on doit pouvoir reconstruire R à partir de ses projections\nComment tenter de reconstruire R à partir de ses projections :\nOn considère la jointure naturelle\n\n\\[\\pi_{\\texttt{V#,Vnom,Vville}}(R) \\bowtie \\pi_{\\texttt{P#,Pnom,Pville}}(R) \\bowtie \\pi_{\\texttt{V#,P#,Qte}}(R) \\]"
  },
  {
    "objectID": "slides/DF_norm_2.html#décomposition-sans-perte-dinformation-3",
    "href": "slides/DF_norm_2.html#décomposition-sans-perte-dinformation-3",
    "title": "BD xxx : Normalisation II",
    "section": "Décomposition sans perte d’information",
    "text": "Décomposition sans perte d’information\n\nLa propriété souhaitée s’écrit donc \\[R = \\pi_{\\texttt{V#,Vnom,Vville}}(R) \\bowtie \\pi_{\\texttt{P#,Pnom,Pville}}(R) \\bowtie \\pi_{\\texttt{V#,P#,Qte}}(R)\\]\n\n\npour toute relation R(V#, Vnom, Vville, P#, Pnom, Pville, Qte satisfaisant les DF\n\nEst-ce vrai ?\n\nIntuitivement, oui : à partir d’un tuple de Livraison(V#,P#,Qte)\n\n\nV# permet de récupérer toutes les informations sur le vendeur (V# → Vnom Vville)\n\n\nP# permet de récupérer toutes les informations sur le produit (P# → Pnom Pville)\n\n\n\n\n La propriété d’être sans perte d’information est liée à l’ensemble de DF considéré"
  },
  {
    "objectID": "slides/DF_norm_2.html#décomposition-sans-perte-dinformation-lossless-join",
    "href": "slides/DF_norm_2.html#décomposition-sans-perte-dinformation-lossless-join",
    "title": "BD xxx : Normalisation II",
    "section": "Décomposition sans perte d’information (lossless join)",
    "text": "Décomposition sans perte d’information (lossless join)\n\n\n\n\n\n\nDéfinition\n\n\nSoit \\(\\mathcal{A}\\) un schéma de relation et \\(\\Sigma\\) un ensemble de DF sur \\(\\mathcal{A}\\).\nUne décomposition \\(\\left\\{\\mathcal{A}_1,\\dots, \\mathcal{A}_k \\right\\}\\) est sans perte d’information par rapport à \\(\\Sigma\\) si pour toute relation R de schéma \\(\\mathcal{A}\\) satisfaisant \\(\\Sigma\\) on a \\[R= \\pi_{\\mathcal{A}_1}(R) \\bowtie \\pi_{\\mathcal{A}_2}(R) \\bowtie\\dots\\bowtie\\pi_{\\mathcal{A}_k}(R)\\]"
  },
  {
    "objectID": "slides/DF_norm_2.html#exemple-de-décomposition-avec-perte-dinformation",
    "href": "slides/DF_norm_2.html#exemple-de-décomposition-avec-perte-dinformation",
    "title": "BD xxx : Normalisation II",
    "section": "Exemple de décomposition avec perte d’information",
    "text": "Exemple de décomposition avec perte d’information\n\n\\(\\mathcal{A}=\\left\\{A,B,C\\right\\}\\) \\(\\Sigma=\\left\\{AB→ C\\right\\}\\)\ndécomposition \\(\\mathcal{A}_1=\\left\\{A,B\\right\\}\\) et \\(\\mathcal{A}_2=\\left\\{B,C\\right\\}\\)\nSoit \\(R\\) la relation\n\n\n\\(\\pi_{AB}(R)={\n\\begin{tabular}{|c|c|}\n\\hline\n\\bf A &\\bf  B \\\\\n\\hline\n1 & 2  \\\\\n4 & 2  \\\\\n\\hline\n\\end{tabular}\n}\\) et \\(\\pi_{BC}(R)={\n\\begin{tabular}{|c|c|}\n\\hline\n\\bf B &\\bf  C \\\\\n\\hline\n2 & 3  \\\\\n2 & 5  \\\\\n\\hline\n\\end{tabular}\n}\\)\n\\(\\pi_{AB}(R) \\bowtie \\pi_{BC}(R)=\n\\begin{tabular}{|c|c|c|}\n\\hline\n\\bf A &\\bf  B & \\bf C \\\\\n\\hline\n1 & 2 & 3 \\\\\n4 & 2 & 5 \\\\\n\\mathcal{A}lert 1 & \\mathcal{A}lert 2 & \\mathcal{A}lert 5 \\\\\n\\mathcal{A}lert 4 & \\mathcal{A}lert 2 & \\mathcal{A}lert 3 \\\\\n\\hline\n\\end{tabular}\\)"
  },
  {
    "objectID": "slides/DF_norm_2.html#algorithme-de-poursuite-1",
    "href": "slides/DF_norm_2.html#algorithme-de-poursuite-1",
    "title": "BD xxx : Normalisation II",
    "section": "Algorithme de poursuite",
    "text": "Algorithme de poursuite\n\nComment déterminer si une décomposition est sans perte d’information :\nSi \\(R\\) est une relation de schéma \\(\\mathcal{A}\\) on a toujours que \\[R\\subset \\pi_{\\mathcal{A}_1}(R) \\bowtie \\pi_{\\mathcal{A}_2}(R) \\bowtie\\dots\\bowtie\\pi_{\\mathcal{A}_k}(R)\\]\n\npar définition de la jointure naturelle et de la projection\n\nLe seul problème est que les jointures peut générer des tuples supplémentaires\nMais comme \\(R\\) est supposée vérifier les DF de \\(\\Sigma\\), l’inclusion inverse est garantie dans certains cas\nPour le savoir, un algorithme simple existe appelé algorithme de poursuite"
  },
  {
    "objectID": "slides/DF_norm_2.html#algorithme-de-poursuite-exemple",
    "href": "slides/DF_norm_2.html#algorithme-de-poursuite-exemple",
    "title": "BD xxx : Normalisation II",
    "section": "Algorithme de poursuite : exemple",
    "text": "Algorithme de poursuite : exemple\nSi on remplace le schéma (V#, Vnom, Vville, P\\#, Pnom, Pville, Qte)\npar\n\\[\\begin{align*}\n&\\texttt{Vendeur(V#, Vnom, Vville)}\\\\\n&\\texttt{Produit(P#, Pnom, Pville)}\\\\\n&\\texttt{Livraison(V#, P#, Qte)}\n\\end{align*}\\]\nA-t-on \\[\\pi_{\\texttt{V#,Vnom,Vville}}(R) \\bowtie \\pi_{\\texttt{P#,Pnom,Pville}}(R) \\bowtie \\pi_{\\texttt{V#,P#,Qte}}(R)\\subset R\\quad ?\\]\nSoit \\(t\\) un tuple dans la jointure"
  },
  {
    "objectID": "slides/DF_norm_2.html#algorithme-de-poursuite-exemple-1",
    "href": "slides/DF_norm_2.html#algorithme-de-poursuite-exemple-1",
    "title": "BD xxx : Normalisation II",
    "section": "Algorithme de poursuite : exemple",
    "text": "Algorithme de poursuite : exemple\n\nSoit \\(t\\) un tuple dans la jointure\n\n\n\\((a, b, c)\\in \\pi_{`V#`,Vnom,Vville}(R)\\) donc il existe \\(e_1, f_1, g_1\\) tels que \\((a, b, c, d_1, e_1, f_1, g_1) \\in R\\)\n\\((d,e,f) \\in \\pi_{P\\#,Pnom,Pville}(R)\\) donc il existe \\(a_2, b_2, c_2, g_2\\) tels que \\((a_2, b_2, c_2, d, e, f, g_2)\\in R\\)\n\\((a,d,g)\\in \\pi_{`V#`,P\\#,Qte}(R)\\) donc il existe \\(b_3,c_3,e_3,f_3\\) tels que \\((a,b_3,c_3,d,e_3,f_3,g)\\in R\\)\nOn peut le représenter comme ceci :"
  },
  {
    "objectID": "slides/DF_norm_2.html#algorithme-de-poursuite-exemple-2",
    "href": "slides/DF_norm_2.html#algorithme-de-poursuite-exemple-2",
    "title": "BD xxx : Normalisation II",
    "section": "Algorithme de poursuite : exemple",
    "text": "Algorithme de poursuite : exemple\n\n\nV# → Vnom, Vville donc \\(b_3=b\\) et \\(c_3=c\\)\n\n\n\nP#\\(→\\) Pnom, Pville donc \\(e_3=e\\) et \\(f_3=f\\)\n\n\n\nOn a obtenu une ligne égale au tuple \\(t=(a,b,c,d,e,f,g)\\) donc \\(t\\in R\\). On en déduit que la décomposition est SPI."
  },
  {
    "objectID": "slides/DF_norm_2.html#algorithme-de-poursuite-cas-général",
    "href": "slides/DF_norm_2.html#algorithme-de-poursuite-cas-général",
    "title": "BD xxx : Normalisation II",
    "section": "Algorithme de poursuite : cas général",
    "text": "Algorithme de poursuite : cas général\n\nEntrée : un schéma \\(\\mathcal{A}\\), une décomposition \\(\\left\\{\\mathcal{A}_1,\\dots,\\mathcal{A}_k}\\) et un ensemble \\(\\Sigma\\) de DF\nPour chaque attribut de \\(\\mathcal{A}\\), choisir un symbole (par exemple \\(a\\), \\(b\\), \\(c\\), \\(\\dots\\)). La correspondance doit être injective.\nConstruire un tableau dont les colonnes sont les attributs de \\(\\mathcal{A}\\)\n\nLe tableau a une ligne pour chaque \\(\\mathcal{A}_i\\)\nSur la ligne associée à \\(\\mathcal{A}_i\\), les positions correspondant à \\(\\mathcal{A}_i\\) sont remplies avec les symboles choisis.\nLes autres positions sont remplies avec les symboles indicés par \\(i\\)\n\nRépéter tant que possible : s’il existe une DF \\(X→ Y\\) dans \\(\\Sigma\\) et deux lignes du tableau en accord sur \\(X\\), égaliser ces deux lignes sur \\(Y\\)\nSortie : Si on obtient une ligne sans valeur indicée, la décomposition est sans perte d’information, sinon il y a perte d’information"
  },
  {
    "objectID": "slides/DF_norm_2.html#algorithme-de-poursuite---cas-général",
    "href": "slides/DF_norm_2.html#algorithme-de-poursuite---cas-général",
    "title": "BD xxx : Normalisation II",
    "section": "Algorithme de poursuite - cas général",
    "text": "Algorithme de poursuite - cas général\nA nouveau, en d’autres termes:\n\nSi deux tuples s’accordent sur la partie gauche d’une DF, leur partie droite doit être égale\nDans ce cas, remplacer les attributs d’un des deux tuples correspondant à la partie droite par les valeurs de l’autre. En privilégiant si possible les valeurs sans indice (qui viennent de \\(R\\)) sur les valeurs indicées (qui sont arbitraires).\nSi on obtient un tuple sans valeur indicées i.e. \\(t\\), on peut déduire que \\(t\\) est bien dans \\(R\\). La décomposition est sans perte."
  },
  {
    "objectID": "slides/DF_norm_2.html#algorithme-de-poursuite-exemple-2-1",
    "href": "slides/DF_norm_2.html#algorithme-de-poursuite-exemple-2-1",
    "title": "BD xxx : Normalisation II",
    "section": "Algorithme de poursuite : exemple 2",
    "text": "Algorithme de poursuite : exemple 2\nConsidérons l’exemple :\n\\[\\mathcal{A}=\\left\\{A,B,C,D\\right\\}\\]\navec \\(\\mathcal{A}_1=\\{A,B\\}\\), \\(\\mathcal{A}_2=\\{B,C\\}\\) et \\(\\mathcal{A}_3=\\{C,D\\}\\)\nSoit \\(\\Sigma=\\{{C}→{D}; {B}→{A}\\}\\).\nSoit \\(t=(a,b,c,d)\\). Soit \\(t_1,t_2,t_3\\) les tuples de \\(R\\) suivants:\n\\[\\begin{array}{c||c|c|c|c|}\n\\hline & A & B & C & D  \\\\\\hline\n\\hline t_1 & a & b &  c_1& d_1  \\\\\n\\hline t_2 & a_2 & b & c & d_2  \\\\\n\\hline  t_3 & a_3& b_3 & c & d  \\\\\n\\hline\n\\end{array}\\]\nIci, on a pris \\(c_1,d_1, a_2,d_2, a_3,b_3\\) comme valeurs variables et \\(a,b,c,d\\) comme constantes."
  },
  {
    "objectID": "slides/DF_norm_2.html#algorithme-de-poursuite---exemple-2",
    "href": "slides/DF_norm_2.html#algorithme-de-poursuite---exemple-2",
    "title": "BD xxx : Normalisation II",
    "section": "Algorithme de poursuite - exemple 2",
    "text": "Algorithme de poursuite - exemple 2\n\\[\\begin{array}{|c|c|c|c|}\n\\hline A & B & C & D  \\\\\\hline\n\\hline a & b &  c_1& d_1  \\\\\n\\hline a_2 & b & c & d_2  \\\\\n\\hline  a_3& b_3 & c & d  \\\\\n\\hline\n\\end{array}\\]\nPar la dépendance \\({B}→{A}\\), il vient :\n\\[\\begin{array}{|c|c|c|c|}\n\\hline A & B & C & D  \\\\\\hline\n\\hline a & b &  c_1& d_1  \\\\\n\\hline {\\color{red} a} & b & c & d_2  \\\\\n\\hline  a_3& b_3 & c & d  \\\\\n\\hline\n\\end{array}\\]"
  },
  {
    "objectID": "slides/DF_norm_2.html#algorithme-de-poursuite-exemple-2-2",
    "href": "slides/DF_norm_2.html#algorithme-de-poursuite-exemple-2-2",
    "title": "BD xxx : Normalisation II",
    "section": "Algorithme de poursuite : exemple 2",
    "text": "Algorithme de poursuite : exemple 2\n\\[\\begin{array}{|c|c|c|c|}\n\\hline A & B & C & D  \\\\\\hline\n\\hline a & b &  c_1& d_1  \\\\\n\\hline {\\color{red} a} & b & c & d_2  \\\\\n\\hline  a_3& b_3 & c & d  \\\\\n\\hline\n\\end{array}\\]\nPar la dépendance \\({C}→{D}\\), il vient :\n\\[\\begin{array}{|c|c|c|c|}\n\\hline A & B & C & D  \\\\\\hline\n\\hline a & b &  c_1& d_1  \\\\\n\\hline {\\color{red} a} & b & c & {\\color{red} d}  \\\\\n\\hline  a_3& b_3 & c & d  \\\\\n\\hline\n\\end{array}\\]\nOn a bien fait apparaître \\(t\\) qui appartient donc à \\(R\\)."
  },
  {
    "objectID": "slides/DF_norm_2.html#algorithme-de-poursuite---exemple-3",
    "href": "slides/DF_norm_2.html#algorithme-de-poursuite---exemple-3",
    "title": "BD xxx : Normalisation II",
    "section": "Algorithme de poursuite - exemple 3",
    "text": "Algorithme de poursuite - exemple 3\nConsidérons toujours l’exemple : \\(\\mathcal{A}=\\left\\{A,B,C,D\\right\\}\\) avec\\ \\(\\mathcal{A}_1=\\{A,B\\}\\), \\(\\mathcal{A}_2=\\{B,C\\}\\) et \\(\\mathcal{A}_3=\\{C,D\\}\\)\\ Mais avec \\(\\Sigma=\\{{B}→{AD}\\}\\).\n\\[\\begin{array}{|c|c|c|c|}\n\\hline A & B & C & D  \\\\\\hline\n\\hline a & b &  c_1& d_1  \\\\\n\\hline a_2 & b & c & d_2  \\\\\n\\hline  a_3& b_3 & c & d  \\\\\n\\hline\n\\end{array}\\]\nDans ce cas, en utilisant la seule DF \\({B}→{AD}\\), on obtient \\(a_2=a\\) et \\(d_1=d_2\\) :\n\\[\\begin{array}{|c|c|c|c|}\n\\hline A & B & C & D  \\\\\\hline\n\\hline a & b &  c_1& d_1  \\\\\n\\hline a & b & c & d_1 \\\\\n\\hline  a_3& b_3 & c & d  \\\\\n\\hline\n\\end{array}\\]\nMais on ne peut aller plus loin : \\(t=(a,b,c,d)\\) n’est pas dans \\(R\\) en général."
  },
  {
    "objectID": "project-tips-resources.html",
    "href": "project-tips-resources.html",
    "title": "Project tips + resources",
    "section": "",
    "text": "R Data Sources for Regression Analysis\nFiveThirtyEight data\nTidyTuesday\n\n\n\n\n\nWorld Health Organization\nThe National Bureau of Economic Research\nInternational Monetary Fund\nGeneral Social Survey\nUnited Nations Data\nUnited Nations Statistics Division\nU.K. Data\nU.S. Data\nU.S. Census Data\nEuropean Statistics\nStatistics Canada\nPew Research\nUNICEF\nCDC\nWorld Bank\nElection Studies",
    "crumbs": [
      "Project",
      "Tips + resources"
    ]
  },
  {
    "objectID": "project-tips-resources.html#data-sources",
    "href": "project-tips-resources.html#data-sources",
    "title": "Project tips + resources",
    "section": "",
    "text": "R Data Sources for Regression Analysis\nFiveThirtyEight data\nTidyTuesday\n\n\n\n\n\nWorld Health Organization\nThe National Bureau of Economic Research\nInternational Monetary Fund\nGeneral Social Survey\nUnited Nations Data\nUnited Nations Statistics Division\nU.K. Data\nU.S. Data\nU.S. Census Data\nEuropean Statistics\nStatistics Canada\nPew Research\nUNICEF\nCDC\nWorld Bank\nElection Studies",
    "crumbs": [
      "Project",
      "Tips + resources"
    ]
  },
  {
    "objectID": "project-tips-resources.html#tips",
    "href": "project-tips-resources.html#tips",
    "title": "Project tips + resources",
    "section": "Tips",
    "text": "Tips\n\nAsk questions if any of the expectations are unclear.\nCode: In your write up your code should be hidden (echo = FALSE) so that your document is neat and easy to read. However your document should include all your code such that if I re-knit your qmd file I should be able to obtain the results you presented.\n\nException: If you want to highlight something specific about a piece of code, you’re welcome to show that portion.\n\nMerge conflicts will happen, issues will arise, and that’s fine! Commit and push often, and ask questions when stuck.\nMake sure each team member is contributing, both in terms of quality and quantity of contribution (we will be reviewing commits from different team members).\nAll team members are expected to contribute equally to the completion of this assignment and group assessments will be given at its completion - anyone judged to not have sufficient contributed to the final product will have their grade penalized. While different teams members may have different backgrounds and abilities, it is the responsibility of every team member to understand how and why all code and approaches in the assignment works.",
    "crumbs": [
      "Project",
      "Tips + resources"
    ]
  },
  {
    "objectID": "project-tips-resources.html#formatting-communication-tips",
    "href": "project-tips-resources.html#formatting-communication-tips",
    "title": "Project tips + resources",
    "section": "Formatting + communication tips",
    "text": "Formatting + communication tips\n\nSuppress Code, Warnings, & Messages\n\nInclude the following code in a code chunk at the top of your .qmd file to suppress all code, warnings, and other messages. Use the code chunk header {r set-up, include = FALSE} to suppress this set up code.\n\n\n\nHeaders\n\nUse headers to clearly label each section.\nInspect the document outline to review your headers and sub-headers.\n\n\n\nReferences\n\nInclude all references in a section called “References” at the end of the report.\nThis course does not have specific requirements for formatting citations and references.\n\n\n\nAppendix\n\nIf you have additional work that does not fit or does not belong in the body of the report, you may put it at the end of the document in section called “Appendix”.\nThe items in the appendix should be properly labeled.\nThe appendix should only be for additional material. The reader should be able to fully understand your report without viewing content in the appendix.\n\n\n\nResize figures\nResize plots and figures, so you have more space for the narrative.\n\n\nArranging plots\nArrange plots in a grid, instead of one after the other. This is especially useful when displaying plots for exploratory data analysis and to check assumptions.\nIf you’re using ggplot2 functions, the patchwork package makes it easy to arrange plots in a grid. See the documentation and examples here.\n\n\nDo a little more to make the plot look professional!\n\nInformative title and axis labels\nFlipped coordinates to make names readable\nArranged bars based on count\nCapitalized manufacturer names\nOptional: Added color - Use a coordinated color scheme throughout paper / presentation\nOptional: Applied a theme - Use same theme throughout paper / presentation\n\n\n\nTables and model output\n\nUse the kable function from the knitr package to neatly output all tables and model output. This will also ensure all model coefficients are displayed.\n\nUse the digits argument to display only 3 or 4 significant digits.\nUse the caption argument to add captions to your table.\n\n\n\n\nGuidelines for communicating results",
    "crumbs": [
      "Project",
      "Tips + resources"
    ]
  },
  {
    "objectID": "project-tips-resources.html#additional-resources",
    "href": "project-tips-resources.html#additional-resources",
    "title": "Project tips + resources",
    "section": "Additional resources",
    "text": "Additional resources\n\nR for Data Science\nQuarto Documentation",
    "crumbs": [
      "Project",
      "Tips + resources"
    ]
  },
  {
    "objectID": "computing-access.html",
    "href": "computing-access.html",
    "title": "Moyens de calcul",
    "section": "",
    "text": "Serveur\n\nServeur PostGreSQL\nMachine dédiée\n\n\n\nClients\n\npsql\npgcli\ndbeaver\n\n\n\nConnexions ssh",
    "crumbs": [
      "Computing",
      "Access"
    ]
  },
  {
    "objectID": "exams/ct-2024-06-19.html",
    "href": "exams/ct-2024-06-19.html",
    "title": "MA15Y030 - Automne 2024",
    "section": "",
    "text": "L3 MIASHS/Ingémath\nUniversité Paris Cité\nAnnée 2023-2024\nCourse Homepage\n\nMoodle\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPas de documents autorisés\nPas de téléphone portable\n\n\n\n\n\n\n\n\n\n\nLes requêtes portent sur le schéma nycflights légèrement nettoyé.\n\n\n\n\n\n\nNYCFlights en relationel à pattes de corbeau\n\n\n\n\n\nDéfinition du schéma en SQL\n\n\n\n\n\n\nCREATE TABLE airlines (\n    carrier text NOT NULL,\n    \"name\" text NULL,\n    CONSTRAINT airlines_pk \n        PRIMARY KEY (carrier),\n    CONSTRAINT airlines_un \n        UNIQUE (name)\n);\nCREATE TABLE airports (\n    faa text NOT NULL,\n    \"name\" text NULL,\n    lat float8 NULL,\n    lon float8 NULL,\n    alt float8 NULL,\n    tz float8 NULL,\n    dst text NULL,\n    tzone text NULL,\n    CONSTRAINT airports_pk \n        PRIMARY KEY (faa),\n    CONSTRAINT airports_un \n        UNIQUE (name),\n    CONSTRAINT airports_un_ll \n        UNIQUE (lat, lon)\n);\n\n\nCREATE TABLE weather (\n    origin text NOT NULL,\n    \"year\" int4 NULL,\n    \"month\" int4 NULL,\n    \"day\" int4 NULL,\n    \"hour\" int4 NULL,\n    \"temp\" float8 NULL,\n    dewp float8 NULL,\n    humid float8 NULL,\n    wind_dir float8 NULL,\n    wind_speed float8 NULL,\n    wind_gust float8 NULL,\n    precip float8 NULL,\n    pressure float8 NULL,\n    visib float8 NULL,\n    time_hour timestamptz NOT NULL,\n    CONSTRAINT weather_pk \n        PRIMARY KEY (origin, time_hour)\n);\nALTER TABLE weather ADD \n    CONSTRAINT weather_fk \n    FOREIGN KEY (origin) \n    REFERENCES airports(faa) \n    ON DELETE CASCADE \n    ON UPDATE CASCADE;\n\n\n\nCREATE TABLE planes (\n    tailnum text NOT NULL,\n    \"year\" int4 NULL,\n    \"type\" text NULL,\n    manufacturer text NULL,\n    model text NULL,\n    engines int4 NULL,\n    seats int4 NULL,\n    speed int4 NULL,\n    engine text NULL,\n    CONSTRAINT planes_pk   PRIMARY KEY (tailnum)\n);\n\n\n\n\n\n\nCREATE TABLE flights (\n    \"year\" int4 NULL,\n    \"month\" int4 NULL,\n    \"day\" int4 NULL,\n    dep_time int4 NULL,\n    sched_dep_time int4 NULL,\n    dep_delay float8 NULL,\n    arr_time int4 NULL,\n    sched_arr_time int4 NULL,\n    arr_delay float8 NULL,\n    carrier text NULL,\n    flight int4 NULL,\n    tailnum text NOT NULL,\n    origin text NOT NULL,\n    dest text NULL,\n    air_time float8 NULL,\n    distance float8 NULL,\n    \"hour\" float8 NULL,\n    \"minute\" float8 NULL,\n    time_hour timestamptz NOT NULL,\n    CONSTRAINT flights_pk \n        PRIMARY KEY (\n            tailnum, origin, time_hour)\n);\n\n\nALTER TABLE flights ADD \n    CONSTRAINT flights_fk \n    FOREIGN KEY (carrier) \n    REFERENCES airlines(carrier) \n    ON DELETE SET NULL \n    ON UPDATE CASCADE;\nALTER TABLE flights ADD \n    CONSTRAINT flights_fk_dest \n    FOREIGN KEY (dest) \n    REFERENCES airports(faa) \n    ON DELETE SET NULL \n    ON UPDATE CASCADE;\nALTER TABLE flights ADD \n    CONSTRAINT flights_fk_origin \n    FOREIGN KEY (origin) \n    REFERENCES airports(faa) \n    ON DELETE SET NULL \n    ON UPDATE CASCADE;\nALTER TABLE flights ADD \n    CONSTRAINT flights_fk_planes \n    FOREIGN KEY (tailnum) \n    REFERENCES planes(tailnum) \n    ON DELETE SET NULL \n    ON UPDATE CASCADE;\n\n\n\nDans le schéma nycflights, on a aussi les dépendances fonctionnelles suivantes:\nTable airports\n\nfaa, name, et (lon, lat) sont des clés.\n\nTable airlines\n\ncarrier et name sont des clés\n\nTable weather\n\norigin, time_hour est une clé\ntime_hour → year, month, day, hour\nyear, month, day, hour  → time_hour\n\nTable planes\n\ntailnum est une clé\nmodel → manufacturer, engines, engine, type\n\nTable flights\n\ntailnum, time_hour → carrier\ntime_hour → sched_dep_time\nsched_dep_time, dep_time → dep_delay\nsched_arr_time, arr_time → arr_delay\norigin, dest, dep_time, arr_time → airtime\ntime_hour → year, month, day, hour, minute\nyear, month, day, hour, minute → time_hour\norigin, dest → distance\n(tailnum, origin, time_hour) est une clé\n(flight, dest, origin, year, month, day) est une clé\n\n\n\n\n\n\n\n\n\n\nExercice : Requêtes (schéma nycflights)\n\n\n\n\n\n\n\n\n\n\n\n\nRequête 1\n\n\n\n\n\nPour chaque couple origine/destination, lister les caractéristiques de l’avion le plus rapide sur la liaison.\n\n\n\n\n\n\n\n\nRequête 2\n\n\n\n\n\n\nPour chaque aéroport d’origine, déterminer pour chaque heure de la jourńee, les températures maximales et minimales\n\n\n\n\n\n\n\n\nRequête 3\n\n\n\n\nPour chaque aéroport d’origine, pour chaque température enregistrée en début d’heure, arrondie à l’entier le plus proche, indiquer la proportion de vols avec un retard supérieur à 30 mn au décollage.\n\n\n\n\n\n\n\n\nRequête 4\n\n\n\n\n\nPour chaque aéroport de destination, lister les modèles d’avion qui ont atterri au moins une fois dans cet aéroport.\n\n\n\n\n\n\n\n\nRequête 5\n\n\n\n\n\nPour chaque modèle d’avion, lister pour chaque semaine, le nombre de vols efectivement réalisés.\n\n\n\n\n\n\n\n\nRequête 6\n\n\n\n\n\nQuelles sont les destinations qui ne sont pas desservies le jeudi ?\n\n\n\n\n\n\n\n\nRequête 7\n\n\n\n\nQuelles sont les villes desservies par une seule compagnie le dimanche ?\n\n\n\n\n\n\n\n\nRequête 8\n\n\n\n\n\nQuelles sont les compagnies pour lesquelles le retard médian au décollage est supérieur à 15 minutes ?\n\n\n\n\n\n\n\n\nRequête 9\n\n\n\n\n\nQuelles sont les destinations qui sont desservies quotidiennement par une compagnie ?\n\n\n\n\n\n\n\n\nRequête 10\n\n\n\n\n\nQuelles sont les compagnies qui exploitent des avions de tous les constructeurs ?\n\n\n\n\n\n\n\n\nQuelques conseils\n\n\n\n\nPréférez les clauses WITH et les jointures aux requêtes imbriquées sauf si la requête imbriquée est très simple. C’est une question de lisibilité et donc souvent de correction.\nNe mélangez pas les fonctions fenêtres et les clauses GROUP BY ...\n\nSELECT ..., FOO() OVER w\nFROM R\nWINDOW w AS (PARTITION BY ... ORDER BY ...)\nGROUP BY ... ;  \nest tout simplement incorrect.\n\nLorsque vous effectuez un partitionnement par GROUP BY ..., la clause SELECT ... est sévèrement contrainte, vous n’y trouverez que\n\nles colonnes qui ont servi dans la clause GROUP BY ..., normalement elles devraient toutes y figurer\ndes fonctions d’aggrégation, comme COUNT(...), SUM(...), VAR(...)"
  },
  {
    "objectID": "exams/cc3-2022-10-14.html",
    "href": "exams/cc3-2022-10-14.html",
    "title": "MA15Y030 - Automne 2024",
    "section": "",
    "text": "Sur le serveur, dans votre schéma personnel, créer les fonctions SQL et vues correspondant aux cinq questions suivantes."
  },
  {
    "objectID": "exams/cc3-2022-10-14.html#les-pays-où-lon-cause-le-.",
    "href": "exams/cc3-2022-10-14.html#les-pays-où-lon-cause-le-.",
    "title": "MA15Y030 - Automne 2024",
    "section": "Les pays où l’on cause le ….",
    "text": "Les pays où l’on cause le ….\nÉcrire une fonction SQL nommée cc_fonc_1 qui prend en argument une chaine de caractères censée désigner une langue et renvoie une table (name_country TEXT, pop_speakers int4) qui contient les 5 pays comportant le plus de locuteurs de la langue en question et pour chaque pays le nombre estimé de locuteurs de la langue en question\n\n\n\n\n\n\nRéponse attendue pour %French% :\n\n\n\nname_country\npop_speakers\n\n\n\n\nFrance\n55435254\n\n\nCanada\n7288398\n\n\nBelgium\n3337914\n\n\nTunisia\n2521118\n\n\nUnited States\n1948499"
  },
  {
    "objectID": "exams/cc3-2022-10-14.html#pays-peu-concentrés-sur-les-grandes-villes",
    "href": "exams/cc3-2022-10-14.html#pays-peu-concentrés-sur-les-grandes-villes",
    "title": "MA15Y030 - Automne 2024",
    "section": "Pays peu concentrés sur les grandes villes",
    "text": "Pays peu concentrés sur les grandes villes\nCréer une vue cc_vue_2 des pays dont la population n’est pas nulle et où les cinq plus grandes villes ne rassemblent pas plus du dixième de la population. La vue aura pour schéma (countrycode, name_country, portion)\n\n\n\n\n\n\nRéponse attendue pour\nSELECT * \nFROM username.cc_vue_2 cv \nWHERE cv.countrycode  IN (\n SELECT c.countrycode \n FROM world.country c \n WHERE region='Eastern Africa'\n) ;\n\n\n\ncountrycode\nname_country\nportion\n\n\n\n\nMDG\nMadagascar\n0.07045295\n\n\nMWI\nMalawi\n0.08367222\n\n\nBDI\nBurundi\n0.04480956\n\n\nCOM\nComoros\n0.062283736\n\n\nTZA\nTanzania\n0.071704924\n\n\nMYT\nMayotte\n0.08053691\n\n\nUGA\nUganda\n0.040903665\n\n\nRWA\nRwanda\n0.036984354\n\n\nETH\nEthiopia\n0.047906272"
  },
  {
    "objectID": "exams/cc3-2022-10-14.html#la-cinquième-ville-la-plus-peuplée-dans-chaque-pays",
    "href": "exams/cc3-2022-10-14.html#la-cinquième-ville-la-plus-peuplée-dans-chaque-pays",
    "title": "MA15Y030 - Automne 2024",
    "section": "La cinquième ville la plus peuplée dans chaque pays",
    "text": "La cinquième ville la plus peuplée dans chaque pays\nÉcrire une fonction de cc_fonc_3 langage SQL qui prend en argument une chaine de caractères censée désigner un pays par son nom et renvoie le nom de la cinquième ville la plus peuplée du pays (type de name_city), et la part de la population du pays qui réside dans cette ville (type float4).\n\n\n\n\n\n\nRéponse attendue pour\nSELECT name_city, prop \nFROM username.cc_fonc_3('Italy') ;\n\n\n\nname_city\nprop\n\n\n\n\nPalermo\n0.011854959"
  },
  {
    "objectID": "exams/cc3-2022-10-14.html#la-population-des-deux-villes-les-plus-peuplées-de-chaque-pays",
    "href": "exams/cc3-2022-10-14.html#la-population-des-deux-villes-les-plus-peuplées-de-chaque-pays",
    "title": "MA15Y030 - Automne 2024",
    "section": "La population des deux villes les plus peuplées de chaque pays",
    "text": "La population des deux villes les plus peuplées de chaque pays\nCréer une vue cc_vue_4 qui liste par pays, le nombre d’habitants des deux villes les plus peuplées. La vue aura pour schéma (name_contry text, pop_two_cities int4).\n\n\n\n\n\n\nRéponse attendue pour\nSELECT * \nFROM username.cc_vue_4 \nWHERE name_country = 'France' ;\n\n\n\nname_country\npop_two_cities\n\n\n\n\nFrance\n2923676"
  },
  {
    "objectID": "exams/cc3-2022-10-14.html#pays-où-deux-langues-sont-parlées-par-au-moins-un-dixième-de-la-population",
    "href": "exams/cc3-2022-10-14.html#pays-où-deux-langues-sont-parlées-par-au-moins-un-dixième-de-la-population",
    "title": "MA15Y030 - Automne 2024",
    "section": "Pays où deux langues sont parlées par au moins un dixième de la population",
    "text": "Pays où deux langues sont parlées par au moins un dixième de la population\nCréer une vue cc_vue_5 des pays où au moins deux langues sont (chacunes) parlées par au moins un dixieme de la population. La vue aura même schema que world.country.\n\n\n\n\n\n\nSELECT countrycode, name_country  \nFROM username.cc_vue_5 \nWHERE region='Eastern Europe' ;\n\n\n\ncountrycode\nname_country\n\n\n\n\nCZE\nCzech Republic\n\n\nBLR\nBelarus\n\n\nMDA\nMoldova\n\n\nUKR\nUkraine\n\n\nSVK\nSlovakia"
  },
  {
    "objectID": "exams/cc1-2023-10-27.html",
    "href": "exams/cc1-2023-10-27.html",
    "title": "MA15Y030 - Automne 2024",
    "section": "",
    "text": "L3 MIASHS/Ingémath\nUniversité Paris Cité\nAnnée 2023-2024\nCourse Homepage\n\nMoodle\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPas de documents autorisés\nPas de téléphone portable\n\n\n\n\nToutes les questions portent sur le schéma world rappelé ci-dessous.\n\n\n\nSchéma world\n\n\n\n\n\n\n\n\nLes territoires qui sont inscrits dans la table country ne sont pas tous des pays, et pour certaines lignes, population_country, gnp, governmentform, … ne sont pas renseignés.\n\n\n\n\n\n\n\n\n\nPour chaque question, proposer une requête écrite en algèbre relationnelle ou en SQL.\n\n\n\n\nDonner pour chaque pays, chaque district, la population totale qui réside dans des villes répertoriées dans city.\n\n\nDonner pour chaque pays le nombre d’habitants qui ne parlent pas une langue officielle. On suppose ici que chaque habitant ne parle qu’une seule langue.\n\n\nDonner, pour chaque région ayant au moins 50 millions d’habitants, le ou les pays les moins peuplés de la région.\n\n\nListe des pays où la langue la plus parlée n’est pas officielle\n\n\nListe des pays où aucune ville ne compte plus \\(3\\) millions d’habitants.\n\n\nListe des formes de gouvernement (governmentform) pour lesquelles dans tous les pays possédant cette forme de gouvernement, aucune langue n’est officielle.\n\n\nDonner pour chaque région, le minimum du PIB par habitant (c’est-à-dire le résultat de la division 1000000 * gnp / population_country, puisque le PIB est donné en millions) dans la région, un des pays (son countrycode) de la région où ce minimum est réalisé, le maximum du PIB par habitant et un des pays (son countrycode) où ce maximum est réalisé."
  },
  {
    "objectID": "exams/cc2-2022-11-25.html",
    "href": "exams/cc2-2022-11-25.html",
    "title": "MA15Y030 - Automne 2024",
    "section": "",
    "text": "L3 MIASHS/Ingémath\nUniversité Paris Cité\nAnnée 2022-2023\nCourse Homepage\n\nMoodle\n\n\n\n\n\n\n\nSur le serveur bd_2023 hébergé par etu-pgsql, dans votre schéma personnel, créer les vues correspondant aux cinq questions suivantes.\n\nQuestion 1\nSchéma nycflights13\nCréer dans votre schéma personnel une vue nommée cc2_vue_1 de schéma (n integer) qui répond à la question : combien de vols sont arrivés avec un retard d’au moins une heure en partant à l’heure de l’aéroport JFK ?\n\nQuestion 2\nSchéma nycflights13\nCréer dans votre schéma personnel une vue nommée cc2_vue_2 de schéma (n integer) qui répond à la question : Combien de modèles différents ont été faits par la compagnie BOEING ?\n\nQuestion 3\nSchéma babynames\nCréer dans votre schéma personnel une vue nommée cc2_vue_3 de schéma (prenom TEXT) qui répond à la question :\nQuels sont les prénoms donnés durant toutes les décennies pour lesquelles la base de données comporte des informations, sans doublon, par ordre alphabétique.\n844 lignes attendues (dont _PRENOMS_RARES)\n\nQuestion 4\nSchéma ou babynames\nCréer dans votre schéma personnel une vue nommée cc2_vue_4 de schéma (prenom, n_feminin, n_masculin) qui contient les prénoms mixtes, c’est-à-dire les prénoms attribués plus de 5000 fois à des filles et à des garcons (MARIE a été attribué 26897 fois à des petits garcons). n_feminin représente le nombre total d’attributions du prénom à des filles et n_masculin représente le nombre total d’attributions du prénom à des garcons.\nVotre vue contiendra (entre autres) la ligne :\n+---------+---------+----------+\n|prenom   |n_feminin|n_masculin|\n+---------+---------+----------+\n| ...     | ...     | ...      |\n|MARIE    |  2232238|     26897|\n| ...     | ...     | ...      |\n| ...     | ...     | ...      |\n\nQuestion 5\nSchéma nycflights13\nCréer dans votre schéma personnel une vue nommée cc2_vue_5 de schéma (name text) qui répond à la question : Quelles sont les noms des destinations accessibles par un vol direct depuis toutes les origines ?\n42 lignes attendues"
  },
  {
    "objectID": "exams/ct-2024-01-08.html",
    "href": "exams/ct-2024-01-08.html",
    "title": "MA15Y030 - Automne 2024",
    "section": "",
    "text": "L3 MIASHS/Ingémath\nUniversité Paris Cité\nAnnée 2023-2024\nCourse Homepage\n\nMoodle\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPas de documents autorisés\nPas de téléphone portable\n\n\n\n\n\n\n\n\n\n\nLes trois exercices (modélisation, normalisation, requêtes) portent sur le schéma nycflights légèrement nettoyé.\n\n\n\n\n\n\nNYCFlights en relationel à pattes de corbeau\n\n\n\n\n\nDéfinition du schéma en SQL\n\n\n\n\n\n\nCREATE TABLE airlines (\n    carrier text NOT NULL,\n    \"name\" text NULL,\n    CONSTRAINT airlines_pk \n        PRIMARY KEY (carrier),\n    CONSTRAINT airlines_un \n        UNIQUE (name)\n);\nCREATE TABLE airports (\n    faa text NOT NULL,\n    \"name\" text NULL,\n    lat float8 NULL,\n    lon float8 NULL,\n    alt float8 NULL,\n    tz float8 NULL,\n    dst text NULL,\n    tzone text NULL,\n    CONSTRAINT airports_pk \n        PRIMARY KEY (faa),\n    CONSTRAINT airports_un \n        UNIQUE (name),\n    CONSTRAINT airports_un_ll \n        UNIQUE (lat, lon)\n);\n\n\nCREATE TABLE weather (\n    origin text NOT NULL,\n    \"year\" int4 NULL,\n    \"month\" int4 NULL,\n    \"day\" int4 NULL,\n    \"hour\" int4 NULL,\n    \"temp\" float8 NULL,\n    dewp float8 NULL,\n    humid float8 NULL,\n    wind_dir float8 NULL,\n    wind_speed float8 NULL,\n    wind_gust float8 NULL,\n    precip float8 NULL,\n    pressure float8 NULL,\n    visib float8 NULL,\n    time_hour timestamptz NOT NULL,\n    CONSTRAINT weather_pk \n        PRIMARY KEY (origin, time_hour)\n);\nALTER TABLE weather ADD \n    CONSTRAINT weather_fk \n    FOREIGN KEY (origin) \n    REFERENCES airports(faa) \n    ON DELETE CASCADE \n    ON UPDATE CASCADE;\n\n\n\nCREATE TABLE planes (\n    tailnum text NOT NULL,\n    \"year\" int4 NULL,\n    \"type\" text NULL,\n    manufacturer text NULL,\n    model text NULL,\n    engines int4 NULL,\n    seats int4 NULL,\n    speed int4 NULL,\n    engine text NULL,\n    CONSTRAINT planes_pk   PRIMARY KEY (tailnum)\n);\n\n\n\n\n\n\nCREATE TABLE flights (\n    \"year\" int4 NULL,\n    \"month\" int4 NULL,\n    \"day\" int4 NULL,\n    dep_time int4 NULL,\n    sched_dep_time int4 NULL,\n    dep_delay float8 NULL,\n    arr_time int4 NULL,\n    sched_arr_time int4 NULL,\n    arr_delay float8 NULL,\n    carrier text NULL,\n    flight int4 NULL,\n    tailnum text NOT NULL,\n    origin text NOT NULL,\n    dest text NULL,\n    air_time float8 NULL,\n    distance float8 NULL,\n    \"hour\" float8 NULL,\n    \"minute\" float8 NULL,\n    time_hour timestamptz NOT NULL,\n    CONSTRAINT flights_pk \n        PRIMARY KEY (\n            tailnum, origin, time_hour)\n);\n\n\nALTER TABLE flights ADD \n    CONSTRAINT flights_fk \n    FOREIGN KEY (carrier) \n    REFERENCES airlines(carrier) \n    ON DELETE SET NULL \n    ON UPDATE CASCADE;\nALTER TABLE flights ADD \n    CONSTRAINT flights_fk_dest \n    FOREIGN KEY (dest) \n    REFERENCES airports(faa) \n    ON DELETE SET NULL \n    ON UPDATE CASCADE;\nALTER TABLE flights ADD \n    CONSTRAINT flights_fk_origin \n    FOREIGN KEY (origin) \n    REFERENCES airports(faa) \n    ON DELETE SET NULL \n    ON UPDATE CASCADE;\nALTER TABLE flights ADD \n    CONSTRAINT flights_fk_planes \n    FOREIGN KEY (tailnum) \n    REFERENCES planes(tailnum) \n    ON DELETE SET NULL \n    ON UPDATE CASCADE;\n\n\n\nDans le schéma nycflights, on a aussi les dépendances fonctionnelles suivantes:\nTable airports\n\nfaa, name, et (lon, lat) sont des clés.\n\nTable airlines\n\ncarrier et name sont des clés\n\nTable weather\n\norigin, time_hour est une clé\ntime_hour → year, month, day, hour\nyear, month, day, hour  → time_hour\n\nTable planes\n\ntailnum est une clé\nmodel → manufacturer, engines, engine, type\n\nTable flights\n\ntailnum, time_hour → carrier\ntime_hour → sched_dep_time\nsched_dep_time, dep_time → dep_delay\nsched_arr_time, arr_time → arr_delay\norigin, dest, dep_time, arr_time → airtime\ntime_hour → year, month, day, hour, minute\nyear, month, day, hour, minute → time_hour\norigin, dest → distance\n(tailnum, origin, time_hour) est une clé\n(flight, dest, origin, year, month, day) est une clé\n\n\n\n\n\n\n\n\n\nExercice : Modélisation\n\n\n\n\nLe schéma entité-association est une tentative de rétro-ingénieurie du schéma relationnel nycflights.\n\n\n\n\n\n\n\n\n\n\n\n\n\nQuestion\n\n\n\nProposez une variation de la représentation de l’entité plane où on définit une entité model (dont les instances seraient par exemple Airbus A350, Boeing 777, …), et où chaque avion/aéronef serait considéré comme une réalisation d’une instance de model).\nPréciser la nature de l’association entre plane et model et les cardinalités.\nPrécisez la répartition des attributs entre plane et model.\n\n\n\n\n\n\n\n\n\n\nExercice : Normalisation\n\n\n\n\n\n\n\n\n\n\n\n\nQuestion 1\n\n\n\nPour chaque table, préciser si elle est en FNBC ou non.\n\n\n\n\n\n\n\n\nQuestion 2\n\n\n\nSi certaines tables ne sont pas en FNBC, proposer une décomposition en FNBC sans perte d’information.\n\n\n\n\n\n\n\n\n\nExercice : Requêtes (schéma nycflights)\n\n\n\n\n\n\n\n\n\n\n\n\nRequête 1\n\n\n\n\n\nFor each airport of departure (denoted by origin), for each day of the year, list the codes (carrier) of the airlines that have one or more planes taking off from that airport on that day.\n\n\n\n\n\n\n\n\nRequête 2\n\n\n\n\n\n\nLister pour chaque aéroport d’origine, chaque jour de l’année, pour chaque compagnie aérienne, le nombre d’avions exploités par la compagnie aérienne qui décollent de cet aéroport, ce jour là.\n\n\n\n\n\n\n\n\nRequête 3\n\n\n\n\nLister pour chaque vol exploité par la compagnie (carrier nommé dans airlines) Delta Air Lines Inc. : les conditions météorologiques (weather) à l’heure prévue du décollage (sched_dep_time).\n\n\n\n\n\n\n\n\nRequête 4\n\n\n\n\n\nNombre de vols au décollage par aéoroport d’origine et par compagnie aérienne (carrier).\n\n\n\n\n\n\n\n\nRequête 5\n\n\n\n\n\nLister les caractéristiques des avions (planes) exploités par au moins deux compagnies aériennes (carrier) différentes dans la base de données.\n\n\n\n\n\n\n\n\nRequête 6\n\n\n\n\n\nLister pour chaque jour et chaque aéoroport d’origine les dix avions les plus en retard au décollage (dep_delay). Ne pas prendre en compte les vols annulés (dep_time IS NULL).\n\n\n\n\n\n\n\n\nRequête 7\n\n\n\n\n\nLister pour chaque modèle d’avion (model) le nombre de jours où un avion de ce modèle a subi le plus grand retard au décollage (dep_delay) parmi les avions qui ont décollé ce jour là du même aéroport (origin).\n\n\n\n\n\n\n\n\nRequête 8\n\n\n\n\n\nLister les aéroports de destination (dest) qui sont desservis au moins une fois à partir de chaque aéroport de départ (origin).\n\n\n\n\n\n\n\n\nRequête 9\n\n\n\n\n\nLister les compagnies aériennes (carrier) pour lesquelles, chaque jour, au moins un avion figure parmi les 10 avions les plus en retard au décollage (dep_delay) de son aéroport de départ (origin).\n\n\n\n\n\n\n\n\nRequête 10\n\n\n\n\n\nPour chaque couple (origin, dest), lister les dix vols les plus rapides (airtime donne le temps de vol, distance la distance entre dest et origin).\n\n\n\n\n\n\n\n\nQuelques conseils\n\n\n\n\nPréférez les clauses WITH et les jointures aux requêtes imbriquées sauf si la requête imbriquée est très simple. C’est une question de lisibilité et donc souvent de correction.\nNe mélangez pas les fonctions fenêtres et les clauses GROUP BY ...\n\nSELECT ..., FOO() OVER w\nFROM R\nWINDOW w AS (PARTITION BY ... ORDER BY ...)\nGROUP BY ... ;  \nest tout simplement incorrect.\n\nLorsque vous effectuez un partitionnement par GROUP BY ..., la clause SELECT ... est sévèrement contrainte, vous n’y trouverez que\n\nles colonnes qui ont servi dans la clause GROUP BY ..., normalement elles devraient toutes y figurer\ndes fonctions d’aggrégation, comme COUNT(...), SUM(...), VAR(...)"
  },
  {
    "objectID": "cours-faq.html#how-can",
    "href": "cours-faq.html#how-can",
    "title": "FAQ",
    "section": "How can ?",
    "text": "How can ?",
    "crumbs": [
      "Course information",
      "FAQ"
    ]
  },
  {
    "objectID": "cours-faq.html#can-i-use-a-local-install-of-dbeaver-and-pgcli-instead-of-using-the-containers",
    "href": "cours-faq.html#can-i-use-a-local-install-of-dbeaver-and-pgcli-instead-of-using-the-containers",
    "title": "FAQ",
    "section": "Can I use a local install of dbeaver and pgcli instead of using the containers?",
    "text": "Can I use a local install of dbeaver and pgcli instead of using the containers?\nThe short answer is, I’d rather you didn’t, to save yourself some headache. But, the long answer is, sure! But you will need to install a specific versions of R and RStudio for everything to work as expected. You will also need to install the R packages we’re using as well as have Git installed on your computer. These are not extremely challenging things to get right, but they are not trivial either, particularly on certain operating systems. Myself and the TAs are always happy to provide help with any computational questions when you’re working in the containers we have provided for you. If you’re working on your local setup, we can’t guarantee being able to resolve your issues, though we’re happy to try.\nIf you want to take this path, here is what you need to do:\n\nDownload and install dbeaver\nDownload and install an ssh client\n\nAnd I’d like to reiterate again that successful installation of these software is not a learning goal of this course. So if any of this seems tedious or intimidating in any way, just use the computing environment we have set up for you. More on that here.",
    "crumbs": [
      "Course information",
      "FAQ"
    ]
  },
  {
    "objectID": "workshops/td4.html",
    "href": "workshops/td4.html",
    "title": "Fonctions d’agrégation",
    "section": "",
    "text": "Documentation Postgres\nDocumentation Postgres en Français"
  },
  {
    "objectID": "workshops/td4.html#count",
    "href": "workshops/td4.html#count",
    "title": "Fonctions d’agrégation",
    "section": "Count",
    "text": "Count\nPour compter les pays en Europe, on écrira :\nSELECT COUNT(countrycode)\nFROM world.country\nWHERE continent='Europe';\nCette requête renvoie une table ayant une ligne et une colonne contenant le nombre de lignes dans le résultat de la requête."
  },
  {
    "objectID": "workshops/td4.html#sum-max-min-avg",
    "href": "workshops/td4.html#sum-max-min-avg",
    "title": "Fonctions d’agrégation",
    "section": "Sum, Max, Min, Avg",
    "text": "Sum, Max, Min, Avg\nUne autre fonction importante est la fonction SUM(col) qui effectue la somme des valeurs (numériques) d’une colonne :\nSELECT SUM(population_country)\nFROM world.country;\nrenvoie la population mondiale.\nOn peut de même utiliser GROUP BY pour faire des paquets :\nSELECT continent, SUM(population_country)\nFROM world.country\nGROUP BY continent;\nrenvoie la population de chaque continent.\nOn peut même faire des opérations sur la colonne à l’intérieur de SUM. Par exemple: SUM(percentage/100).\n\nÉcrire une requête qui renvoie le nombre de langues officielles par pays"
  },
  {
    "objectID": "workshops/td9.html",
    "href": "workshops/td9.html",
    "title": "MA15Y030 - Automne 2024",
    "section": "",
    "text": "L3 MIASHS/Ingémath\nUniversité Paris Cité\nAnnée 2024-2025\nCourse Homepage\n\nMoodle\n\n\n\n\n\n\n\n\nDéfinitions\nUne dépendance fonctionnelle est une expression de la forme \\[A_1,A_2,\\ldots,A_k \\rightarrow A_{k+1},\\ldots,A_n\\] où \\(A_1,A_2,\\ldots,A_k, A_{k+1},\\ldots,A_n\\) sont des attributs (colonnes) d’une base de données.\nElle signifie que deux tuples ayant la même valeur sur \\(A_1,\\ldots,A_k\\) doivent avoir la même valeur sur chaque colonnes \\(A_{k+1},\\ldots, A_n\\) (en français : \\(A_1,\\ldots,A_k\\) déterminent \\(A_{k+1},\\ldots,A_n\\). On dit que les attributs \\(A_{k+1},\\ldots, A_n\\) dépendent fonctionnellement de \\(A_1,A_2,\\ldots,A_k\\).\nLa notion de dépendance est transitive : si \\(A \\rightarrow B\\) et \\(B \\rightarrow C\\) alors \\(A \\rightarrow C\\).\nUn ensemble de dépendances fonctionnelles \\(\\mathcal{F}\\) est 1 si aucune dépendance ne peut être déduite des autres en utilisant les règles suivantes :\n\ntrivialité : si \\(Y\\subseteq X\\) alors \\(X\\rightarrow Y\\)\naugmentation : si \\(X\\rightarrow Y\\) alors \\(X,Z\\rightarrow Y,Z\\) pour toute suite d’attributs \\(Z\\).\ntransitivité : si \\(X\\rightarrow Y\\) et \\(Y\\rightarrow Z\\) alors \\(X\\rightarrow Z\\)\nunion : si \\(X\\rightarrow Y\\) et \\(X\\rightarrow Z\\) alors \\(X\\rightarrow Y,Z\\)\ndécomposition/séparation si \\(X\\rightarrow Y\\) et \\(Z\\subseteq Y\\) alors \\(X\\rightarrow Z\\)\n\nLa clôture transitive des attributs \\(A_1,\\ldots, A_k\\) pour un ensemble de dépendances fonctionnelles \\(\\mathcal F\\) est l’ensemble des attributs \\(B_1,\\ldots, B_{\\ell}\\) qui dépendent fonctionnellement de \\(A_1,\\ldots, A_k\\).\nOn la note \\[[A_1,\\ldots, A_k]^+_{\\mathcal{F}}\\] en oubliant \\(\\mathcal{F}\\) si le contexte est clair.\nUn ensemble d’attributs \\(A_1,\\ldots, A_k\\) est une super-clé pour une relation \\(R(B_1,\\ldots, B_{\\ell})\\) si ce sont des attributs de \\(R\\) et si sa clôture transitive contient \\(B_1,\\ldots, B_{\\ell}\\). C’est une clé si elle est minimale, c’est-à-dire, aucun sous-ensemble strict de cette super-clé n’est une clé.\nUn schéma est en :\n\n\\(\\text{FN}_1\\) si tout attribut est atomique.\n\\(\\text{FN}_2\\) si un attribut ne fait pas partie d’une clef, il ne peut pas dépendre d’une partie stricte d’une clef.\n\\(\\text{FN}_3\\) Pour toute dépendance fonctionnelle non triviale, le membre de gauche contient une clef ou tout attribut du membre de droit appartient à une clef.\n\nUn schéma et un ensemble de dépendances fonctionnelles peut se décomposer en une collection de schémas, dans le sens où chaque relation \\(R\\) peut se décomposer en \\(R_1,\\ldots, R_k\\) tels que \\(R_i = \\pi_i(R)\\) pour une certaine projection \\(\\pi_i\\).\nOn dit cette décomposition si toute relation \\(R\\) du schéma d’origine peut être retrouvée à partir des relations \\(R_1,\\ldots, R_k\\) : \\(R = \\pi_1(R) \\bowtie \\ldots \\bowtie \\pi_k(R)\\).\nOn dit que cette décomposition respecte les dépendances fonctionnelles si celles-ci sont toujours satisfaites par la nouvelle décomposition.\n\n\nExercice\nSoit une relation concernant des personnes en France avec les attributs suivants~:\\ Nom, Numéro de sécurité sociale, Commune, Département, Code postal, Numéro de téléphone\nQuelles sont les dépendances fonctionnelles censées être satisfaites~?\n\n\nExercice\nSoit un schéma d’attributs \\(A_1, A_2,\\dots A_n\\) et un ensemble de dépendances fonctionnelles. Calculer le nombre de super-clefs (en fonction de \\(n\\)) dans les cas suivants~:\n\nLa seule clef est \\(\\{A_1\\}\\).\nLes seules clefs sont \\(\\{A_1\\}\\) et \\(\\{A_2\\}\\).\nLes seules clefs sont \\(\\{A_1,A_2\\}\\) et \\(\\{A_3,A_4\\}\\).\nLes seules clefs sont \\(\\{A_1,A_2\\}\\) et \\(\\{A_1,A_3\\}\\).\n\n\n\nExercice\nSoit le schéma \\(\\mathcal{A}=\\{A,B,C,D\\}\\) et l’ensemble de dépendances fonctionnelles \\[\\Sigma = \\{ A \\longrightarrow B, B \\longrightarrow C\\} \\]\n\nQuelle est la fermeture \\(\\{A\\}^+\\) de \\(\\{A\\}\\) ?\n\n\nQuelles sont les super-clés ? Les clés ?\n\n\n\nExercice\nSoit le schéma \\(\\mathcal{A}=\\{A,B,C,D,E,F\\}\\) et l’ensemble de dépendances fonctionnelles \\[\\Sigma = \\Bigl\\{ \\{A,B\\}\\to C, \\{B,C\\}\\to \\{A,D\\}, D\\to E, \\{C,F\\}\\to B \\Bigr\\}\\]\n\nCalculer la fermeture \\(\\{A,B\\}^+\\) de \\(\\{A,B\\}\\).\nEst-ce que \\(\\Sigma\\) implique la dépendance fonctionnelle \\(\\{A,B\\}\\to D\\)~?\nEst-ce que \\(\\Sigma\\) implique la dépendance fonctionnelle \\(D\\to A\\)~?\n\n\n\nExercice\nMontrer que les assertions suivantes sont fausses~:\n\n\\(A\\to B\\) implique \\(B\\to A\\).\nSi \\(\\{A,B\\}\\to C\\) et \\(A\\to C\\) alors \\(B\\to C\\).\nSi \\(\\{A,B\\}\\to C\\) alors \\(A\\to C\\) ou \\(B\\to C\\).\n\n\n\nExercice\n\nSoit le schéma \\(\\mathcal{A}=\\{A, B,C, D, E, F, G, H\\}\\) et soit \\[\\Sigma = \\{AB \\longrightarrow C; \\ B \\longrightarrow D;  \\ CD \\longrightarrow E;  \\ CE \\longrightarrow GH; \\  G \\longrightarrow A\\} \\] Est-ce que les dépendances\n\\(A,B \\longrightarrow E\\)\n\\(B,G \\longrightarrow C\\)\n\\(A,B \\longrightarrow G\\)\n\nsont déductibles de \\(\\Sigma\\)~?\n\n\n\n\nSoit \\[\\Sigma_1 = \\{A \\longrightarrow B ; C,E \\longrightarrow H ; C \\longrightarrow E ; A \\longrightarrow C,H\\}\\] et \\[\\Sigma_2 = \\{A \\longrightarrow B,C ;  C \\longrightarrow E,H\\}\\] Les deux ensembles de dépendances fonctionnelles \\(\\Sigma_1\\) et \\(\\Sigma_2\\) sont-ils équivalents ?\n\n\n\nExercice : Décomposition et perte d’information\n\nOn considère le schéma de relation \\(\\mathcal{A}=\\{A,B,C\\}\\) et la dépendance fonctionnelle suivante:\n\n\\[\\Sigma=\\{  A,B \\longrightarrow C   \\}.\\]\nDéterminer si la décomposition suivante est sans perte d’information\n\\[\\mathcal{A}_1=\\{A,B\\} , \\quad \\mathcal{A}_2=\\{B,C\\}\\]\nen étudiant le cas de la table suivante :\n\n\n\n\n\nA\nB\nC\n\n\n\n\n1\n2\n3\n\n\n4\n2\n5\n\n\n\n\n\nOn considère le schéma de relation \\(\\mathcal{A}=\\{A,B,C,D,E\\}\\) et les dépendances fonctionnelles suivantes:\n\n\\[\\Sigma=\\{  A \\longrightarrow C ; B \\longrightarrow C ; C \\longrightarrow D ; D,E \\longrightarrow C ; C,E \\longrightarrow A    \\}.\\]\nAppliquer l’algorithme de poursuite pour déterminer si la décomposition suivante est sans perte d’information :\n\\[ \\mathcal{A}_1=\\{A,D\\} , \\mathcal{A}_2=\\{A,B\\}    , \\mathcal{A}_3=\\{B,E\\} , \\mathcal{A}_4=\\{C,D,E\\}, \\mathcal{A}_5=\\{A,E\\} \\]\nMême question pour la décomposition: \\[ \\mathcal{A}_1=\\{A,D\\}, \\mathcal{A}_2=\\{A,B\\}, \\mathcal{A}_3=\\{B,E\\}, \\mathcal{A}_4=\\{C,D\\}, \\mathcal{A}_5=\\{D,E\\}, \\mathcal{A}_6=\\{A,E\\} \\]\n\n\nExercice\nSoit \\(\\mathcal{A}=\\{A,B,C,D,E\\}\\) un schéma et soit la décomposition \\(\\{\\mathcal{A}_1,\\mathcal{A}_2,\\mathcal{A}_3\\}\\) où \\[\\mathcal{A}_1=\\{A,B,C\\}\\quad \\mathcal{A}_2=\\{B,C,D\\}\\quad \\mathcal{A}_3=\\{A,C,E\\}\\] Pour chaque ensemble \\(\\Sigma\\) de dépendances fonctionnelles ci-dessous, appliquer l’algorithme de poursuite pour déterminer si la décomposition est sans perte d’information. Dans le cas où il y a perte d’information, donner une relation \\(R\\) de schéma \\(\\mathcal{A}\\) satisfaisant \\(\\Sigma\\) et telle que \\[ \\pi_{\\mathcal{A}_1}(R)\\bowtie\\pi_{\\mathcal{A}_2}(R)\\bowtie\\pi_{\\mathcal{A}_3}(R)\\not\\subset R\\]\n\n\\(\\Sigma=\\{B\\rightarrow E, CE\\rightarrow A\\}\\)\n\\(\\Sigma=\\{AC\\rightarrow E, BC\\to D\\}\\)\n\\(\\Sigma=\\{A\\rightarrow D, D\\to E, B\\to D\\}\\)\n\\(\\Sigma=\\{A\\rightarrow D, CD\\to E, E\\to D\\}\\)\n\n\n\nExercice : Normalisation\nOn considère le schéma de relation R(C,T,H,S,E,N) :\nR(Cours, Enseignant, Horaire, Salle, Étudiant, Note)\net les dépendances fonctionnelles suivantes:\n\\[\\mathcal{F}=\\{  \\texttt{C} \\to \\texttt{T}; \\quad \\texttt{H,S} \\to \\texttt{C}; \\quad \\texttt{H,T} \\to \\texttt{S}; \\quad \\texttt{C,E} \\to \\texttt{N}; \\quad \\texttt{H,E} \\to S \\}. \\]\n\nCalculer une clé.\n\n\nMettre en Boyce-Codd Normal Form (BCNF), donner plusieurs résultats possibles."
  },
  {
    "objectID": "workshops/nycflights-schema.html",
    "href": "workshops/nycflights-schema.html",
    "title": "MA15Y030 - Automne 2024",
    "section": "",
    "text": "&lt;!–"
  },
  {
    "objectID": "workshops/td-recap-sql.html#schéma-world",
    "href": "workshops/td-recap-sql.html#schéma-world",
    "title": "Recapitulatif SQL",
    "section": "Schéma world",
    "text": "Schéma world\n\n\n\n\n\n\nQuestion\n\n\n\nQuel est le pays qui a le plus de villes recensées dans la table world.city? Combien de villes ? (363 villes)\n\n\n\n\n\n\n\n\nQuestion\n\n\n\nQuels sont les pays qui ont \\(3\\) ou plus langues officielles ? (8 lignes)\n\n\n\n\n\n\n\n\nQuestion\n\n\n\nQuels sont les pays dont plus de \\(1.000.000\\) d’habitants parlent une langue non officielle ? (72 lignes)\n\n\n\n\n\n\n\n\nQuestion\n\n\n\nQuelles sont les langues qui sont officielles dans tous les continents où au moins une langue est parlée ? (1 ligne)\n\n\n\n\n\n\n\n\nQuestion\n\n\n\nQuels sont les pays pour lesquels une langue non officielle est parlée par strictement plus de monde (dans le pays) qu’il n’y a d’habitants dans la capitale ? (118 lignes)\n\n\n\n\n\n\n\n\nQuestion\n\n\n\nQuels est le nombre de villes par region ?"
  },
  {
    "objectID": "workshops/td-recap-sql.html#schéma-pagila",
    "href": "workshops/td-recap-sql.html#schéma-pagila",
    "title": "Recapitulatif SQL",
    "section": "Schéma pagila",
    "text": "Schéma pagila\n\n\n\n\n\n\nQuestion\n\n\n\nQuel est l’acteur (actor_id) présent sur le plus de DVD (inventory_id) ?\n\n\n\n\n\n\n\n\nQuestion\n\n\n\nQuel est le prix moyen d’une location de DVD ?\n\n\n\n\n\n\n\n\nQuestion\n\n\n\nQuel est le DVD qui a rapporté le plus d’argent ? Le film (film_id)?\n\n\n\n\n\n\n\n\nQuestion\n\n\n\nQuels sont les employés (staff_id) qui travaillent dans une autre ville que celle dans laquelle ils vivent ? (4 lignes)"
  },
  {
    "objectID": "cours-syllabus.html",
    "href": "cours-syllabus.html",
    "title": "Syllabus",
    "section": "",
    "text": "Télécharger pour télécharger une version PDF du syllabus.",
    "crumbs": [
      "Course information",
      "Syllabus"
    ]
  },
  {
    "objectID": "cours-syllabus.html#organisation",
    "href": "cours-syllabus.html#organisation",
    "title": "Syllabus",
    "section": "Organisation",
    "text": "Organisation\n\n\n\n\n\n\n\n\n\n\nJour\nHoraire\nLieu\n\n\n\n\nCours\nVendredi\n13:15 - 14:45\nOlympe de Gouges Amphi I\n\n\nTD/TP 1\nVendredi\n15:15 - 17:45\nSophie Germain 2004\n\n\nTD/TP 2\nVendredi\n15:15 - 17:45\nSophie Germain 2005\n\n\nTD/TP 3\nVendredi\n15:15 - 17:45\nSophie Germain 2006",
    "crumbs": [
      "Course information",
      "Syllabus"
    ]
  },
  {
    "objectID": "cours-syllabus.html#objectifs",
    "href": "cours-syllabus.html#objectifs",
    "title": "Syllabus",
    "section": "Objectifs",
    "text": "Objectifs\nAprès avoir suivi ce cours, vous serez capable de …\n\n…\n…",
    "crumbs": [
      "Course information",
      "Syllabus"
    ]
  },
  {
    "objectID": "cours-syllabus.html#community",
    "href": "cours-syllabus.html#community",
    "title": "Syllabus",
    "section": "Community",
    "text": "Community\n\nCharte Université Paris Cité\n\n\n\nÉgalité, diversité, …\n\n\nAccessibilité\nIf there is any portion of the course that is not accessible to you due to challenges with technology or the course format, please let me know so we can make appropriate accommodations.\nRelais Handicap\n\n\nCommunication\nAll lecture notes, assignment instructions, an up-to-date schedule, and other course materials may be found on the course website at s-v-b.github.io/MA15Y030.\nLes annonces sont diffusées via courriel/Moodle. Inscrivez-vous … If an announcement is sent Monday through Thursday, I will assume that you have read the announcement by the next day. If an announcement is sent on a Friday or over the weekend, I will assume that you have read it by Monday.\n\n\nAide\n\nIf you have a question during lecture or lab, feel free to ask it! There are likely other students with the same question, so by asking you will create a learning opportunity for everyone.\nThe teaching team is here to help you be successful in the course. You are encouraged to attend office hours to ask questions about the course content and assignments. Many questions are most effectively answered as you discuss them with others, so office hours are a valuable resource. Please use them!\nOutside of class and office hours, any general questions about course content or assignments should be posted on the course forum Conversations. There is a chance another student has already asked a similar question, so please check the other posts in Conversations before adding a new question. If you know the answer to a question posted in the discussion forum, I encourage you to respond!\nEmails should be reserved for questions not appropriate for the public forum. If you email me, please include “STA 210” in the subject line. Barring extenuating circumstances, I will respond to STA 210 emails within 48 hours Monday - Friday. Response time may be slower for emails sent Friday evening - Sunday.\n\nCheck out the Support page for more resources.",
    "crumbs": [
      "Course information",
      "Syllabus"
    ]
  },
  {
    "objectID": "cours-syllabus.html#lectures",
    "href": "cours-syllabus.html#lectures",
    "title": "Syllabus",
    "section": "Lectures",
    "text": "Lectures\nWhile there is no official textbook for the course, we will be assigning readings from the following textbooks.\n\nR for Data Science by Garret Grolemund and Hadley Wickham",
    "crumbs": [
      "Course information",
      "Syllabus"
    ]
  },
  {
    "objectID": "cours-syllabus.html#cours-magistraux-et-travaux-dirigés",
    "href": "cours-syllabus.html#cours-magistraux-et-travaux-dirigés",
    "title": "Syllabus",
    "section": "Cours magistraux et Travaux dirigés",
    "text": "Cours magistraux et Travaux dirigés\nThe goal of both the lectures and the labs is for them to be as interactive as possible. My role as instructor is to introduce you new tools and techniques, but it is up to you to take them and make use of them. A lot of what you do in this course will involve writing code, and coding is a skill that is best learned by doing. Therefore, as much as possible, you will be working on a variety of tasks and activities throughout each lecture and lab. You are expected to attend all lecture and lab sessions and meaningfully contribute to in-class exercises and discussion. Additionally, some lectures will feature [application exercises] that will be graded. In addition to application exercises will be periodic activities help build a learning community. These will be short, fun activities that will help everyone in the class connect throughout the semester.\nYou are expected to bring a laptop to each class so that you can take part in the in-class exercises. Please make sure your laptop is fully charged before you come to class as the number of outlets in the classroom will not be sufficient to accommodate everyone. More information on loaner laptops can be found here.",
    "crumbs": [
      "Course information",
      "Syllabus"
    ]
  },
  {
    "objectID": "cours-syllabus.html#contrôle-des-connaissances",
    "href": "cours-syllabus.html#contrôle-des-connaissances",
    "title": "Syllabus",
    "section": "Contrôle des connaissances",
    "text": "Contrôle des connaissances\nAssessment for the course is comprised of six components: application exercises, homework assignments, labs, exams, projects, and teamwork.\n\nExercises\nParts of some lectures will be dedicated to working on Application Exercises (AEs).\n\n\nContrôle continu\nTrois épreuves sur table :\n\n\\(\\textsf{CC}_1\\) (1 heure)\n\\(\\textsf{CC}_2\\) (1 heure)\n\\(\\textsf{CC}_3\\) (1 heure)\n\n\n\nExamen\n\\(\\textsf{CT}\\) (2 heures)",
    "crumbs": [
      "Course information",
      "Syllabus"
    ]
  },
  {
    "objectID": "cours-syllabus.html#notation",
    "href": "cours-syllabus.html#notation",
    "title": "Syllabus",
    "section": "Notation",
    "text": "Notation\nLa note finale de session I est calculée selon la formule :\n\\[\\frac{1}{6}\\left\\{\\max( \\textsf{CC}_1,\\textsf{CT}) + \\max(\\textsf{CC}_2,\\textsf{CT}) + \\max(\\textsf{CC}_3,\\textsf{CT}) \\right\\} + \\frac{1}{2} \\textsf{CT}\\]\nLa note de session II (seconde chance) est égale à la note obtenue à l’épreuve sur table de seconde chance.",
    "crumbs": [
      "Course information",
      "Syllabus"
    ]
  },
  {
    "objectID": "cours-syllabus.html#trucs",
    "href": "cours-syllabus.html#trucs",
    "title": "Syllabus",
    "section": "Trucs",
    "text": "Trucs\nYour success on this course depends very much on you and the effort you put into it. The course has been organized so that the burden of learning is on you. Your TAs and I will help you be providing you with materials and answering questions and setting a pace, but for this to work you must do the following:\n\nComplete all the preparation work before class.\nAsk questions. As often as you can. In class, out of class. Ask me, ask the TAs, ask your friends, ask the person sitting next to you. This will help you more than anything else. If you get a question wrong on an assessment, ask us why. If you’re not sure about the homework, ask. If you hear something on the news that sounds related to what we discussed, ask. If the reading is confusing, ask.\nDo the readings.\nDo the homework and lab.The earlier you start, the better. It’s not enough to just mechanically plow through the exercises. You should ask yourself how these exercises relate to earlier material, and imagine how they might be changed (to make questions for an exam, for example.)\nDon’t procrastinate. If something is confusing to you in Week 2, Week 3 will become more confusing, Week 4 even worse, and eventually you won’t know where to begin asking questions. Don’t let the week end with unanswered questions. But if you find yourself falling behind and not knowing where to begin asking, come to office hours, and let me help you identify a good (re)starting point.",
    "crumbs": [
      "Course information",
      "Syllabus"
    ]
  },
  {
    "objectID": "cours-syllabus.html#course-policies",
    "href": "cours-syllabus.html#course-policies",
    "title": "Syllabus",
    "section": "Course policies",
    "text": "Course policies\n\nIntégrité universitaire\nTL;DR: Pas de triche!\nAll students must adhere to the Duke Community Standard (DCS): Duke University is a community dedicated to scholarship, leadership, and service and to the principles of honesty, fairness, and accountability. Citizens of this community commit to reflect upon these principles in all academic and non-academic endeavors, and to protect and promote a culture of integrity.\nTo uphold the Duke Community Standard:\nStudents affirm their commitment to uphold the values of the Duke University community by signing a pledge that states:\n\nI will not lie, cheat, or steal in my academic endeavors;\nI will conduct myself honorably in all my endeavors;\nI will act if the Standard is compromised\n\nRegardless of course delivery format, it is your responsibility to understand and follow Duke policies regarding academic integrity, including doing one’s own work, following proper citation of sources, and adhering to guidance around group work projects. Ignoring these requirements is a violation of the Duke Community Standard. If you have any questions about how to follow these requirements, please contact Jeanna McCullers (jeanna.mccullers@duke.edu), Director of the Office of Student Conduct.\n\n\nPartage et usage du code\n\n\nJustification d’absence\n\n\nConsultation des copies\n\n\nAssiduité",
    "crumbs": [
      "Course information",
      "Syllabus"
    ]
  },
  {
    "objectID": "cours-syllabus.html#sauvez-les-dates",
    "href": "cours-syllabus.html#sauvez-les-dates",
    "title": "Syllabus",
    "section": "Sauvez les dates !",
    "text": "Sauvez les dates !\n\nSeptembre 13: Début du cours\nSeptembre 13: Début des TD/TP\nOctobre 25: Contrôle continu I\nOctobre 26-Novembre 3: Pause de la Toussaint\nNovembre 8 : Reprise des cours et TD\nNovembre 15: Contrôle continu II\nDécembre 6: Fin du cours\nDécembre 6: Contrôle continu III\nJanvier ??: Contrôle terminal\nJuin ??: Deuxième chance\n\nCliquer ici pour le calendrier universitaire de Université Paris Cité.\nCliquer ici pour l’emploi du temps de la Licence MIASHS",
    "crumbs": [
      "Course information",
      "Syllabus"
    ]
  },
  {
    "objectID": "weeks/week-2.html",
    "href": "weeks/week-2.html",
    "title": "Semaine 1",
    "section": "",
    "text": "Important\n\n\n\n\nCours magistral en Amphi 1 Olympe de Gouges\nTD/TP 2004-2006 Étage 2 Sophie Germain"
  },
  {
    "objectID": "weeks/week-2.html#préparer",
    "href": "weeks/week-2.html#préparer",
    "title": "Semaine 1",
    "section": "Préparer",
    "text": "Préparer\nFinir requêtes du TD 1 TD 1"
  },
  {
    "objectID": "weeks/week-2.html#cours-magistral-diapositives",
    "href": "weeks/week-2.html#cours-magistral-diapositives",
    "title": "Semaine 1",
    "section": "Cours magistral : diapositives",
    "text": "Cours magistral : diapositives\nIntroduction à l’algèbre relationnelle\nSQL requêtes élémentaires"
  },
  {
    "objectID": "weeks/week-2.html#exercices-td-2",
    "href": "weeks/week-2.html#exercices-td-2",
    "title": "Semaine 1",
    "section": "Exercices : TD 2",
    "text": "Exercices : TD 2\nhtml pdf"
  },
  {
    "objectID": "weeks/week-2.html#solutions-du-td-1-semaine-1",
    "href": "weeks/week-2.html#solutions-du-td-1-semaine-1",
    "title": "Semaine 1",
    "section": "Solutions du TD 1 (Semaine 1)",
    "text": "Solutions du TD 1 (Semaine 1)\nhtml pdf"
  },
  {
    "objectID": "weeks/week-2.html#travail-personnel",
    "href": "weeks/week-2.html#travail-personnel",
    "title": "Semaine 1",
    "section": "Travail personnel",
    "text": "Travail personnel\nCC 1 2023-24\n\n\nretour à Agenda ⏎"
  }
]