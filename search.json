[
  {
    "objectID": "workshops/td9.html",
    "href": "workshops/td9.html",
    "title": "TD 9: Normalisation et dépendances",
    "section": "",
    "text": "L3 MIASHS/Ingémath\n\n\nUniversité Paris Cité\n\n\nAnnée 2025\n\n\nCourse Homepage\n\n\nMoodle\n\n\n\n\n\n\n\n\n\n\nDéfinitions\nUne dépendance fonctionnelle est une expression de la forme \\[A_1,A_2,\\ldots,A_k \\rightarrow A_{k+1},\\ldots,A_n\\] où \\(A_1,A_2,\\ldots,A_k, A_{k+1},\\ldots,A_n\\) sont des attributs (colonnes) d’une base de données.\nElle signifie que deux tuples ayant la même valeur sur \\(A_1,\\ldots,A_k\\) doivent avoir la même valeur sur chaque colonnes \\(A_{k+1},\\ldots, A_n\\) (en français : \\(A_1,\\ldots,A_k\\) déterminent \\(A_{k+1},\\ldots,A_n\\). On dit que les attributs \\(A_{k+1},\\ldots, A_n\\) dépendent fonctionnellement de \\(A_1,A_2,\\ldots,A_k\\).\nLa notion de dépendance est transitive : si \\(A \\rightarrow B\\) et \\(B \\rightarrow C\\) alors \\(A \\rightarrow C\\).\nUn ensemble de dépendances fonctionnelles \\(\\mathcal{F}\\) est irréductible si aucune dépendance ne peut être déduite des autres en utilisant les règles suivantes :\n\ntrivialité : si \\(Y\\subseteq X\\) alors \\(X\\rightarrow Y\\)\naugmentation : si \\(X\\rightarrow Y\\) alors \\(X,Z\\rightarrow Y,Z\\) pour toute suite d’attributs \\(Z\\).\ntransitivité : si \\(X\\rightarrow Y\\) et \\(Y\\rightarrow Z\\) alors \\(X\\rightarrow Z\\)\nunion : si \\(X\\rightarrow Y\\) et \\(X\\rightarrow Z\\) alors \\(X\\rightarrow Y,Z\\)\ndécomposition/séparation si \\(X\\rightarrow Y\\) et \\(Z\\subseteq Y\\) alors \\(X\\rightarrow Z\\)\n\nLa clôture transitive des attributs \\(A_1,\\ldots, A_k\\) pour un ensemble de dépendances fonctionnelles \\(\\mathcal F\\) est l’ensemble des attributs \\(B_1,\\ldots, B_{\\ell}\\) qui dépendent fonctionnellement de \\(A_1,\\ldots, A_k\\).\nOn la note \\[[A_1,\\ldots, A_k]^+_{\\mathcal{F}}\\] en oubliant \\(\\mathcal{F}\\) si le contexte est clair.\nUn ensemble d’attributs \\(A_1,\\ldots, A_k\\) est une super-clé pour une relation \\(R(B_1,\\ldots, B_{\\ell})\\) si ce sont des attributs de \\(R\\) et si sa clôture transitive contient \\(B_1,\\ldots, B_{\\ell}\\). C’est une clé si elle est minimale, c’est-à-dire, aucun sous-ensemble strict de cette super-clé n’est une clé.\nUn schéma est en :\n\n\\(\\text{FN}_3\\) si pour toute dépendance fonctionnelle non triviale, le membre de gauche contient une clef ou tout attribut du membre de droit appartient à une clef.\nFNBC si pour toute dépendance fonctionnelle non triviale, le membre de gauche contient une clef.\n\nUn schéma et un ensemble de dépendances fonctionnelles peut se décomposer en une collection de schémas, dans le sens où chaque relation \\(R\\) peut se décomposer en \\(R_1,\\ldots, R_k\\) tels que \\(R_i = \\pi_i(R)\\) pour une certaine projection \\(\\pi_i\\).\nOn dit cette décomposition sans perte d’information si toute relation \\(R\\) du schéma d’origine peut être retrouvée à partir des relations \\(R_1,\\ldots, R_k\\) : \\(R = \\pi_1(R) \\bowtie \\ldots \\bowtie \\pi_k(R)\\).\nOn dit que cette décomposition respecte les dépendances fonctionnelles si celles-ci sont toujours satisfaites par la nouvelle décomposition.\n\n\nExercice\nSoit une relation concernant des personnes en France avec les attributs suivants~:\nNom, Numéro de sécurité sociale, Commune, Département, Code postal, Numéro de téléphone\nQuelles sont les dépendances fonctionnelles censées être satisfaites ?\n\n\nExercice\nSoit un schéma d’attributs \\(A_1, A_2,\\dots A_n\\) et un ensemble de dépendances fonctionnelles. Calculer le nombre de super-clefs (en fonction de \\(n\\)) dans les cas suivants~:\n\nLa seule clef est \\(\\{A_1\\}\\).\nLes seules clefs sont \\(\\{A_1\\}\\) et \\(\\{A_2\\}\\).\nLes seules clefs sont \\(\\{A_1,A_2\\}\\) et \\(\\{A_3,A_4\\}\\).\nLes seules clefs sont \\(\\{A_1,A_2\\}\\) et \\(\\{A_1,A_3\\}\\).\n\n\n\nExercice\nSoit le schéma \\(\\mathcal{A}=\\{A,B,C,D\\}\\) et l’ensemble de dépendances fonctionnelles \\[\\Sigma = \\{ A ⟶ B, B ⟶ C\\} \\]\n\nQuelle est la fermeture \\(\\{A\\}^+\\) de \\(\\{A\\}\\) ?\n\n\nQuelles sont les super-clés ? Les clés ?\n\n\n\nExercice\nSoit le schéma \\(\\mathcal{A}=\\{A,B,C,D,E,F\\}\\) et l’ensemble de dépendances fonctionnelles \\[\\Sigma = \\Bigl\\{ \\{A,B\\}\\to C, \\{B,C\\}\\to \\{A,D\\}, D\\to E, \\{C,F\\}\\to B \\Bigr\\}\\]\n\nCalculer la fermeture \\(\\{A,B\\}^+\\) de \\(\\{A,B\\}\\).\nEst-ce que \\(\\Sigma\\) implique la dépendance fonctionnelle \\(\\{A,B\\}\\to D\\)~?\nEst-ce que \\(\\Sigma\\) implique la dépendance fonctionnelle \\(D\\to A\\)~?\n\n\n\nExercice\nMontrer que les assertions suivantes sont fausses :\n\n\\(A\\to B\\) implique \\(B\\to A\\).\nSi \\(\\{A,B\\}\\to C\\) et \\(A\\to C\\) alors \\(B\\to C\\).\nSi \\(\\{A,B\\}\\to C\\) alors \\(A\\to C\\) ou \\(B\\to C\\).\n\n\n\nExercice : déductions de DF\nSoit le schéma \\(\\mathcal{A}=\\{A, B,C, D, E, F, G, H\\}\\) et soit\n\\[\\Sigma = \\{AB \\longrightarrow C; \\ B \\longrightarrow D;  \\ CD \\longrightarrow E;  \\ CE \\longrightarrow GH; \\  G \\longrightarrow A\\}\\]\nEst-ce que les dépendances\n\n\\(A,B \\longrightarrow E\\)\n\\(B,G \\longrightarrow C\\)\n\\(A,B \\longrightarrow G\\)\n\nsont déductibles de \\(\\Sigma\\) ?\n\\(\\Sigma\\) est elle irréductible/minimale ?\n\n\n\n\n\n\nTipRappel\n\n\n\nPour que \\(\\Sigma\\) soit minimale, il y a 3 conditions à remplir :\n\n\\(\\Sigma\\) est sous forme canonique, un seul attribut à droite.\nAucune DF redondante , i.e. aucune DF ne peut être déduite des autres.\nAucune DF redondante à gauch, .i.e. les déterminants sont minimaux\n\n\n\n\n\nExercice : équivalence d’ensembles de DFs\n\nSoit \\[\\Sigma_1 = \\{A ⟶ B ; C,E \\longrightarrow H ; C \\longrightarrow E ; A \\longrightarrow C,H\\}\\] et \\[\\Sigma_2 = \\{A \\longrightarrow B,C ;  C \\longrightarrow E,H\\}\\] Les deux ensembles de dépendances fonctionnelles \\(\\Sigma_1\\) et \\(\\Sigma_2\\) sont-ils équivalents ?\n\n\n\nExercice : Décomposition et perte d’information\n\nOn considère le schéma de relation \\(\\mathcal{A}={A,B,C}\\) et la dépendance fonctionnelle suivante:\n\n\\[\\Sigma=\\{  A,B \\longrightarrow C   \\}.\\]\nDéterminer si la décomposition suivante est sans perte d’information\n\\[\\mathcal{A}_1=\\{A,B\\} , \\quad \\mathcal{A}_2=\\{B,C\\}\\]\nen étudiant le cas de la table suivante :\n\n\n\n\nA\nB\nC\n\n\n\n\n1\n2\n3\n\n\n4\n2\n5\n\n\n\n\n\n\nExercice : poursuite\n\nOn considère le schéma de relation \\(\\mathcal{A}=\\{A,B,C,D,E\\}\\) et les dépendances fonctionnelles suivantes:\n\n\\[\\Sigma=\\{  A \\longrightarrow C ; B \\longrightarrow C ; C \\longrightarrow D ; D,E \\longrightarrow C ; C,E \\longrightarrow A    \\}.\\]\nAppliquer l’algorithme de poursuite pour déterminer si la décomposition suivante est sans perte d’information :\n\\[ \\mathcal{A}_1=\\{A,D\\} , \\mathcal{A}_2=\\{A,B\\}    , \\mathcal{A}_3=\\{B,E\\} , \\mathcal{A}_4=\\{C,D,E\\}, \\mathcal{A}_5=\\{A,E\\} \\]\nMême question pour la décomposition: \\[ \\mathcal{A}_1=\\{A,D\\}, \\mathcal{A}_2=\\{A,B\\}, \\mathcal{A}_3=\\{B,E\\}, \\mathcal{A}_4=\\{C,D\\}, \\mathcal{A}_5=\\{D,E\\}, \\mathcal{A}_6=\\{A,E\\} \\]\n\n\nExercice\nSoit \\(\\mathcal{A}=\\{A,B,C,D,E\\}\\) un schéma et soit la décomposition \\(\\{\\mathcal{A}_1,\\mathcal{A}_2,\\mathcal{A}_3\\}\\) où \\[\\mathcal{A}_1={A,B,C}\\quad \\mathcal{A}_2={B,C,D}\\quad \\mathcal{A}_3={A,C,E}\\] Pour chaque ensemble \\(\\Sigma\\) de dépendances fonctionnelles ci-dessous, appliquer l’algorithme de poursuite pour déterminer si la décomposition est sans perte d’information. Dans le cas où il y a perte d’information, donner une relation \\(R\\) de schéma \\(\\mathcal{A}\\) satisfaisant \\(\\Sigma\\) et telle que \\[ \\pi_{\\mathcal{A}_1}(R)\\bowtie\\pi_{\\mathcal{A}_2}(R)\\bowtie\\pi_{\\mathcal{A}_3}(R)\\not\\subset R\\]\n\n\\(\\Sigma=\\{B\\rightarrow E, CE\\rightarrow A\\}\\)\n\\(\\Sigma=\\{AC\\rightarrow E, BC\\to D\\}\\)\n\\(\\Sigma=\\{A\\rightarrow D, D\\to E, B\\to D\\}\\)\n\\(\\Sigma=\\{A\\rightarrow D, CD\\to E, E\\to D\\}\\)\n\n\n\nExercice : Normalisation\nOn considère le schéma de relation R(C,T,H,S,E,N) :\nR(Cours, Enseignant, Horaire, Salle, Étudiant, Note)\net les dépendances fonctionnelles suivantes:\n\\[\\mathcal{F}=\\{  \\texttt{C} \\to \\texttt{T}; \\quad \\texttt{H,S} \\to \\texttt{C}; \\quad \\texttt{H,T} \\to \\texttt{S}; \\quad \\texttt{C,E} \\to \\texttt{N}; \\quad \\texttt{H,E} \\to S \\}. \\]\n\nCalculer une clé.\n\n\nMettre en Boyce-Codd Normal Form (BCNF), donner plusieurs résultats possibles."
  },
  {
    "objectID": "workshops/td7.html",
    "href": "workshops/td7.html",
    "title": "TD 7 : Contraintes (suite)",
    "section": "",
    "text": "L3 MIASHS/Ingémath\n\n\nUniversité Paris Cité\n\n\nAnnée 2025\n\n\nCourse Homepage\n\n\nMoodle"
  },
  {
    "objectID": "workshops/td7.html#schéma-pagila",
    "href": "workshops/td7.html#schéma-pagila",
    "title": "TD 7 : Contraintes (suite)",
    "section": "Schéma pagila",
    "text": "Schéma pagila\n\n\n\n\n\n\nNoteQuestion\n\n\n\nImposer la contrainte suivante : un client ne peut emprunter plusieurs DVD simultanément.\n\n\n\n\n\n\n\n\nÉcrire d’abord une requête correspondant à la contrainte.\nLa requête est facile à écrire si on est prêt à utiliser le type tsrange, l’opérateur de recouvrement && (overlap).\nPostgresql documentation on range types\nDans l’instance du schéma pagila disponible sur le serveur etu-pgsql, la contrainte est-elle vérifiée ?\n\n\n\n\n\n\n\n\n\nNoteQuestion\n\n\n\nImposer la contrainte : un film est identifié par son titre, son année de sortie et sa langue originale.\n\n\n\n\n\n\n\n\nNoteQuestion\n\n\n\nImposer la contrainte : le prix de location doit être croissant en fonction de la durée du film\n\n\n\n\n\n\n\n\nNoteQuestion\n\n\n\nImposer la contrainte : un même DVD ne peut pas être loué simultanément à deux clients différents."
  },
  {
    "objectID": "workshops/td7.html#schéma-nycflights",
    "href": "workshops/td7.html#schéma-nycflights",
    "title": "TD 7 : Contraintes (suite)",
    "section": "Schéma nycflights",
    "text": "Schéma nycflights\n\n\n\n\n\n\nNoteQuestion\n\n\n\nDans flights et weather imposer les contraintes\nyear, month, day, hour ⟶ time_hour\ntime_hour  ⟶  year, month, day, hour\n\n\n\n\n\n\n\n\nNoteQuestion\n\n\n\nDans flights imposer la contrainte : un aéronef ne peut pas effectuer deux missions simultanément.\n\n\n\n\n\n\n\n\nNoteQuestion\n\n\n\nDans flights imposer la contrainte : un aéronef ne peut pas être exploité par deux compagnies différentes à la même date.\n\n\n\n\n\n\n\n\nNoteQuestion\n\n\n\nDans planes, imposer les contraintes model ⟶ manufacturer et model ⟶ type"
  },
  {
    "objectID": "workshops/td5.html",
    "href": "workshops/td5.html",
    "title": "TD 5: SQL",
    "section": "",
    "text": "L3 MIASHS/Ingémath\n\n\nUniversité Paris Cité\n\n\nAnnée 2025\n\n\nCourse Homepage\n\n\nMoodle"
  },
  {
    "objectID": "workshops/td5.html#over-partition-by",
    "href": "workshops/td5.html#over-partition-by",
    "title": "TD 5: SQL",
    "section": "OVER (PARTITION BY …)",
    "text": "OVER (PARTITION BY …)\nCette construction peut être combinée avec n’importe quelle fonction d’aggrégation.\nCette requête indique pour chaque ville, la “population moyenne” des villes de ce pays (cette moyenne n’a aucun sens).\nSELECT id, name_city, population_city, \n       avg(population_city) OVER (PARTITION BY countrycode)  AS avg_pop\nFROM world.city;  \nSans le mécanisme de fenêtrage, on pourrait obtenir le résultat au prix d’une jointure\n WITH tmp AS (\n  SELECT c.countrycode, AVG(c.population_city) AS avg_pop\n  FROM world.city c\n  GROUP BY c.countrycode\n ) \n  SELECT cc.id, cc.name_city, cc.population_city, tmp.avg_pop\n  FROM world.city cc NATURAL JOIN tmp;"
  },
  {
    "objectID": "workshops/td5.html#over-partition-by-order-by",
    "href": "workshops/td5.html#over-partition-by-order-by",
    "title": "TD 5: SQL",
    "section": "OVER (PARTITION BY … ORDER BY)",
    "text": "OVER (PARTITION BY … ORDER BY)\nOn peut partitioner et trier.\nCette construction est très pratique pour ranger les tuples d’un sous-groupe.\nDans world, si on veut ranger les langues parlées dans un pays par popularité décroissante, on peut procéder ainsi.\nSELECT countrycode, LANGUAGE, \nRANK() OVER (PARTITION BY countrycode ORDER BY percentage DESC)  AS rnk\nFROM world.countrylanguage ;"
  },
  {
    "objectID": "workshops/td5.html#rank-over",
    "href": "workshops/td5.html#rank-over",
    "title": "TD 5: SQL",
    "section": "RANK() OVER ()",
    "text": "RANK() OVER ()\nOn peut ne pas partitionner en utilisant l’expression OVER (). Par exemple, si on veut obtenir le rang des tuples d’une table sur un tri particulier.\nSELECT countrycode, name_country, \n       RANK() OVER (ORDER BY population_country DESC)  AS rnk\nFROM world.country ;"
  },
  {
    "objectID": "workshops/td5.html#autres-types-de-fenêtres",
    "href": "workshops/td5.html#autres-types-de-fenêtres",
    "title": "TD 5: SQL",
    "section": "Autres types de fenêtres",
    "text": "Autres types de fenêtres\nLa construction OVER ( ...) n’est pas utilisée exclusivement avec des partitions (peut-être triviales), on peut aussi définir des fenêtres glissantes.\nLes fonctions fenêtre ne sont autorisées que dans la liste SELECT et la clause ORDER BY de la requête. Elles sont interdites ailleurs, par exemple dans les clauses GROUP BY, HAVING et WHERE."
  },
  {
    "objectID": "workshops/td5.html#forme-générale",
    "href": "workshops/td5.html#forme-générale",
    "title": "TD 5: SQL",
    "section": "Forme générale",
    "text": "Forme générale\nCREATE OR REPLACE FUNCTION  schema_name.func_name(p_arg1 p_arg1_datatype, ..., [OUT o_arg1 o_arg1_datatype, ...])\nRETURNS some type | RECORD | SETOF some type | TABLE (..) \nLANGUAGE SQL AS\n$$\nSQL statement ;\nSQL statement ;\n...\nSQL statement ;\n$$ ;"
  },
  {
    "objectID": "workshops/td5.html#fonctions-qui-retournent-un-type-simple",
    "href": "workshops/td5.html#fonctions-qui-retournent-un-type-simple",
    "title": "TD 5: SQL",
    "section": "Fonctions qui retournent un type simple",
    "text": "Fonctions qui retournent un type simple\nDans le schéma world, on veut écrire une fonction qui prend en argument une région et renvoie la population maximale parmi les capitales de la région (voir td2 requête 1).\nCREATE OR REPLACE FUNCTION username.taille_max_capitale_region(p_region text)\nRETURNS INTEGER LANGUAGE SQL AS\n$$\nSELECT MAX(population_city) AS max_pop\nFROM world.country c JOIN world.city cc ON (c.capital=cc.id)\nWHERE c.region=p_region AND cc.population_city IS NOT NULL;\n$$ ;"
  },
  {
    "objectID": "workshops/td5.html#fonctions-qui-retournent-un-type-composé",
    "href": "workshops/td5.html#fonctions-qui-retournent-un-type-composé",
    "title": "TD 5: SQL",
    "section": "Fonctions qui retournent un type composé",
    "text": "Fonctions qui retournent un type composé\nDans le schéma world, on veut écrire une fonction qui prend en argument une région et renvoie le nom et la population de la capitale la plus peuplée de cette région (voir td2 requête 1).\nOn peut utiliser le qualifiant OUT pour désigner des paramètres de sortie.\nCREATE OR REPLACE FUNCTION username.capitale(p_region text, OUT o_name_capital TEXT, OUT o_population_capital INTEGER)\nRETURNS RECORD  LANGUAGE SQL AS\n$$\nWITH r AS(\n  SELECT cc.*, RANK() OVER (PARTITION BY c.region \n                            ORDER BY cc.population_city DESC) AS rnk\n  FROM world.country c JOIN world.city cc ON (c.capital=cc.id)\n  WHERE c.region=p_region)\nSELECT r.name_city,  r.population_city\nFROM r \nWHERE r.rnk = 1 ;\n$$ ;"
  },
  {
    "objectID": "workshops/td5.html#fonctions-qui-retournent-un-type-composé-défini-par-les-lignes-dune-table",
    "href": "workshops/td5.html#fonctions-qui-retournent-un-type-composé-défini-par-les-lignes-dune-table",
    "title": "TD 5: SQL",
    "section": "Fonctions qui retournent un type composé défini par les lignes d’une table",
    "text": "Fonctions qui retournent un type composé défini par les lignes d’une table\nDans le schéma world, on veut écrire une fonction qui prend en argument une région et renvoie la description de la capitale la plus peuplée de cette région (voir td2 requête 1).\nCREATE OR REPLACE FUNCTION username.capitale(p_region text)\nRETURNS world.city  LANGUAGE SQL AS\n$$\nWITH r AS(\n  SELECT cc.*, RANK() OVER (PARTITION BY c.region \n                            ORDER BY cc.population_city DESC) AS rnk\n  FROM world.country c JOIN world.city cc ON (c.capital=cc.id)\n  WHERE c.region=p_region\n)\nSELECT r.id, r.name_city, r.countrycode, r.district, r.population_city\nFROM r \nWHERE r.rnk = 1 ;\n$$ ;"
  },
  {
    "objectID": "workshops/td5.html#fonctions-qui-retournent-une-table",
    "href": "workshops/td5.html#fonctions-qui-retournent-une-table",
    "title": "TD 5: SQL",
    "section": "Fonctions qui retournent une table",
    "text": "Fonctions qui retournent une table\nDans le schéma world, on veut écrire une fonction qui prend en argument une région et renvoie la table des capitales de la région (voir td2 requête 1).\n\nTable de schéma explicite\nOn se contente d’abord de renvoyer le nom de la capitale. On explicite le schéma de la table résultat\nCREATE OR REPLACE FUNCTION username.capitales_region(p_region text)\nRETURNS TABLE (name_capital text) LANGUAGE SQL AS\n$$\nSELECT cc.name_city \nFROM world.country c JOIN world.city cc ON (c.capital=cc.id)\nWHERE c.region=p_region ;\n$$ ;\n\n\nTable de même schéma qu’une autre table\nDocumentation\nOn veut maintenant récupérer une table de même schéma que city.\n\n\n\n\n\n\nLa solution est très simple. On profite de ce qu’à chaque table correspond un type de même nom et on utilise le mot-clé SETOF.\n\n\n\nCREATE OR REPLACE FUNCTION username.capitales_region_large(p_region text)\nRETURNS SETOF world.city  LANGUAGE SQL AS\n$$\nSELECT cc.* \nFROM world.country c JOIN world.city cc ON (c.capital=cc.id)\nWHERE c.region=p_region ;\n$$ ;"
  },
  {
    "objectID": "workshops/td3.html",
    "href": "workshops/td3.html",
    "title": "TD 3: SQL",
    "section": "",
    "text": "L3 MIASHS/Ingémath\n\n\nUniversité Paris Cité\n\n\nAnnée 2025\n\n\nCourse Homepage\n\n\nMoodle\nObjectifs de la séance:\nEn plus du schéma world, nous allons utiliser le schéma pagila qui contient des informations utilisées par un chaîne fictive de magasins de location de DVD.\nLe schéma pagila est visible ici.\nSous psql ou pgli, vous pouvez aussi inspecter les tables comme d’habitude avec"
  },
  {
    "objectID": "workshops/td3.html#requêtes-imbriquées",
    "href": "workshops/td3.html#requêtes-imbriquées",
    "title": "TD 3: SQL",
    "section": "Requêtes imbriquées",
    "text": "Requêtes imbriquées\nLes requêtes imbriquées permettent d’utiliser le résultat d’une requête dans la clause WHERE.\nOn utilisera essentiellement les opérateurs suivants: IN, EXISTS, ALL, ANY.\nIN permet de tester la présence d’une valeur dans le résultat d’une requête.\nEXISTS renvoie True si la requête donnée est non-vide et False sinon. On peut les combiner avec NOT pour inverser leur comportement: NOT IN et NOT EXISTS. Par exemple, pour connaître les régions sans monarchie, on pourra écrire:\nSELECT DISTINCT region \nFROM world.country\nWHERE region NOT IN (\n  SELECT region\n  FROM world.country\n  WHERE governmentform like '%Monarchy%'\n);\nPour connaître les régions qui ont au moins une langue officielle, on pourra écrire:\nSELECT DISTINCT region \nFROM world.country AS co\nWHERE EXISTS (\n  SELECT *\n  FROM world.countrylanguage AS cl\n  WHERE co.countrycode = cl.countrycode AND \n    cl.isofficial\n);\nRemarquez que dans ce dernier exemple, la sous-requête fait intervenir des attributs de la requête principale, c’est pourquoi on parle de requêtes imbriquées.\nANY et ALL sont deux autres opérateurs. Par exemple\nSELECT * \nFROM table \nWHERE col &lt; ALL(\n  requete\n)\nsélectionnera les lignes de table telles que la valeur de col est plus petite que toutes les valeurs retournées par la requête requete. Ainsi, la requête\nSELECT * \nFROM world.country\nWHERE population_country &gt;= ALL(\n  SELECT population_country \n  FROM world.country\n);\nretournera la liste des pays les plus peuplés.\nSELECT * \nFROM table \nWHERE col &lt; ANY(\n  requete\n)\nsélectionnera les lignes de table telles que la valeur de col est strictement plus petite qu’au moins une des valeurs retournées par la requête requete.\nPour connaître les régions où l’on ne trouve qu’une seule forme de gouvernement, on pourra écrire:\nSELECT DISTINCT region \nFROM world.country as c1\nWHERE c1.governmentform = ALL(\n  SELECT c2.governmentform \n  FROM world.country as c2\n  WHERE c2.countrycode!=c1.countrycode AND \n    c2.region=c1.region\n);\n\n\n\n\n\n\nOn remarque que dans EXISTS ou IN on peut utiliser des attributs de notre requête globale, ce qui les rend plus puissants que\nWITH ... AS (\n  ...\n)"
  },
  {
    "objectID": "workshops/td3.html#jointure-externe",
    "href": "workshops/td3.html#jointure-externe",
    "title": "TD 3: SQL",
    "section": "Jointure externe",
    "text": "Jointure externe\nLa jointure externe est une jointure un peu particulière. On a vu la semaine dernière que lorsqu’on faisait une jointure, les lignes de la table de droit étaient recollées aux lignes de la table de gauche. Si une ligne a gauche ne pouvaient pas être recollée, elle disparaissait de la jointure. La jointure extérieure permet de garder ces lignes-là malgré tout.\nOn utilisera LEFT JOIN et RIGHT JOIN. Par exemple, la requête suivante renvoie la liste des pays et leur langages. Les pays qui ne se trouvent pas dans la table countrylanguage (il y en a, l’Antarctique par exemple) seront listés quand même et les informations manquantes seront remplies avec des valeurs NULL.\nSELECT * \nFROM world.country AS p LEFT JOIN \n  world.countrylanguage AS l ON \n  p.countrycode = l.countrycode;\nOn peut utiliser cette requête pour trouver les pays qui n’ont pas de langue officielle par exemple:\nSELECT * \nFROM world.country as p LEFT JOIN \n  world.countrylanguage AS l ON \n  p.countrycode = l.countrycode AND l.isofficial\nWHERE l.countrycode IS NULL;"
  },
  {
    "objectID": "workshops/td3.html#requêtes",
    "href": "workshops/td3.html#requêtes",
    "title": "TD 3: SQL",
    "section": "Requêtes",
    "text": "Requêtes\n\nQuels sont les langues qui ne sont officielles dans aucun pays ? (355 lignes)\n\nÉcrivez une version avec EXCEPT, une avec NOT IN et une autre avec LEFT JOIN.\n\nQuelles sont les régions où au moins deux pays ont la même forme de gouvernement ? (21 lignes)\n\n\nQuels sont les films qui n’ont jamais été loués ? (42 lignes)\n\n\n\n\n\n\n\nEn calcul relationnel\n\\[\\begin{align*}\n\\Big\\{ f.\\texttt{title} : & \\texttt{film}(f) \\wedge \\\\\n& \\neg \\big( \\exists t, t_1  \\quad \\texttt{inventory}(t)  \\wedge  \\exists t_1  \\quad \\texttt{rental}(t_1)  \\wedge\\\\\n&\\phantom{\\neg\\big(} f.\\texttt{film\\_id}=t.\\texttt{film\\_id}\\wedge t.\\texttt{inventory\\_id}=t_1.\\texttt{inventory\\_id}\\big)\\Big\\}\n\\end{align*}\\]\n\n\n\n\n\n\n\n\n\nCette question est exactement du même type que la précédente. On y répond de la même manière : pour trouver 1 les objets d’un certain type qui ne possèdent pas une propriété, on cherche dans la base tous les objets de ce type et on fait la différence avec l’ensemble des objets de ce type qui possèdent la propriété dans la base.\n\n\n\n\nQuels sont les acteurs qui ont joué dans toutes les catégories de film ? (11 lignes)\n\n\n\n\n\n\n\nCette requête réalise une opération sophistiquée de l’algèbre relationnelle la division ou \\(\\div\\). Il ne s’agit pas d’une opération primitive comme \\(\\sigma,\\pi, \\times\\).\n\\[\\pi_{\\texttt{actor\\_id},\\texttt{category\\_id}} \\left(\\texttt{film\\_actor} \\bowtie \\texttt{film\\_category}\\right)  \\div \\pi_{\\texttt{category}} (\\texttt{film\\_category})\\]\n\n\n\n\nExiste-t-il des acteurs qui ne jouent avec aucun autre acteur ? (0 ligne)\n\n\nNom, prénom des clients installés dans des villes sans magasin ? (599 lignes)\n\n\nLister les pays pour lesquels toutes les villes ont au moins un magasin. (1 ligne)\n\n\nDéterminer la liste des films disponibles dans toutes les langues.\n\nUn même dvd (inventory_id) peut bien sûr être loué plusieurs fois, mais pas simultanément. Proposer une requête qui vérifie que les dates de location d’un dvd donné sont compatibles."
  },
  {
    "objectID": "workshops/td3.html#vues",
    "href": "workshops/td3.html#vues",
    "title": "TD 3: SQL",
    "section": "Vues",
    "text": "Vues\nLes vues permettent de donner un nom à une requête afin de pouvoir l’appeler plus tard sans la réécrire à chaque fois. Une vue s’enregistre dans un schéma. Par exemple, dans le schéma World, on pourrait créer une vue VillesRepublic qui contient toutes les villes de la table city qui sont dans une république.\nOn crée une vue avec CREATE VIEW nom AS requete. Étant donné que vous ne pouvez écrire que dans votre schéma personnel, il faudra nommer vos vues entid.nom où entid est votre identifiant ENT. Ainsi\nCREATE VIEW entid.VillesRepublic AS\n  SELECT \n    B.* \n  FROM \n      world.country as A \n  NATURAL JOIN \n      world.city as B\n  WHERE \n      A.governmentform like '%Republic%';\ncrée une vue dans votre schéma personnel. Désormais, si on veut sélectionner les villes qui sont dans une république et dont la population est supérieure à \\(1000000\\), on pourra simplement écrire :\nSELECT * \nFROM \n    entid.VillesRepublic \nWHERE \n    population_city&gt;=1000000;\n\n\n\n\n\n\nRemarquez la différence entre WITH et une vue. WITH nomme une requête temporairement, seulement à l’échelle de la requête courante tandis qu’une vue est enregistrée de façon permanente. Cependant, chaque fois que vous appelez votre vue, elle est réévaluée par le système de base de données.\n\n\n\nNotez aussi que SQL n’est pas sensible à la casse. La vue entid.VillesRepublic peut être aussi désignée par entid.villesrepublic.\nPour supprimer une vue existante on utilise la commande DROP VIEW suivie du nom de la vue à supprimer. Par exemple l’instruction\nDROP VIEW entid.VillesRepublic ;\nsupprime la vue créée précédemment.\nDans votre schéma personnel (qui porte le nom de votre identifiant ENT), écrire une vue film_id_horror qui renvoie la liste des films de catégorie ‘Horror’."
  },
  {
    "objectID": "workshops/td3.html#fonctions-sql",
    "href": "workshops/td3.html#fonctions-sql",
    "title": "TD 3: SQL",
    "section": "Fonctions SQL",
    "text": "Fonctions SQL\nDans votre schéma personnel (qui porte le nom de votre identifiant ENT), écrire une fonction SQL film_id_cat qui prend en paramètre une chaîne de caractère s et renvoie la liste des films de catégorie s. On rappelle la syntaxe :\nCREATE OR REPLACE FUNCTION entid.film_id_cat(s TEXT)\nRETURNS TABLE(film_id INTEGER)\nLANGUAGE 'sql' AS\n$$\nrequete\n$$\net l’usage\nCREATE OR REPLACE FUNCTION \n  entid.film_id_cat(s text)\nRETURNS TABLE(film_id smallint) AS \n$$\n    SELECT fc.film_id \n    FROM \n        pagila.film_category fc\n  JOIN \n        pagila.category ca\n  ON (fc.category_id=ca.category_id)\n    WHERE \n    ca.name=s ;\n$$ LANGUAGE sql ;\nUtilisez votre fonction pour écrire les requêtes suivantes:\nQuels sont les acteurs qui ont déjà joué dans un film d’horreur (catégorie ‘Horror’) ?\nQuels sont les acteurs qui n’ont jamais joué dans une comédie (Comedy) ? (53 lignes)\n\n\n\n\n\n\nCaution Attention ! Cette requête ne répond pas à la question :\n\n\n\nSELECT DISTINCT ac.*\nFROM pagila.actor ac NATURAL JOIN\n     (SELECT * FROM pagila.film_actor\n      WHERE film_id NOT IN\n        (SELECT * FROM pagila.film_id_cat('Comedy') )\n      ) as X;\nElle répond à la question : Quels sont les acteurs qui ont joué dans un film qui n’est pas une comédie ?\n\n\n\n\n\n\n\n\nEn calcul relationnel, en considérant film_id_cat('Comedy') comme une relation (ce qui est cohérent avec la définition de la fonction) cette requête s’exprime\n\\[\\begin{align*}\n  \\left\\{ a.\\texttt{last\\_name,}  \\right. & a.\\texttt{first\\_name}\n  :\n  \\texttt{actor}(a) \\wedge \\\\\n  & \\neg\n  \\left(\\exists \\mathrm{fa}\\quad \\texttt{film\\_actor}(\\mathrm{fa}) \\right.  \\wedge  \\mathrm{fa}.\\texttt{actor\\_id}=a.\\texttt{actor\\_id}  \\\\\n& \\left. \\left.   \\wedge \\texttt{film\\_id\\_cat}(\\mathrm{'Comedy'})(\\mathrm{fa}.\\texttt{film\\_id}) \\right) \\right\\}\n\\end{align*}\\]\nLe calcul relationnel traduit presque littéralement la démarche que nous suivons lorsqu’il faut construire le résultat à la main : pour trouver les actor_id des acteurs qui n’ont jamais joué dans une comédie, nous examinons toutes les valeurs \\(a\\) de actor_id présentes dans la table actor (ou film_actor), et pour chacune de ces valeurs, nous verifions qu’il n’existe pas de tuple de la table film_actor où l’attribut actor_id soit égal à \\(a\\) et où l’attribut film_id désigne un film qui apparaît dans le résultat de film_id_cat('Comedy').\nNous décrivons/explicitons ainsi les propriétés du résultat de la requête Quels sont les acteurs qui n’ont jamais joué dans une comédie (‘Comedy’) ?.\nSi maintenant nous cherchons à 1 ce résultat, nous pouvons d’abord calculer la liste des actor_id des acteurs qui ont joué dans une comédie, calculer la liste de tous les actor_id connus dans le schema et faire la différence, en algèbre relationnelle, cela se résume à\n\\[\\pi_{\\texttt{actor\\_id}}\\left(\\texttt{film\\_actor}\\right) \\setminus \\pi_{\\texttt{actor\\_id}} \\left( \\texttt{film\\_actor} \\bowtie\\texttt{film\\_id\\_cat}(\\texttt{'Comedy'}) \\right)\\]\n\n\n\nQuels sont les acteurs qui ont joué dans un film d’horreur (‘Horror’) et dans un film pour enfant (‘Children’)? (130 lignes)\n\n\n\n\n\n\nIci l’erreur la plus fréquente consiste à écrire\nSELECT \n  actor_id \nFROM \n  pagila.film_actor AS fa\nWHERE \n  fa.film_id IN (\n    SELECT * \n    FROM entid.film_id_cat('Children')\n  ) AND \n  fa.film_id IN (\n    SELECT * \n    FROM entid.film_id_cat('Horror')\n  );\nLe résultat est vide et la requête ne correspond pas à la question posée.\nElle calcule les actor_id des acteurs qui ont dans au moins un film qui relève simultanément des catégories Horror et Children (ce genre de film est assez rare).\nPour calculer un résultat correct, il faut pour chaque valeur \\(a\\) de actor_id rechercher deux tuples (pas nécessairement distincts) de film_actor où l’attribut actor_id vaut \\(a\\) et ou dans un cas film_id désigne un film pour enfants et dans l’autre un film d’horreur. En calcul relationnel, cela donne\n\\[\\begin{align*}\n  \\left\\{ a.\\texttt{last\\_name,}  \\right. & a.\\texttt{first\\_name}\n  :\n  \\texttt{actor}(a) \\wedge \\\\\n  &\n  \\left(\\exists \\mathrm{fa}\\quad \\texttt{film\\_actor}(\\mathrm{fa}) \\right.  \\wedge  \\mathrm{fa}.\\texttt{actor\\_id}=a.\\texttt{actor\\_id}  \\\\\n& \\left.   \\wedge \\texttt{film\\_id\\_cat}(\\mathrm{'Children'})(\\mathrm{fa}.\\texttt{film\\_id}) \\right) \\\\\n&  \\left(\\exists \\mathrm{fa}\\quad \\texttt{film\\_actor}(\\mathrm{fa}) \\right.  \\wedge  \\mathrm{fa}.\\texttt{actor\\_id}=a.\\texttt{actor\\_id}  \\\\\n& \\left. \\left.   \\wedge \\texttt{film\\_id\\_cat}(\\mathrm{'Horror'})(\\mathrm{fa}.\\texttt{film\\_id}) \\right)\\right\\}\n\\end{align*}\\]\nEn algèbre relationnelle\n\\[\\begin{align*}\n\\pi_{\\texttt{last\\_name,}\\texttt{first\\_name}} \\bigg( &  \\texttt{actor} \\bowtie  \\\\\n     & \\Big(\\pi_{\\texttt{actor\\_id}} \\left( \\texttt{film\\_actor} \\bowtie\n                                 \\texttt{film\\_id\\_cat}(\\texttt{'Children'}) \\right) \\bigcap\\\\\n     & \\; \\pi_{\\texttt{actor\\_id}} \\left( \\texttt{film\\_actor} \\bowtie\n                                 \\texttt{film\\_id\\_cat}(\\texttt{'Horror'}) \\right) \\Big)\n                                 \\bigg)\n\\end{align*}\\]"
  },
  {
    "objectID": "workshops/td11.html",
    "href": "workshops/td11.html",
    "title": "TD 11: Normalisation et dépendances",
    "section": "",
    "text": "L3 MIASHS/Ingémath\n\n\nUniversité Paris Cité\n\n\nAnnée 2025\n\n\nCourse Homepage\n\n\nMoodle\n\n\n\n\n\n\n\n\n\n\nExercice\nSoit le schéma \\[\\mathcal{A}=\\left\\{\\texttt{A,B,C,D,E,F,G,H}\\right\\}\\] et l’ensemble de DF\nBE → AC  \nB → H  \nF → CD  \nD → G\n\nAppliquer l’algorithme de décomposition vu en cours pour obtenir une décomposition de \\(\\mathcal{A}\\) qui respecte la FNBC et est sans perte d’information. Déterminer quelles DF sont préservées.\nPeut-on, en ajoutant un sous-schéma à la décomposition, obtenir une décomposition FNBC sans perte d’information et sans perte de DF ?\n\n\n\nExercice\nReprendre les questions de l’exercice précédent pour le schéma \\[\\mathcal{A}=\\left\\{\\texttt{A,B,C,D,E,F,G,H}\\right\\}\\] et l’ensemble de DF\nBE → AC  \nB → H\nF → CD\nD → G\nA→ E"
  },
  {
    "objectID": "workshops/td1.html",
    "href": "workshops/td1.html",
    "title": "TD 1: Algèbre relationnelle",
    "section": "",
    "text": "L3 MIASHS/Ingémath\n\n\nUniversité Paris Cité\n\n\nAnnée 2025\n\n\nCourse Homepage\n\n\nMoodle"
  },
  {
    "objectID": "workshops/td1.html#schémas",
    "href": "workshops/td1.html#schémas",
    "title": "TD 1: Algèbre relationnelle",
    "section": "Schémas",
    "text": "Schémas\nLes schémas sont une abstraction spécifique à PostgreSQL. Les schémas permettent de faire cohabiter sur une même base de données (ou catalogue dans le jargon PostgreSQL) plusieurs ensembles d’informations de nature différentes. On peut indiquer à pgcli, psql ou un autre client (dbeaver ou autre) quels schémas on veut utiliser par défaut.\nDans ce TP, nous allons nous concentrer sur le schéma world qui contient des informations concernant des villes et des pays/territoires du monde entier. Au cours de ce semestre, nous serons amenés à utiliser d’autres schémas : pagila qui contient des informations concernant des films, …\nPour lister et modifier les schémas de votre environnement de travail:\nbd_2023-24&gt; SHOW search_path ;                  -- lister\nbd_2023-24&gt; SET search_path TO world, public ;  -- modifier\nbd_2023-24&gt; SHOW search_path ;       -- visualiser \nLister les schémas du catalogue bd_2023-24.\n\\dn\nPour lister les tables des schemas inscrits sur votre search_path.\nbd_2023-24&gt; \\d\n+----------+---------------------+--------+----------+\n| Schema   | Name                | Type   | Owner    |\n|----------+---------------------+--------+----------|\n| world    | city                | table  | postgres |\n| world    | country             | table  | postgres |\n| world    | countrylanguage     | table  | postgres |\n+----------+---------------------+--------+----------+\nVue d’ensemble du schéma world"
  },
  {
    "objectID": "workshops/td1.html#suggestion",
    "href": "workshops/td1.html#suggestion",
    "title": "TD 1: Algèbre relationnelle",
    "section": "Suggestion",
    "text": "Suggestion\nSi vous travaillez avec pgcli/psql, utilisez en local votre éditeur préféré (emacs, vi, sublime text, visual studio code, …), transférez votre script sql grâce à scp, et chargez le script dans votre session psql/pgcli à l’aide de \\\\i."
  },
  {
    "objectID": "workshops/td1.html#tables",
    "href": "workshops/td1.html#tables",
    "title": "TD 1: Algèbre relationnelle",
    "section": "Tables",
    "text": "Tables\nPour voir la définition (c’est-à-dire les différentes colonnes) d’une table:\nbd_2023-24&gt; \\d world.country\n\n+--------------------+---------------+-------------+\n| Column             | Type          | Modifiers   |\n|--------------------+---------------+-------------|\n| countrycode        | character(3)  |  not null   |\n| name_country       | text          |  not null   |\n| continent          | text          |  not null   |\n| region             | text          |  not null   |\n| surfacearea        | real          |  not null   |\n| indepyear          | smallint      |             |\n| population_country | integer       |  not null   |\n| lifeexpectancy     | real          |             |\n| gnp                | numeric(10,2) |             |\n| gnpold             | numeric(10,2) |             |\n| localname          | text          |  not null   |\n| governmentform     | text          |  not null   |\n| headofstate        | text          |             |\n| capital            | integer       |             |\n| code2              | character(2)  |  not null   |\n+--------------------+---------------+-------------+"
  },
  {
    "objectID": "workshops/td1.html#explorer-les-possibilités-de-psql-ou-de-pgcli",
    "href": "workshops/td1.html#explorer-les-possibilités-de-psql-ou-de-pgcli",
    "title": "TD 1: Algèbre relationnelle",
    "section": "Explorer les possibilités de psql ou de pgcli",
    "text": "Explorer les possibilités de psql ou de pgcli\nbd_2023-24&gt; \\?\nDans la deuxième partie du TP, on s’intéresse aux requêtes, c’est-à-dire, les moyens d’extraire une information pertinente d’une base de données."
  },
  {
    "objectID": "weeks/week-9.html",
    "href": "weeks/week-9.html",
    "title": "Semaine 9",
    "section": "",
    "text": "Important\n\n\n\n\nCours magistral en Amphi 2 Olympe de Gouges 14h-15h30\n TD/TP 2004-2005-2006 Étage 2 Sophie Germain 15h45-16h45\n  Contrôle continu II 17h-18h15 Amphi A2 Halle aux Farines\n Emploi du temps\n Emploi du temps"
  },
  {
    "objectID": "weeks/week-9.html#préparer",
    "href": "weeks/week-9.html#préparer",
    "title": "Semaine 9",
    "section": "Préparer",
    "text": "Préparer\nTD 6 TD 6"
  },
  {
    "objectID": "weeks/week-9.html#cours-magistral-diapositives",
    "href": "weeks/week-9.html#cours-magistral-diapositives",
    "title": "Semaine 9",
    "section": "Cours magistral : diapositives",
    "text": "Cours magistral : diapositives\nModélisation I (entité-association)\nModélisation II (pattes de corbeau)"
  },
  {
    "objectID": "weeks/week-9.html#exercices-td-8",
    "href": "weeks/week-9.html#exercices-td-8",
    "title": "Semaine 9",
    "section": "Exercices : TD 8",
    "text": "Exercices : TD 8\nhtml pdf"
  },
  {
    "objectID": "weeks/week-9.html#solutions-du-td-6",
    "href": "weeks/week-9.html#solutions-du-td-6",
    "title": "Semaine 9",
    "section": "Solutions du TD 6",
    "text": "Solutions du TD 6\nhtml pdf"
  },
  {
    "objectID": "weeks/week-9.html#travail-personnel",
    "href": "weeks/week-9.html#travail-personnel",
    "title": "Semaine 9",
    "section": "Travail personnel",
    "text": "Travail personnel\nExercice de modélisation dans CC3 du 8 décembre 2023\nExercice de modélisation dans CT de janvier 2024\n\n\nretour à Agenda ⏎"
  },
  {
    "objectID": "weeks/week-3.html",
    "href": "weeks/week-3.html",
    "title": "Semaine 3",
    "section": "",
    "text": "Important\n\n\n\n\nCours magistral en Amphi 2 Olympe de Gouges Vendredi 14h-15h30\nTD/TP Ingémaths/METIS salle 2006 Etage 2 Sophie Germain Jeudi 13h30-16h00\nTD/TP MIASHS salles 2004-2005-2006 Étage 2 Sophie Germain Vendredi 15h45-18h15\n Emploi du temps MIASHS\n Emploi du temps Ingémaths/METIS\nsi ce n’est pas déjà fait suivre la procéure indiquée sur moodle pour disposer d’un compte sur les machines de Sophie Germain"
  },
  {
    "objectID": "weeks/week-3.html#cours-magistral-diapositives",
    "href": "weeks/week-3.html#cours-magistral-diapositives",
    "title": "Semaine 3",
    "section": "Cours magistral : diapositives",
    "text": "Cours magistral : diapositives\n\n Introduction à l’algèbre relationnelle\n\n SQL requêtes élémentaires\n\nSQL requêtes imbriqués  sauf lateral"
  },
  {
    "objectID": "weeks/week-3.html#exercices-terminer-td-1-et-commencer-td-2",
    "href": "weeks/week-3.html#exercices-terminer-td-1-et-commencer-td-2",
    "title": "Semaine 3",
    "section": "Exercices : Terminer TD 1 et commencer TD 2",
    "text": "Exercices : Terminer TD 1 et commencer TD 2\n\nEnoncés : html pdf\nSchéma world\nSolutions :html pdf"
  },
  {
    "objectID": "weeks/week-3.html#solutions-du-td-1-semaine-2",
    "href": "weeks/week-3.html#solutions-du-td-1-semaine-2",
    "title": "Semaine 3",
    "section": "Solutions du TD 1 (Semaine 2)",
    "text": "Solutions du TD 1 (Semaine 2)\nhtml pdf"
  },
  {
    "objectID": "weeks/week-3.html#travail-personnel-optionnel",
    "href": "weeks/week-3.html#travail-personnel-optionnel",
    "title": "Semaine 3",
    "section": "Travail personnel optionnel ",
    "text": "Travail personnel optionnel \nCC 1 2023-24\n\n\nretour à Agenda ⏎"
  },
  {
    "objectID": "weeks/week-1.html",
    "href": "weeks/week-1.html",
    "title": "Semaine 1",
    "section": "",
    "text": "Important\n\n\n\n\nCours magistral en Amphi 2 Olympe de Gouges\nVendredi 12 septembre 2025 de 14h à 15h30\n Emploi du temps"
  },
  {
    "objectID": "weeks/week-1.html#cours-magistral-diapositives",
    "href": "weeks/week-1.html#cours-magistral-diapositives",
    "title": "Semaine 1",
    "section": "Cours magistral : diapositives",
    "text": "Cours magistral : diapositives\nIntroduction aux Bases de Données\nIntroduction à l’algèbre relationnelle\n Nous sommes allés jusqu`à la sélection"
  },
  {
    "objectID": "weeks/week-1.html#exercices-td-1",
    "href": "weeks/week-1.html#exercices-td-1",
    "title": "Semaine 1",
    "section": "Exercices : TD 1",
    "text": "Exercices : TD 1\nVous pouvez commencer à aborder les questions de la première feuille de TD\nhtml pdf"
  },
  {
    "objectID": "weeks/week-1.html#logistique",
    "href": "weeks/week-1.html#logistique",
    "title": "Semaine 1",
    "section": "Logistique",
    "text": "Logistique\n Pensez à activer votre compte ENT (suivre les instructions sur Moodle). Vous en aurez besoin pour accéder au serveur PostGres utilisé en TP/TD à partir du 15 septembre.\nIl faut réaliser cette activation le plus tôt possible, idéalement avant le 15 septembre.\nSi vous le pouvez, installez sur votre machine un des clients décrits sur cette page.\n\n\nretour à Agenda ⏎"
  },
  {
    "objectID": "slides-listings.html",
    "href": "slides-listings.html",
    "title": "Diapositives",
    "section": "",
    "text": "Les diapositives fournissent le canevas du cours. Vous pouvez les utiliser pour vous familiariser avec le matériel du prochain cours, pour revoir les cours passés et, pour réviser.\nLes diapositives marquées par l’image  renvoient à des développements effectués en classes.\n\n\n   \n    \n    \n      Order By\n      Default\n      \n        Titre\n      \n      \n        Date - Oldest\n      \n      \n        Date - Newest\n      \n      \n        Description\n      \n    \n  \n    \n      \n      \n    \n\n\n\n\n\n\nDate\n\n\n\nTitre\n\n\n\nDescription\n\n\n\n\n\n\n\n\nSep 12, 2025\n\n\nIntroduction aux Bases de Données\n\n\nBases de données, Systèmes d’information, Modèle relationnel, OLTP, OLAP\n\n\n\n\n\n\nSep 12, 2025\n\n\nAlgèbre relationnelle\n\n\nAlgèbre relationnelle, Sélection, Projectio, Jointure\n\n\n\n\n\n\nSep 19, 2025\n\n\nSQL : requêtes simples\n\n\nAlgèbre relationnelle, SQL, Sélection, Projection, Jointure\n\n\n\n\n\n\nSep 26, 2025\n\n\nSQL : requêtes imbriquées\n\n\nRequêtes imbriquées, CTE\n\n\n\n\n\n\nOct 3, 2025\n\n\nSQL : Agrégations, Paritions, Fenêtres\n\n\nAggrégations, Partitions, Fenêtres\n\n\n\n\n\n\nOct 10, 2025\n\n\nSQL : Définition de données\n\n\nCréation de tables, Insertion, Suppression, Mises à jour\n\n\n\n\n\n\nOct 17, 2025\n\n\nSQL : Définition de données, Contraintes simples\n\n\nContraintes, Check, Primary Key, Foreign Key\n\n\n\n\n\n\nOct 24, 2025\n\n\nSQL : Définition de données, Contraintes d’exclusion\n\n\nContraintes, Étude de cas, Exclude, Contraintes multitables\n\n\n\n\n\n\nNov 7, 2025\n\n\nModélisation : Entité-Association\n\n\nModélisation, Entité-Association, Cardinalités, Spécialisation/Généralisation\n\n\n\n\n\n\nNov 14, 2025\n\n\nModélisation : Pattes de corbeaux\n\n\nModélisation, Pattes de corbeaux, Rétro-ingénierie\n\n\n\n\n\n\nNov 21, 2025\n\n\nNormalisation : Dépendances fonctionnelles, Fermetures\n\n\nNormalisation, Dépendances fonctionnelles, Implication, Fermeture, Clés\n\n\n\n\n\n\nNov 28, 2025\n\n\nNormalisation: FNBC, Décomposition SPI, Poursuite\n\n\nNormalisation, Dépendances fonctionnelles, Implication, Fermeture, Clés\n\n\n\n\n\n\nDec 5, 2025\n\n\nNormalisation: FN3, Décomposition SPI et sans perte de DF\n\n\nNormalisation, FN3, Dépendances projetés, Perte de DF, Couverture irréductible\n\n\n\n\n\n\nNo matching items\n\n\n\n\n\n\n\nNoteMode d’emploi\n\n\n\nLes diapositives utilisent la bibliothèque revealjs de . Elles s’affichent dans votre navigateur. Vous pouvez accéder au mode d’emploi en tappant",
    "crumbs": [
      "Diapositives"
    ]
  },
  {
    "objectID": "schemas/schema-pagila.html",
    "href": "schemas/schema-pagila.html",
    "title": "Schéma : pagila",
    "section": "",
    "text": "Présentation de la partie film du schéma pagila, pour l’entrainement à PostGres."
  },
  {
    "objectID": "schemas/schema-pagila.html#contexte",
    "href": "schemas/schema-pagila.html#contexte",
    "title": "Schéma : pagila",
    "section": "Contexte",
    "text": "Contexte\nDescription de presque toutes les tables de la base pagila ,\n\nPagemaison de la base de données pagila.\nPagemaison de la base de données sakila\nDétails sur les films\nDétails sur les adresses, clients, magasins, paiements\n\npagila est une base d’entrainement pour PostgreSQL. Cette base est une adaptation de la base sakila utilisée pour l’entrainement à MySQL.\nLa base pagila est censée permettre de gérer les prêts et la facturation d’une chaine fictive de magasins de location de DVD (une activité commerciale florissante durant les années 1990 et au début des années 2000).\nLe schéma pagila est formé de 15 tables. Un groupe de tables concerne les films diponibles au catalogue de la chaîne de magasins: film, actor, language, category, film_actor, film_category.\nLes lignes de la table film sont les entrées du catalogue de la chaîne. Une ligne est identifiée par l’attribut film_id (noter l’attribution automatique des identifiants grâce au mécanisme des séquences).\nUn film possède une distribution constituée d’actrices et d’acteurs. Comme une actrice peut jouer dans plusieurs films, l’association plusieurs-à-plusieurs entre films et acteurs/actrices est rerésentée par une table intémédiaire film_actor.\nUn film relève d’une ou plusieurs catégories. Là encore, l’association plusieurs-à-plusieurs entre films et catégories est rerésentée par une table intémédiaire film_category.\nUne entrée au catalogue correspond à un titre de film tourné dans une certaine langue (la langue originale) et à une bande son dans une langue qui peut être différente de la langue originale.\n\n\n\n\n\n\nNotons ici qu’une entrée de la table film ne correspond pas tout à fait à l’idée que nous nous faisons d’un film (entrée dans la base IMDB), mais plutôt à une édition (simplifiée) de film en DVD.\n\n\n\nUne film disponible au catalogue correspond à un ou plusieurs DVD (objets physiques) qui sont représentés par des lignes de la table inventory. Les conditions de location d’un même titre (ligne de film) sont identiques pour les DVDs physiques correspondant au même titre.\nUn ligne de la table inventory peut faire l’objet d’une location qui correspond à une ligne de rental. La table rental est encore un cas de table intermédiaire entre les tables inventory, customer (client) et staff (employé). Le fait qu’il s’agisse d’une table intermédiaire destinée à représenter une association ternaire plusieurs-à-plusieurs entre élément d’inventaire, client et employé est en partie caché par le fait que rental possède un identifiant propre rental_id. Un élément de rental devrait pouvoir être identifié grâce aux identifiants des lignes participantes de inventory, customer et staff et à un identifiant relatif comme rental_date.\nUn client est rattaché à un magasin (store). Les employés sont eux aussi attachés à un magasin.\nLes clients, employés et magasins sont liés à une adresse (address) qui relève d’une ville (city) qui elle même relève d’un pays (country).\nUn paiement relie un employé à un client à propos d’une location."
  },
  {
    "objectID": "schemas/schema-pagila.html#table-pagila.address",
    "href": "schemas/schema-pagila.html#table-pagila.address",
    "title": "Schéma : pagila",
    "section": "Table pagila.address",
    "text": "Table pagila.address\n\n\n\n\n\n\n\n\nIdx\nName\nData Type\n\n\n\n\n* 🔑 ⬋\naddress_id\ninteger DEFAULT nextval(‘pagila.address_address_id_seq’::regclass)\n\n\n*\naddress\nvarchar(50)\n\n\n\naddress2\nvarchar(50)\n\n\n*\ndistrict\nvarchar(20)\n\n\n* 🔎 ⬈\ncity_id\nsmallint\n\n\n\npostal_code\nvarchar(10)\n\n\n*\nphone\nvarchar(20)\n\n\n*\nlast_update\ntimestamp DEFAULT now()\n\n\n\n\nForeign Keys\n\n\n\nType\nName\nOn\n\n\n\n\n\naddress_city_id_fkey\n( city_id ) ref pagila.city (city_id)\n\n\n\n Dans les tables address, city, country, store, inventory, rental, actor, film, category, language, payment, on trouve une colonne nommée nom de la table_id qui est la clé primaire de la table. Cette colonne est (en général) renseignée automatiquement : la valeur par défaut est calculée en invoquant la fonction nextval() sur la séquence associée à la table. La clé primaire ne comporte d’information intéressante pour l’usager final, elle correspond à un rang d’insertion dans la table.\n Les tables de pagila comportent une colonne last_update (dernière mise-à-jour) de type timestamp (instant, nombre de secondes écoulées depuis le premier janvier 1970, origine des temps selon Unix). Cette colonne est remplie (renseignée) automatiquement lors des insertions et mises à jour grâce à la valeur par défaut calculée par la fonction now().\n\n\n\n\n\n\nLes colonnes last_update des différentes tables de pagila n’ont rien à voir les unes avec les autres (vérifier l’absence de contrainte référentielle au sujet de ces colonnes). Il n’est donc pas question (en général) d’utiliser ces colonnes last_update pour effectuer des jointures entre les tables de pagila.\nLa présence des colonnes last_update nous empêche de faire des jointures naturelles (NATURAL JOIN) entre film, film_actor, actor, etc.\nSELECT count(*) \nFROM \n  film\nJOIN\n  film_actor \nUSING(film_id) ;\n\n count \n-------\n  5462\nalors que\nSELECT count(*) \nFROM \n  film\nNATURAL JOIN\n  film_actor ;\n\n count \n-------\n     0"
  },
  {
    "objectID": "schemas/schema-pagila.html#table-pagila.city",
    "href": "schemas/schema-pagila.html#table-pagila.city",
    "title": "Schéma : pagila",
    "section": "Table pagila.city",
    "text": "Table pagila.city\n\n\n\n\n\n\n\n\nIdx\nName\nData Type\n\n\n\n\n* 🔑 ⬋\ncity_id\ninteger DEFAULT nextval(‘pagila.city_city_id_seq’::regclass)\n\n\n*\ncity\nvarchar(50)\n\n\n* 🔎 ⬈\ncountry_id\nsmallint\n\n\n*\nlast_update\ntimestamp DEFAULT now()\n\n\n\n\nForeign Keys\n\n\n\nType\nName\nOn\n\n\n\n\n\ncity_country_id_fkey\n( country_id ) ref pagila.country (country_id)\n\n\n\n On dit que la contrainte référentielle city_country_id_fkey est émise par l’attribut country_id de la table city vers l’attribut country_id de la table country. Une ville n’appartient qu’à un seul pays, mais un pays peut comporter plusieurs villes."
  },
  {
    "objectID": "schemas/schema-pagila.html#table-pagila.country",
    "href": "schemas/schema-pagila.html#table-pagila.country",
    "title": "Schéma : pagila",
    "section": "Table pagila.country",
    "text": "Table pagila.country\n\n\n\n\n\n\n\n\nIdx\nName\nData Type\n\n\n\n\n* 🔑 ⬋\ncountry_id\ninteger DEFAULT nextval(‘pagila.country_country_id_seq’::regclass)\n\n\n*\ncountry\nvarchar(50)\n\n\n*\nlast_update\ntimestamp DEFAULT now()"
  },
  {
    "objectID": "schemas/schema-pagila.html#table-pagila.customer",
    "href": "schemas/schema-pagila.html#table-pagila.customer",
    "title": "Schéma : pagila",
    "section": "Table pagila.customer",
    "text": "Table pagila.customer\n\n\n\n\n\n\n\n\nIdx\nName\nData Type\n\n\n\n\n* 🔑 ⬋\ncustomer_id\ninteger DEFAULT nextval(‘pagila.customer_customer_id_seq’::regclass)\n\n\n* 🔎 ⬈\nstore_id\nsmallint\n\n\n*\nfirst_name\nvarchar(45)\n\n\n* 🔎\nlast_name\nvarchar(45)\n\n\n\nemail\nvarchar(50)\n\n\n* 🔎 ⬈\naddress_id\nsmallint\n\n\n*\nactivebool\nboolean DEFAULT true\n\n\n*\ncreate_date\ndate DEFAULT (‘now’::text)::date\n\n\n\nlast_update\ntimestamp DEFAULT now()\n\n\n\nactive\ninteger\n\n\n\n\nForeign Keys\n\n\n\nType\nName\nOn\n\n\n\n\n\ncustomer_store_id_fkey\n( store_id ) ref pagila.store (store_id)\n\n\n\ncustomer_address_id_fkey\n( address_id ) ref pagila.address (address_id)"
  },
  {
    "objectID": "schemas/schema-pagila.html#table-pagila.film",
    "href": "schemas/schema-pagila.html#table-pagila.film",
    "title": "Schéma : pagila",
    "section": "Table pagila.film",
    "text": "Table pagila.film\n\n\n\n\n\n\n\n\nIdx\nName\nData Type\n\n\n\n\n* 🔑 ⬋\nfilm_id\ninteger DEFAULT nextval(‘pagila.film_film_id_seq’::regclass)\n\n\n* 🔎\ntitle\nvarchar(255)\n\n\n\ndescription\ntext\n\n\n\nrelease_year\nyear\n\n\n* 🔎 ⬈\nlanguage_id\nsmallint\n\n\n🔎 ⬈\noriginal_language_id\nsmallint\n\n\n*\nrental_duration\nsmallint DEFAULT 3\n\n\n*\nrental_rate\nnumeric(4,2) DEFAULT 4.99\n\n\n\nlength\nsmallint\n\n\n*\nreplacement_cost\nnumeric(5,2) DEFAULT 19.99\n\n\n\nrating\nmpaa_rating DEFAULT ‘G’::pagila.mpaa_rating\n\n\n*\nlast_update\ntimestamp DEFAULT now()\n\n\n\nspecial_features\ntext[]\n\n\n\n\nForeign Keys\n\n\n\nType\nName\nOn\n\n\n\n\n\nfilm_original_language_id_fkey\n( original_language_id ) ref pagila.language (language_id)\n\n\n\nfilm_language_id_fkey\n( language_id ) ref pagila.language (language_id)"
  },
  {
    "objectID": "schemas/schema-pagila.html#table-pagila.inventory",
    "href": "schemas/schema-pagila.html#table-pagila.inventory",
    "title": "Schéma : pagila",
    "section": "Table pagila.inventory",
    "text": "Table pagila.inventory\n\n\n\n\n\n\n\n\nIdx\nName\nData Type\n\n\n\n\n* 🔑 ⬋\ninventory_id\ninteger DEFAULT nextval(‘pagila.inventory_inventory_id_seq’::regclass)\n\n\n* 🔎 ⬈\nfilm_id\nsmallint\n\n\n* 🔎 ⬈\nstore_id\nsmallint\n\n\n*\nlast_update\ntimestamp DEFAULT now()\n\n\n\n\nForeign Keys\n\n\n\nType\nName\nOn\n\n\n\n\n\ninventory_store_id_fkey\n( store_id ) ref pagila.store (store_id)\n\n\n\ninventory_film_id_fkey\n( film_id ) ref pagila.film (film_id)\n\n\n\nUne instance d’inventory correspond à un support physique, quelque chose qui peut-être loué. Elle permet au client de voir une instance de film, soit un film dans une certaine langue."
  },
  {
    "objectID": "schemas/schema-pagila.html#table-pagila.payment",
    "href": "schemas/schema-pagila.html#table-pagila.payment",
    "title": "Schéma : pagila",
    "section": "Table pagila.payment",
    "text": "Table pagila.payment\n\n\n\n\n\n\n\n\nIdx\nName\nData Type\n\n\n\n\n* 🔑\npayment_id\ninteger DEFAULT nextval(‘pagila.payment_payment_id_seq’::regclass)\n\n\n* 🔎 ⬈\ncustomer_id\nsmallint\n\n\n* 🔎 ⬈\nstaff_id\nsmallint\n\n\n* ⬈\nrental_id\ninteger\n\n\n*\namount\nnumeric(5,2)\n\n\n*\npayment_date\ntimestamp\n\n\n\n\nForeign Keys\n\n\n\nType\nName\nOn\n\n\n\n\n\npayment_staff_id_fkey\n( staff_id ) ref pagila.staff (staff_id)\n\n\n\npayment_rental_id_fkey\n( rental_id ) ref pagila.rental (rental_id)\n\n\n\npayment_customer_id_fkey\n( customer_id ) ref pagila.customer (customer_id)\n\n\n\nUn paiement (une ligne de payment) concerne une location (un tuple de rental), d’où la contrainte référentielle payment_rental_id_fkey. un paiement concerne ausi un client (tuple de customer) et un employé (tuple de staff)."
  },
  {
    "objectID": "schemas/schema-pagila.html#table-pagila.rental",
    "href": "schemas/schema-pagila.html#table-pagila.rental",
    "title": "Schéma : pagila",
    "section": "Table pagila.rental",
    "text": "Table pagila.rental\n\n\n\n\n\n\n\n\nIdx\nName\nData Type\n\n\n\n\n* 🔑 ⬋\nrental_id\ninteger DEFAULT nextval(‘pagila.rental_rental_id_seq’::regclass)\n\n\n* 🔍\nrental_date\ntimestamp\n\n\n* 🔍 ⬈\ninventory_id\ninteger\n\n\n* 🔍 ⬈\ncustomer_id\nsmallint\n\n\n\nreturn_date\ntimestamp\n\n\n* ⬈\nstaff_id\nsmallint\n\n\n*\nlast_update\ntimestamp DEFAULT now()\n\n\n\n\nForeign Keys\n\n\n\nType\nName\nOn\n\n\n\n\n\nrental_staff_id_fkey\n( staff_id ) ref pagila.staff (staff_id)\n\n\n\nrental_inventory_id_fkey\n( inventory_id ) ref pagila.inventory (inventory_id)\n\n\n\nrental_customer_id_fkey\n( customer_id ) ref pagila.customer (customer_id)"
  },
  {
    "objectID": "schemas/schema-pagila.html#table-pagila.staff",
    "href": "schemas/schema-pagila.html#table-pagila.staff",
    "title": "Schéma : pagila",
    "section": "Table pagila.staff",
    "text": "Table pagila.staff\n\n\n\n\n\n\n\n\nIdx\nName\nData Type\n\n\n\n\n* 🔑 ⬋\nstaff_id\ninteger DEFAULT nextval(‘pagila.staff_staff_id_seq’::regclass)\n\n\n*\nfirst_name\nvarchar(45)\n\n\n*\nlast_name\nvarchar(45)\n\n\n* ⬈\naddress_id\nsmallint\n\n\n\nemail\nvarchar(50)\n\n\n* ⬈\nstore_id\nsmallint\n\n\n*\nactive\nboolean DEFAULT true\n\n\n*\nusername\nvarchar(16)\n\n\n\npassword\nvarchar(40)\n\n\n*\nlast_update\ntimestamp DEFAULT now()\n\n\n\npicture\nbytea\n\n\n\n\nForeign Keys\n\n\n\nType\nName\nOn\n\n\n\n\n\nstaff_store_id_fkey\n( store_id ) ref pagila.store (store_id)\n\n\n\nstaff_address_id_fkey\n( address_id ) ref pagila.address (address_id)"
  },
  {
    "objectID": "schemas/schema-pagila.html#table-pagila.store",
    "href": "schemas/schema-pagila.html#table-pagila.store",
    "title": "Schéma : pagila",
    "section": "Table pagila.store",
    "text": "Table pagila.store\n\n\n\n\n\n\n\n\nIdx\nName\nData Type\n\n\n\n\n* 🔑 ⬋\nstore_id\ninteger DEFAULT nextval(‘pagila.store_store_id_seq’::regclass)\n\n\n* 🔍 ⬈\nmanager_staff_id\nsmallint\n\n\n* ⬈\naddress_id\nsmallint\n\n\n*\nlast_update\ntimestamp DEFAULT now()\n\n\n\n\nForeign Keys\n\n\n\nType\nName\nOn\n\n\n\n\n\nstore_manager_staff_id_fkey\n( manager_staff_id ) ref pagila.staff (staff_id)\n\n\n\nstore_address_id_fkey\n( address_id ) ref pagila.address (address_id)"
  },
  {
    "objectID": "schemas/schema-pagila-address.html",
    "href": "schemas/schema-pagila-address.html",
    "title": "Schéma : pagila (films)",
    "section": "",
    "text": "Présentation de la partie address du schéma pagila, pour l’entrainement à PostGres."
  },
  {
    "objectID": "schemas/schema-pagila-address.html#contexte",
    "href": "schemas/schema-pagila-address.html#contexte",
    "title": "Schéma : pagila (films)",
    "section": "Contexte",
    "text": "Contexte"
  },
  {
    "objectID": "schemas/schema-pagila-address.html#table-pagila.address",
    "href": "schemas/schema-pagila-address.html#table-pagila.address",
    "title": "Schéma : pagila (films)",
    "section": "Table pagila.address",
    "text": "Table pagila.address\n\n\n\n\n\n\n\n\nIdx\nName\nData Type\n\n\n\n\n* 🔑 ⬋\naddress_id\ninteger DEFAULT nextval(‘pagila.address_address_id_seq’::regclass)\n\n\n*\naddress\nvarchar(50)\n\n\n\naddress2\nvarchar(50)\n\n\n*\ndistrict\nvarchar(20)\n\n\n* 🔎 ⬈\ncity_id\nsmallint\n\n\n\npostal_code\nvarchar(10)\n\n\n*\nphone\nvarchar(20)\n\n\n*\nlast_update\ntimestamp DEFAULT now()\n\n\n\n\nForeign Keys\n\n\n\nType\nName\nOn\n\n\n\n\n\naddress_city_id_fkey\n( city_id ) ref pagila.city (city_id)"
  },
  {
    "objectID": "schemas/schema-pagila-address.html#table-pagila.city",
    "href": "schemas/schema-pagila-address.html#table-pagila.city",
    "title": "Schéma : pagila (films)",
    "section": "Table pagila.city",
    "text": "Table pagila.city\n\n\n\n\n\n\n\n\nIdx\nName\nData Type\n\n\n\n\n* 🔑 ⬋\ncity_id\ninteger DEFAULT nextval(‘pagila.city_city_id_seq’::regclass)\n\n\n*\ncity\nvarchar(50)\n\n\n* 🔎 ⬈\ncountry_id\nsmallint\n\n\n*\nlast_update\ntimestamp DEFAULT now()\n\n\n\n\nForeign Keys\n\n\n\nType\nName\nOn\n\n\n\n\n\ncity_country_id_fkey\n( country_id ) ref pagila.country (country_id)"
  },
  {
    "objectID": "schemas/schema-pagila-address.html#table-pagila.country",
    "href": "schemas/schema-pagila-address.html#table-pagila.country",
    "title": "Schéma : pagila (films)",
    "section": "Table pagila.country",
    "text": "Table pagila.country\n\n\n\n\n\n\n\n\nIdx\nName\nData Type\n\n\n\n\n* 🔑 ⬋\ncountry_id\ninteger DEFAULT nextval(‘pagila.country_country_id_seq’::regclass)\n\n\n*\ncountry\nvarchar(50)\n\n\n*\nlast_update\ntimestamp DEFAULT now()"
  },
  {
    "objectID": "schemas/schema-pagila-address.html#table-pagila.customer",
    "href": "schemas/schema-pagila-address.html#table-pagila.customer",
    "title": "Schéma : pagila (films)",
    "section": "Table pagila.customer",
    "text": "Table pagila.customer\n\n\n\n\n\n\n\n\nIdx\nName\nData Type\n\n\n\n\n* 🔑 ⬋\ncustomer_id\ninteger DEFAULT nextval(‘pagila.customer_customer_id_seq’::regclass)\n\n\n* 🔎 ⬈\nstore_id\nsmallint\n\n\n*\nfirst_name\nvarchar(45)\n\n\n* 🔎\nlast_name\nvarchar(45)\n\n\n\nemail\nvarchar(50)\n\n\n* 🔎 ⬈\naddress_id\nsmallint\n\n\n*\nactivebool\nboolean DEFAULT true\n\n\n*\ncreate_date\ndate DEFAULT (‘now’::text)::date\n\n\n\nlast_update\ntimestamp DEFAULT now()\n\n\n\nactive\ninteger\n\n\n\n\nForeign Keys\n\n\n\nType\nName\nOn\n\n\n\n\n\ncustomer_store_id_fkey\n( store_id ) ref pagila.store (store_id)\n\n\n\ncustomer_address_id_fkey\n( address_id ) ref pagila.address (address_id)"
  },
  {
    "objectID": "schemas/schema-pagila-address.html#table-pagila.staff",
    "href": "schemas/schema-pagila-address.html#table-pagila.staff",
    "title": "Schéma : pagila (films)",
    "section": "Table pagila.staff",
    "text": "Table pagila.staff\n\n\n\n\n\n\n\n\nIdx\nName\nData Type\n\n\n\n\n* 🔑 ⬋\nstaff_id\ninteger DEFAULT nextval(‘pagila.staff_staff_id_seq’::regclass)\n\n\n*\nfirst_name\nvarchar(45)\n\n\n*\nlast_name\nvarchar(45)\n\n\n* ⬈\naddress_id\nsmallint\n\n\n\nemail\nvarchar(50)\n\n\n* ⬈\nstore_id\nsmallint\n\n\n*\nactive\nboolean DEFAULT true\n\n\n*\nusername\nvarchar(16)\n\n\n\npassword\nvarchar(40)\n\n\n*\nlast_update\ntimestamp DEFAULT now()\n\n\n\npicture\nbytea\n\n\n\n\nForeign Keys\n\n\n\nType\nName\nOn\n\n\n\n\n\nstaff_store_id_fkey\n( store_id ) ref pagila.store (store_id)\n\n\n\nstaff_address_id_fkey\n( address_id ) ref pagila.address (address_id)"
  },
  {
    "objectID": "schemas/schema-pagila-address.html#table-pagila.store",
    "href": "schemas/schema-pagila-address.html#table-pagila.store",
    "title": "Schéma : pagila (films)",
    "section": "Table pagila.store",
    "text": "Table pagila.store\n\n\n\n\n\n\n\n\nIdx\nName\nData Type\n\n\n\n\n* 🔑 ⬋\nstore_id\ninteger DEFAULT nextval(‘pagila.store_store_id_seq’::regclass)\n\n\n* 🔍 ⬈\nmanager_staff_id\nsmallint\n\n\n* ⬈\naddress_id\nsmallint\n\n\n*\nlast_update\ntimestamp DEFAULT now()\n\n\n\n\nForeign Keys\n\n\n\nType\nName\nOn\n\n\n\n\n\nstore_manager_staff_id_fkey\n( manager_staff_id ) ref pagila.staff (staff_id)\n\n\n\nstore_address_id_fkey\n( address_id ) ref pagila.address (address_id)"
  },
  {
    "objectID": "schemas/schema-dellstore.html",
    "href": "schemas/schema-dellstore.html",
    "title": "Schéma : dellstore",
    "section": "",
    "text": "Présentation du schéma dellstore, pour l’entrainement à PostGres."
  },
  {
    "objectID": "schemas/schema-dellstore.html#contexte",
    "href": "schemas/schema-dellstore.html#contexte",
    "title": "Schéma : dellstore",
    "section": "Contexte",
    "text": "Contexte\nLa base de données du magasin de DVD est gérée par six procédures stockées. Les deux premières sont utilisées pendant la phase de connexion.\nSi le client revient, la procédure Login est utilisée pour récupérer les informations du client, en particulier l’identifiant du client (CUSTOMERID). Si le client est un nouveau client, New_customer est utilisée pour créer une nouvelle ligne dans la table Customers avec les données de l’utilisateur. Après la phase de connexion, le client peut rechercher un DVD par catégorie, acteur ou titre, acteur ou titre. Ces critères sont mis en œuvre par Browse_by_category, Browse_by_actor et Browse_by_title, respectivement. Enfin, une fois que l’utilisateur a fait ses choix, la procédure stockée Purchase est appelée pour terminer la transaction.\nLes procédures stockées de l’application DS2 présentent des caractéristiques qui permettent de mieux modéliser les magasins en ligne d’aujourd’hui.\nLors de la connexion, par exemple, la commande précédente de l’utilisateur (jusqu’à dix titres) est signalée, ainsi que les titres recommandés par d’autres clients qui aiment ces titres.\nLa fonction Parcourir_par_catégorie renvoie les titres de la catégorie spécifiée qui sont actuellement en vente.\nEnfin, la procédure stockée Achat vérifie désormais le champ QUAN_IN_STOCK de la table Inventaire pour voir si un titre est disponible. Cette opération est réalisée à l’aide d’une transaction de base de données,\nde sorte que si la quantité est insuffisante pour honorer la commande, les données QUAN_IN_STOCK ne sont pas mises à jour et un nouvel enregistrement n’est pas écrit dans la base de données. ni un nouvel enregistrement dans la table ORDERS.\nLe schéma de la base de données « dellstore » dans PostgreSQL, utilisée à des fins de formation.\n\nTables :\n\ndellstore.categories : Contient les détails des catégories avec des colonnes comme category (clé primaire) et categoryname. (Action, Animation, Children, …, en tout 16 catégories)\ndellstore.cust_hist : Trace l’historique des clients avec des références aux clients , aux commandes (orders)et aux produits (products), en utilisant des clés étrangères (customerid, (*customers*)orderid, et prod_id).\ndellstore.customers : Stocke les informations sur les clients (customers) avec des champs tels que customerid, firstname, lastname, address, city, et creditcard details.\ndellstore.inventory : Gère l’inventaire des produits en suivant prod_id (clé primaire).\n\nClés étrangères :\n\ndellstore.cust_hist a des références de clés étrangères à d’autres tables comme customers, orders, et products.\n\n\nCe schéma décrit les tables clés utilisées pour une application de type commerce électronique, gérant les catégories, les informations sur les clients et les transactions. Vous souhaitez obtenir une description plus détaillée de certaines tables ou de leurs relations ?\nLes sources du schéma sont décrites sur le site de Dell"
  },
  {
    "objectID": "schemas/schema-dellstore.html#table-dellstore.categories",
    "href": "schemas/schema-dellstore.html#table-dellstore.categories",
    "title": "Schéma : dellstore",
    "section": "Table dellstore.categories",
    "text": "Table dellstore.categories\n\n\n\n\n\n\n\n\nIdx\nName\nData Type\n\n\n\n\n* 🔑 ⬋\ncategory\ninteger DEFAULT nextval(‘dellstore.categories_category_seq’::regclass)\n\n\n*\ncategoryname\nvarchar(50)"
  },
  {
    "objectID": "schemas/schema-dellstore.html#table-dellstore.cust_hist",
    "href": "schemas/schema-dellstore.html#table-dellstore.cust_hist",
    "title": "Schéma : dellstore",
    "section": "Table dellstore.cust_hist",
    "text": "Table dellstore.cust_hist\n\n\n\nIdx\nName\nData Type\n\n\n\n\n* 🔎 ⬈\ncustomerid\ninteger\n\n\n* ⬈\norderid\ninteger\n\n\n* ⬈\nprod_id\ninteger\n\n\n\n\nForeign Keys\n\n\n\nType\nName\nOn\n\n\n\n\n\nfk_cust_hist_customerid\n( customerid ) ref dellstore.customers (customerid)\n\n\n\nfk_cust_hist_orders\n( orderid ) ref dellstore.orders (orderid)\n\n\n\nfk_cust_hist_products\n( prod_id ) ref dellstore.products (prod_id)\n\n\n\n C’est une table raccourci (redondante) dont le contenu peut être reconstruit à l’aide de customers, orders et orderlines?"
  },
  {
    "objectID": "schemas/schema-dellstore.html#table-dellstore.customers",
    "href": "schemas/schema-dellstore.html#table-dellstore.customers",
    "title": "Schéma : dellstore",
    "section": "Table dellstore.customers",
    "text": "Table dellstore.customers\n\n\n\n\n\n\n\n\nIdx\nName\nData Type\n\n\n\n\n* 🔑 ⬋\ncustomerid\ninteger DEFAULT nextval(‘dellstore.customers_customerid_seq’::regclass)\n\n\n*\nfirstname\nvarchar(50)\n\n\n*\nlastname\nvarchar(50)\n\n\n*\naddress1\nvarchar(50)\n\n\n\naddress2\nvarchar(50)\n\n\n*\ncity\nvarchar(50)\n\n\n\nstate\nvarchar(50)\n\n\n\nzip\ninteger\n\n\n*\ncountry\nvarchar(50)\n\n\n*\nregion\nsmallint\n\n\n\nemail\nvarchar(50)\n\n\n\nphone\nvarchar(50)\n\n\n*\ncreditcardtype\ninteger\n\n\n*\ncreditcard\nvarchar(50)\n\n\n*\ncreditcardexpiration\nvarchar(50)\n\n\n* 🔍\nusername\nvarchar(50)\n\n\n*\npassword\nvarchar(50)\n\n\n\nage\nsmallint\n\n\n\nincome\ninteger\n\n\n\ngender\nvarchar(1)"
  },
  {
    "objectID": "schemas/schema-dellstore.html#table-dellstore.inventory",
    "href": "schemas/schema-dellstore.html#table-dellstore.inventory",
    "title": "Schéma : dellstore",
    "section": "Table dellstore.inventory",
    "text": "Table dellstore.inventory\n\n\n\nIdx\nName\nData Type\n\n\n\n\n* 🔑 ⬈\nprod_id\ninteger\n\n\n*\nquan_in_stock\ninteger\n\n\n*\nsales\ninteger\n\n\n\n\nForeign Keys\n\n\n\nType\nName\nOn\n\n\n\n\n\nfk_inventory_products\n( prod_id ) ref dellstore.products (prod_id)\n\n\n\nCette table nous indique l’état du stock pour chaque produit au catalogue, et combien d’exemplaires du produit ont étés vendus."
  },
  {
    "objectID": "schemas/schema-dellstore.html#table-dellstore.orderlines",
    "href": "schemas/schema-dellstore.html#table-dellstore.orderlines",
    "title": "Schéma : dellstore",
    "section": "Table dellstore.orderlines",
    "text": "Table dellstore.orderlines\n\n\n\nIdx\nName\nData Type\n\n\n\n\n* 🔍\norderlineid\ninteger\n\n\n* 🔍 ⬈\norderid\ninteger\n\n\n* ⬈\nprod_id\ninteger\n\n\n*\nquantity\nsmallint\n\n\n*\norderdate\ndate\n\n\n\n\nForeign Keys\n\n\n\nType\nName\nOn\n\n\n\n\n\nfk_orderid\n( orderid ) ref dellstore.orders (orderid)\n\n\n\nfk_orderlines_products\n( prod_id ) ref dellstore.products (prod_id)\n\n\n\nChaque ligne de orderlines nous renseigne sur l’achat d’un produit désigné par prod_id en une certaine quantité , à une certaine date."
  },
  {
    "objectID": "schemas/schema-dellstore.html#table-dellstore.orders",
    "href": "schemas/schema-dellstore.html#table-dellstore.orders",
    "title": "Schéma : dellstore",
    "section": "Table dellstore.orders",
    "text": "Table dellstore.orders\n\n\n\n\n\n\n\n\nIdx\nName\nData Type\n\n\n\n\n* 🔑 ⬋\norderid\ninteger DEFAULT nextval(‘dellstore.orders_orderid_seq’::regclass)\n\n\n*\norderdate\ndate\n\n\n🔎 ⬈\ncustomerid\ninteger\n\n\n*\nnetamount\nnumeric(12,2)\n\n\n*\ntax\nnumeric(12,2)\n\n\n*\ntotalamount\nnumeric(12,2)\n\n\n\n\nForeign Keys\n\n\n\nType\nName\nOn\n\n\n\n\n\nfk_customerid\n( customerid ) ref dellstore.customers (customerid)"
  },
  {
    "objectID": "schemas/schema-dellstore.html#table-dellstore.products",
    "href": "schemas/schema-dellstore.html#table-dellstore.products",
    "title": "Schéma : dellstore",
    "section": "Table dellstore.products",
    "text": "Table dellstore.products\n\n\n\n\n\n\n\n\nIdx\nName\nData Type\n\n\n\n\n* 🔑 ⬋\nprod_id\ninteger DEFAULT nextval(‘dellstore.products_prod_id_seq’::regclass)\n\n\n* 🔎 ⬈\ncategory\ninteger\n\n\n*\ntitle\nvarchar(50)\n\n\n*\nactor\nvarchar(50)\n\n\n*\nprice\nnumeric(12,2)\n\n\n🔎\nspecial\nsmallint\n\n\n*\ncommon_prod_id\ninteger\n\n\n\nUn petit apperçu de la table aide à comprendre :\n+---------+----------+--------------------+------------------+-------+---------+----------------+\n| prod_id | category | title              | actor            | price | special | common_prod_id |\n|---------+----------+--------------------+------------------+-------+---------+----------------|\n| 1       | 14       | ACADEMY ACADEMY    | PENELOPE GUINESS | 25.99 | 0       | 1976           |\n| 2       | 6        | ACADEMY ACE        | EWAN RICKMAN     | 20.99 | 0       | 6289           |\n| 3       | 6        | ACADEMY ADAPTATION | VIVIEN KAHN      | 28.99 | 0       | 7173           |\n| 4       | 3        | ACADEMY AFFAIR     | ALAN MARX        | 14.99 | 0       | 8042           |\n| 5       | 3        | ACADEMY AFRICAN    | CARRIE HANNAH    | 11.99 | 1       | 2183           |\n| 6       | 9        | ACADEMY AGENT      | LISA SPACEK      | 15.99 | 0       | 5243           |\n| 7       | 8        | ACADEMY AIRPLANE   | FRANCES WINFREY  | 25.99 | 0       | 7700           |\n| 8       | 7        | ACADEMY AIRPORT    | FARRAH TOMEI     | 16.99 | 0       | 9191           |\n| 9       | 2        | ACADEMY ALABAMA    | JULIETTE WEAVER  | 10.99 | 0       | 6633           |\n| 10      | 15       | ACADEMY ALADDIN    | ANNETTE FREEMAN  | 9.99  | 0       | 631            |\n+---------+----------+--------------------+------------------+-------+---------+----------------+\nUne ligne représente un DVD fictif. Un DVD contient un film désigné par un titre. Dans ce film apparaît une actrice ou un acteur. Le DVD est vendu au prix price (USD?). Un film/produi relève d’une seule catégorie. - special vaut 1 pour 104 lignes, 0 pour les autes. - common_prod_id ?\n\nForeign Keys\n\n\n\nType\nName\nOn\n\n\n\n\nVir\nfk_products_category\n( category ) ref dellstore.categories (category)"
  },
  {
    "objectID": "schemas/schema-dellstore.html#table-dellstore.reorder",
    "href": "schemas/schema-dellstore.html#table-dellstore.reorder",
    "title": "Schéma : dellstore",
    "section": "Table dellstore.reorder",
    "text": "Table dellstore.reorder\n\n\n\nIdx\nName\nData Type\n\n\n\n\n* ⬈\nprod_id\ninteger\n\n\n*\ndate_low\ndate\n\n\n*\nquan_low\ninteger\n\n\n\ndate_reordered\ndate\n\n\n\nquan_reordered\ninteger\n\n\n\ndate_expected\ndate\n\n\n\n\nForeign Keys\n\n\n\nType\nName\nOn\n\n\n\n\n\nfk_reorder_products\n( prod_id ) ref dellstore.products (prod_id)\n\n\n\n\n\n\n\n\n\nOn peut se demander quel est l’usage de la table reorder.\n\n\n\nLa table reorder gère (peut-être) les réapprovisionements de produits (lorsque l’inventaire inventory signale la quantité en stock d’un produit est dangereusement basse, on effectue une nouvelle commande).\n\nColonnes :\n\nprod_id : un nombre entier identifiant le produit (clé étrangère liée à la table products).\ndate_low : la date à laquelle le niveau de stock a été détecté comme bas.\nquan_low : La quantité qui a déclenché le processus de réapprovisionnement.\ndate_reordered : La date à laquelle le produit a été commandé à nouveau.\nquan_reordered : La quantité du produit commandé à nouveau.\ndate_expected : la date à laquelle les produits commandés à nouveau sont censés arriver.\n\n** Foreign Key ** :\n\nfk_reorder_products : lie prod_id à la table products.\n\n\n Dans l’instance courante du schéma, cette table est vide."
  },
  {
    "objectID": "schemas-listings.html",
    "href": "schemas-listings.html",
    "title": "Schemas",
    "section": "",
    "text": "NoteAvertissement\n\n\n\nPour écrire des requêtes correctes, il est néecessaire de maîtriser le schéma sur lequel on travaille.\n\n\n\n\n   \n    \n    \n      Order By\n      Default\n      \n        Schéma\n      \n      \n        Date - Oldest\n      \n      \n        Date - Newest\n      \n      \n        Tags\n      \n    \n  \n    \n      \n      \n    \n\n\n\n\n\n\nDate\n\n\n\nSchéma\n\n\n\nTags\n\n\n\n\n\n\n\n\nSep 18, 2025\n\n\nWorld\n\n\nworld, crowfoot\n\n\n\n\n\n\nSep 18, 2025\n\n\nBabynames\n\n\nbabynames, INSEE, counts, crowfoot\n\n\n\n\n\n\nSep 18, 2025\n\n\nNYCflights\n\n\nnycflights13, messy data, roles, datetime, star, crowfoot\n\n\n\n\n\n\nSep 18, 2025\n\n\nPagila\n\n\npagila, vues, fonctions\n\n\n\n\n\n\nSep 22, 2025\n\n\nDell DVD Store\n\n\ndellstore, Dell DVD store, crowfoot\n\n\n\n\n\n\nNo matching items",
    "crumbs": [
      "Schemas"
    ]
  },
  {
    "objectID": "project-description.html",
    "href": "project-description.html",
    "title": "Project description",
    "section": "",
    "text": "Topic ideas due Fri, Feb 18\nProposal due Fri, Mar 18\nDraft report due Fri, Apr 8\nPeer review due Fri, Apr 15\nFinal report due Mon, Apr 25\nVideo presentation + slides and final GitHub repo due Thu, Apr 28\nPresentation comments due Sat, Apr 30"
  },
  {
    "objectID": "project-description.html#timeline",
    "href": "project-description.html#timeline",
    "title": "Project description",
    "section": "",
    "text": "Topic ideas due Fri, Feb 18\nProposal due Fri, Mar 18\nDraft report due Fri, Apr 8\nPeer review due Fri, Apr 15\nFinal report due Mon, Apr 25\nVideo presentation + slides and final GitHub repo due Thu, Apr 28\nPresentation comments due Sat, Apr 30"
  },
  {
    "objectID": "project-description.html#introduction",
    "href": "project-description.html#introduction",
    "title": "Project description",
    "section": "Introduction",
    "text": "Introduction\nTL;DR: Pick a data set and do a regression analysis. That is your final project.\nThe goal of the final project is for you to use regression analysis to analyze a data set of your own choosing. The data set may already exist or you may collect your own data by scraping the web.\nChoose the data based on your group’s interests or work you all have done in other courses or research projects. The goal of this project is for you to demonstrate proficiency in the techniques we have covered in this class (and beyond, if you like!) and apply them to a data set to analyze it in a meaningful way.\nAll analyses must be done in RStudio, and all components of the project must be reproducible (with the exception of the presentation).\n\nLogistics\nYou will work on the project with your lab groups.\nThe four primary deliverables for the final project are\n\nA written, reproducible report detailing your analysis\nA GitHub repository corresponding to your report\nSlides + a video presentation\nFormal peer review on another team’s project"
  },
  {
    "objectID": "project-description.html#topic-ideas",
    "href": "project-description.html#topic-ideas",
    "title": "Project description",
    "section": "Topic ideas",
    "text": "Topic ideas\nIdentify 2-3 data sets you’re interested in potentially using for the final project. If you’re unsure where to find data, you can use the list of potential data sources in the Tips + Resources section as a starting point. It may also help to think of topics you’re interested in investigating and find data sets on those topics.\nThe purpose of submitting project ideas is to give you time to find data for the project and to make sure you have a data set that can help you be successful in the project. Therefore, you must use one of the data sets submitted as a topic idea, unless otherwise notified by the teaching team.\nThe data sets should meet the following criteria:\n\nAt least 500 observations\nAt least 10 columns\nAt least 6 of the columns must be useful and unique predictor variables.\n\nIdentifier variables such as “name”, “social security number”, etc. are not useful predictor variables.\nIf you have multiple columns with the same information (e.g. “state abbreviation” and “state name”), then they are not unique predictors.\n\nAt least one variable that can be identified as a reasonable response variable.\n\nThe response variable can be quantitative or categorical.\n\nA mix of quantitative and categorical variables that can be used as predictors.\nObservations should reasonably meet the independence condition. Therefore, avoid data with repeated measures, data collected over time, etc.\nYou may not use data that has previously been used in any course materials, or any derivation of data that has been used in course materials.\n\nPlease ask a member of the teaching team if you’re unsure whether your data set meets the criteria.\nFor each data set, include the following:\n\nIntroduction and data\n\nState the source of the data set.\nDescribe when and how it was originally collected (by the original data curator, not necessarily how you found the data)\nDescribe the observations and the general characteristics being measured in the data\n\n\n\nResearch question\n\nDescribe a research question you’re interested in answering using this data.\n\n\n\nGlimpse of data\n\nUse the glimpse function to provide an overview of each data set\n\nSubmit the PDF of the topic ideas to Gradescope. Mark all pages associated with each data set."
  },
  {
    "objectID": "project-description.html#project-proposal",
    "href": "project-description.html#project-proposal",
    "title": "Project description",
    "section": "Project proposal",
    "text": "Project proposal\nThe purpose of the project proposal is to help you think about your analysis strategy early.\nInclude the following in the proposal:\n\nSection 1 - Introduction\nThe introduction section includes\n\nan introduction to the subject matter you’re investigating\nthe motivation for your research question (citing any relevant literature)\nthe general research question you wish to explore\nyour hypotheses regarding the research question of interest.\n\n\n\nSection 2 - Data description\nIn this section, you will describe the data set you wish to explore. This includes\n\ndescription of the observations in the data set,\ndescription of how the data was originally collected (not how you found the data but how the original curator of the data collected it).\n\n\n\nSection 3 - Analysis approach\nIn this section, you will provide a brief overview of your analysis approach. This includes:\n\nDescription of the response variable.\nVisualization and summary statistics for the response variable.\nList of variables that will be considered as predictors\nRegression model technique (multiple linear regression and logistic regression)\n\n\n\nData dictionary (aka code book)\nSubmit a data dictionary for all the variables in your data set in the README of your project repo, in the data folder. Link to this file from your proposal writeup.\n\n\nSubmission\nPush all of your final changes to the GitHub repo, and submit the PDF of your proposal to Gradescope.\n\n\nProposal grading\n\n\n\nTotal\n10 pts\n\n\n\n\nIntroduction\n3 pts\n\n\nData description\n2 pts\n\n\nAnalysis plan\n4 pts\n\n\nData dictionary\n1 pts\n\n\n\nEach component will be graded as follows:\n\nMeets expectations (full credit): All required elements are completed and are accurate. The narrative is written clearly, all tables and visualizations are nicely formatted, and the work would be presentable in a professional setting.\nClose to expectations (half credit): There are some elements missing and/or inaccurate. There are some issues with formatting.\nDoes not meet expectations (no credit): Major elements missing. Work is not neatly formatted and would not be presentable in a professional setting."
  },
  {
    "objectID": "project-description.html#draft-report",
    "href": "project-description.html#draft-report",
    "title": "Project description",
    "section": "Draft report",
    "text": "Draft report\nThe purpose of the draft and peer review is to give you an opportunity to get early feedback on your analysis. Therefore, the draft and peer review will focus primarily on the exploratory data analysis, modeling, and initial interpretations.\nWrite the draft in the written-report.qmd file in your project repo. You do not need to submit the draft on Gradescope.\nBelow is a brief description of the sections to focus on in the draft:\n\nIntroduction and data\nThis section includes an introduction to the project motivation, data, and research question. Describe the data and definitions of key variables. It should also include some exploratory data analysis. All of the EDA won’t fit in the paper, so focus on the EDA for the response variable and a few other interesting variables and relationships.\n\n\nMethodology\nThis section includes a brief description of your modeling process. Explain the reasoning for the type of model you’re fitting, predictor variables considered for the model including any interactions. Additionally, show how you arrived at the final model by describing the model selection process, any variable transformations (if needed), and any other relevant considerations that were part of the model fitting process.\n\n\nResults\nIn this section, you will output the final model and include a brief discussion of the model assumptions, diagnostics, and any relevant model fit statistics.\nThis section also includes initial interpretations and conclusions drawn from the model."
  },
  {
    "objectID": "project-description.html#peer-review",
    "href": "project-description.html#peer-review",
    "title": "Project description",
    "section": "Peer review",
    "text": "Peer review\nCritically reviewing others’ work is a crucial part of the scientific process, and STA 210 is no exception. Each lab team will be assigned two other teams’s projects to review. Each team should push their draft to their GitHub repo by the due date. One lab in the following week will be dedicated to the peer review, and all reviews will be due by the end of that lab session.\nDuring the peer review process, you will be provided read-only access to your partner teams’ GitHub repos. Provide your review in the form of GitHub issues to your partner team’s GitHub repo using the issue template provided. The peer review will be graded on the extent to which it comprehensively and constructively addresses the components of the partner team’s report: the research context and motivation, exploratory data analysis, modeling, interpretations, and conclusions.\n\nPairings\n\nSection 1 - M 1:45PM - 3:00PM\n\n\n\nTeam being reviewed\nReviewer 1\nReviewer 2\n\n\n\n\nchaa_chaa_chaa\nyay_stats\nstat_over_flow\n\n\ndekk\nchaa_chaa_chaa\nyay_stats\n\n\neight\ndekk\nchaa_chaa_chaa\n\n\nhousecats\neight\ndekk\n\n\nkrafthouse\nhousecats\neight\n\n\nrrawr\nkrafthouse\nhousecats\n\n\nstat_over_flow\nrrawr\nkrafthouse\n\n\nyay_stats\nstat_over_flow\nrrawr\n\n\n\n\n\nSection 2 - M 3:30PM - 4:45PM\n\n\n\nTeam being reviewed\nReviewer 1\nReviewer 2\n\n\n\n\na_plus_plus_plus\nwe_r\ntina\n\n\npredictors\na_plus_plus_plus\nwe_r\n\n\nsixers\npredictors\na_plus_plus_plus\n\n\nsoy_nuggets\nsixers\npredictors\n\n\ntina\nsoy_nuggets\nsixers\n\n\nwe_r\ntina\nsoy_nuggets\n\n\n\n\n\nSection 3 - M 5:15PM - 6:30PM\n\n\n\n\n\n\n\n\nTeam being reviewed\nReviewer 1\nReviewer 2\n\n\n\n\ndown_to_earth_goats\nthe_three_musketeers\nteam_five\n\n\nginger_and_stats\ndown_to_earth_goats\nthe_three_musketeers\n\n\npineapple_wedge_and_diced_papaya\nginger_and_stats\ndown_to_earth_goats\n\n\nstatchelorettes\npineapple_wedge_and_diced_papaya\nginger_and_stats\n\n\nstatisix\nstatchelorettes\npineapple_wedge_and_diced_papaya\n\n\nstats_squad\nstatisix\nstatchelorettes\n\n\nteam_five\nstats_squad\nstatisix\n\n\nthe_three_musketeers\nteam_five\nstats_squad\n\n\n\n\n\n\nProcess and questions\nSpend ~30 mins to review each team’s project.\n\nFind your team name on the Reviewer 1 and Reviewer 2 columns.\nFor each of the columns, find the name of the team to review in the Team being reviewed column. You should already have access to this team’s repo.\nOpen the repo of the team you’re reviewing, read their project draft, and browser around the rest of their repo.\nThen, go to the Issues tab in that repo, click on New issue, and click on Get started for the Peer review issue. Fill out this issue, answering the following questions:\n\nPeer review by: [NAME OF TEAM DOING THE REVIEW]\nNames of team members that participated in this review: [FULL NAMES OF TEAM MEMBERS DOING THE REVIEW]\nDescribe the goal of the project.\nDescribe the data used or collected, if any. If the proposal does not include the use of a specific dataset, comment on whether the project would be strengthened by the inclusion of a dataset.\nDescribe the approaches, tools, and methods that will be used.\nIs there anything that is unclear from the proposal?\nProvide constructive feedback on how the team might be able to improve their project. Make sure your feedback includes at least one comment on the statistical modeling aspect of the project, but do feel free to comment on aspects beyond the modeling.\nWhat aspect of this project are you most interested in and would like to see highlighted in the presentation.\nProvide constructive feedback on any issues with file and/or code organization.\n(Optional) Any further comments or feedback?"
  },
  {
    "objectID": "project-description.html#written-report",
    "href": "project-description.html#written-report",
    "title": "Project description",
    "section": "Written report",
    "text": "Written report\nYour written report must be completed in the written-report.qmd file and must be reproducible. All team members should contribute to the GitHub repository, with regular meaningful commits.\nBefore you finalize your write up, make sure the printing of code chunks is off with the option echo = FALSE.\nYou will submit the PDF of your final report on Gradescope.\nThe PDF you submit must match the files in your GitHub repository exactly. The mandatory components of the report are below. You are free to add additional sections as necessary. The report, including visualizations, should be no more than 10 pages long. is no minimum page requirement; however, you should comprehensively address all of the analysis and report.\nBe selective in what you include in your final write-up. The goal is to write a cohesive narrative that demonstrates a thorough and comprehensive analysis rather than explain every step of the analysis.\nYou are welcome to include an appendix with additional work at the end of the written report document; however, grading will largely be based on the content in the main body of the report. You should assume the reader will not see the material in the appendix unless prompted to view it in the main body of the report. The appendix should be neatly formatted and easy for the reader to navigate. It is not included in the 10-page limit.\nThe written report is worth 40 points, broken down as follows\n\n\n\nTotal\n40 pts\n\n\n\n\nIntroduction/data\n6 pts\n\n\nMethodology\n10 pts\n\n\nResults\n14 pts\n\n\nDiscussion + conclusion\n6 pts\n\n\nOrganization + formatting\n4 pts\n\n\n\nClick here for a PDF of the written report rubric.\n\nIntroduction and data\nThis section includes an introduction to the project motivation, data, and research question. Describe the data and definitions of key variables. It should also include some exploratory data analysis. All of the EDA won’t fit in the paper, so focus on the EDA for the response variable and a few other interesting variables and relationships.\n\nGrading criteria\nThe research question and motivation are clearly stated in the introduction, including citations for the data source and any external research. The data are clearly described, including a description about how the data were originally collected and a concise definition of the variables relevant to understanding the report. The data cleaning process is clearly described, including any decisions made in the process (e.g., creating new variables, removing observations, etc.) The explanatory data analysis helps the reader better understand the observations in the data along with interesting and relevant relationships between the variables. It incorporates appropriate visualizations and summary statistics.\n\n\n\nMethodology\nThis section includes a brief description of your modeling process. Explain the reasoning for the type of model you’re fitting, predictor variables considered for the model including any interactions. Additionally, show how you arrived at the final model by describing the model selection process, interactions considered, variable transformations (if needed), assessment of conditions and diagnostics, and any other relevant considerations that were part of the model fitting process.\n\nGrading criteria\nThe analysis steps are appropriate for the data and research question. The group used a thorough and careful approach to select the final model; the approach is clearly described in the report. The model selection process took into account potential interaction effects and addressed any violations in model conditions. The model conditions and diagnostics are thoroughly and accurately assessed for their model. If violations of model conditions are still present, there was a reasonable attempt to address the violations based on the course content.\n\n\n\nResults\nThis is where you will output the final model with any relevant model fit statistics.\nDescribe the key results from the model. The goal is not to interpret every single variable in the model but rather to show that you are proficient in using the model output to address the research questions, using the interpretations to support your conclusions. Focus on the variables that help you answer the research question and that provide relevant context for the reader.\n\nGrading criteria\nThe model fit is clearly assessed, and interesting findings from the model are clearly described. Interpretations of model coefficients are used to support the key findings and conclusions, rather than merely listing the interpretation of every model coefficient. If the primary modeling objective is prediction, the model’s predictive power is thoroughly assessed.\n\n\n\nDiscussion + Conclusion\nIn this section you’ll include a summary of what you have learned about your research question along with statistical arguments supporting your conclusions. In addition, discuss the limitations of your analysis and provide suggestions on ways the analysis could be improved. Any potential issues pertaining to the reliability and validity of your data and appropriateness of the statistical analysis should also be discussed here. Lastly, this section will include ideas for future work.\n\nGrading criteria\nOverall conclusions from analysis are clearly described, and the model results are put into the larger context of the subject matter and original research question. There is thoughtful consideration of potential limitations of the data and/or analysis, and ideas for future work are clearly described.\n\n\n\nOrganization + formatting\nThis is an assessment of the overall presentation and formatting of the written report.\n\nGrading criteria\nThe report neatly written and organized with clear section headers and appropriately sized figures with informative labels. Numerical results are displayed with a reasonable number of digits, and all visualizations are neatly formatted. All citations and links are properly formatted. If there is an appendix, it is reasonably organized and easy for the reader to find relevant information. All code, warnings, and messages are suppressed. The main body of the written report (not including the appendix) is no longer than 10 pages."
  },
  {
    "objectID": "project-description.html#video-presentation-slides",
    "href": "project-description.html#video-presentation-slides",
    "title": "Project description",
    "section": "Video presentation + slides",
    "text": "Video presentation + slides\n\nSlides\nIn addition to the written report, your team will also create presentation slides and record a video presentation that summarize and showcase your project. Introduce your research question and data set, showcase visualizations, and discuss the primary conclusions. These slides should serve as a brief visual addition to your written report and will be graded for content and quality.\nFor submission, convert these slides to a .pdf document, and submit the PDF of the slides on Gradescope.\nThe slide deck should have no more than 6 content slides + 1 title slide. Here is a suggested outline as you think through the slides; you do not have to use this exact format for the 6 slides.\n\nTitle Slide\nSlide 1: Introduce the topic and motivation\nSlide 2: Introduce the data\nSlide 3: Highlights from EDA\nSlide 4: Final model\nSlide 5: Interesting findings from the model\nSlide 6: Conclusions + future work\n\n\n\nVideo presentation\nFor the video presentation, you can speak over your slide deck, similar to the lecture content videos. The video presentation must be no longer than 8 minutes. It is fine if the video is shorter than 8 minutes, but it cannot exceed 8 minutes. You may use can use any platform that works best for your group to record your presentation. Below are a few resources on recording videos:\n\nRecording presentations in Zoom\nApple Quicktime for screen recording\nWindows 10 built-in screen recording functionality\nKap for screen recording\n\nOnce your video is ready, upload the video to Warpwire, then embed the video in an new discussion post on Conversations.\n\nTo upload your video to Warpwire:\n\nClick the Warpwire tab in the course Sakai site.\nClick the “+” and select “Upload files”.\nLocate the video on your computer and click to upload.\nOnce you’ve uploaded the video to Warpwire, click to share the video and copy the video’s URL. You will need this when you post the video in the discussion forum.\n\n\n\nTo post the video to the discussion forum\n\nClick the Presentations tab in the course Sakai site.\nClick the Presentations topic.\nClick “Start a new conversation”.\nMake the title “Your Team Name: Project Title”. For example, “Teaching Team: Our Awesome Presentation”.\nClick the Warpwire icon (between the table and shopping cart icons).\nSelect your video, then click “Insert 1 item.” This will embed your video in the conversation.\nUnder the video, paste the URL to your video.\nYou’re done!"
  },
  {
    "objectID": "project-description.html#presentation-comments",
    "href": "project-description.html#presentation-comments",
    "title": "Project description",
    "section": "Presentation comments",
    "text": "Presentation comments\nEach student will be assigned 2 presentations to watch. Your viewing assignments will be posted later in the semester.\nWatch the group’s video, then click “Reply” to post a question for the group. You may not post a question that’s already been asked on the discussion thread. Additionally, the question should be (i) substantive (i.e. it shouldn’t be “Why did you use a bar plot instead of a pie chart”?), (ii) demonstrate your understanding of the content from the course, and (iii) relevant to that group’s specific presentation, i.e demonstrating that you’ve watched the presentation.\nThis portion of the project will be assessed individually.\n\nPairings\nFind your team name in the first column, watch videos from teams in the second column and leave comments.\n\n\n\n\n\n\n\n\nReviewer\nFirst video to review\nSecond video to review\n\n\n\n\nGinger and Stats\nEight\nWe R\n\n\nKrafthouse\nGinger and Stats\nEight\n\n\nSoy Nuggets\nKrafthouse\nGinger and Stats\n\n\nDown To Earth Goats\nSoy Nuggets\nKrafthouse\n\n\nA+++\nDown To Earth Goats\nSoy Nuggets\n\n\nTeam Five\nA+++\nDown To Earth Goats\n\n\nRrawr\nTeam Five\nA+++\n\n\nHousecats\nRrawr\nTeam Five\n\n\nDekk\nHousecats\nRrawr\n\n\nStat OverFlow\nDekk\nHousecats\n\n\nThe Three Musketeers\nStat OverFlow\nDekk\n\n\nPredictors\nThe Three Musketeers\nStat OverFlow\n\n\nStats Squad\nPredictors\nThe Three Musketeers\n\n\nStatisix\nStats Squad\nPredictors\n\n\nSixers\nStatisix\nStats Squad\n\n\nYay Stats\nSixers\nStatisix\n\n\nTINA\nYay Stats\nSixers\n\n\nStatchelorettes\nTINA\nYay Stats\n\n\nPineapple Wedge and Diced Papaya\nStatchelorettes\nTINA\n\n\nChaa Chaa Chaa\nPineapple Wedge and Diced Papaya\nStatchelorettes\n\n\nWe R\nChaa Chaa Chaa\nPineapple Wedge and Diced Papaya\n\n\nEight\nWe R\nChaa Chaa Chaa"
  },
  {
    "objectID": "project-description.html#reproducibility-organization",
    "href": "project-description.html#reproducibility-organization",
    "title": "Project description",
    "section": "Reproducibility + organization",
    "text": "Reproducibility + organization\nAll written work (with exception of presentation slides) should be reproducible, and the GitHub repo should be neatly organized.\nThe GitHub repo should have the following structure:\n\nREADME: Short project description and data dictionary\nwritten-report.qmd & written-report.pdf: Final written report\n/data: Folder that contains the data set for the final project.\n/previous-work: Folder that contains the topic-ideas and project-proposal files.\n/presentation: Folder with the presentation slides.\n\nIf your presentation slides are online, you can put a link to the slides in a README.md file in the presentation folder.\n\n\nPoints for reproducibility + organization will be based on the reproducibility of the written report and the organization of the project GitHub repo. The repo should be neatly organized as described above, there should be no extraneous files, all text in the README should be easily readable."
  },
  {
    "objectID": "project-description.html#peer-teamwork-evaluation",
    "href": "project-description.html#peer-teamwork-evaluation",
    "title": "Project description",
    "section": "Peer teamwork evaluation",
    "text": "Peer teamwork evaluation\nYou will be asked to fill out a survey where you rate the contribution and teamwork of each team member by assigning a contribution percentage for each team member. Filling out the survey is a prerequisite for getting credit on the team member evaluation. If you are suggesting that an individual did less than half the expected contribution given your team size (e.g., for a team of four students, if a student contributed less than 12.5% of the total effort), please provide some explanation. If any individual gets an average peer score indicating that this was the case, their grade will be assessed accordingly.\nIf you have concerns with the teamwork and/or contribution from any team members, please email me by the project video deadline. You only need to email me if you have concerns. Otherwise, I will assume everyone on the team equally contributed and will receive full credit for the teamwork portion of the grade."
  },
  {
    "objectID": "project-description.html#overall-grading",
    "href": "project-description.html#overall-grading",
    "title": "Project description",
    "section": "Overall grading",
    "text": "Overall grading\nThe grade breakdown is as follows:\n\n\n\nTotal\n100 pts\n\n\n\n\nTopic ideas\n5 pts\n\n\nProject proposal\n10 pts\n\n\nPeer review\n10 pts\n\n\nWritten report\n40 pts\n\n\nSlides + video presentation\n20 pts\n\n\nReproducibility + organization\n5 pts\n\n\nVideo comments\n5 pts\n\n\nPeer teamwork evaluation\n5 pts\n\n\n\nNote: No late project reports or videos are accepted.\n\nGrading summary\nGrading of the project will take into account the following:\n\nContent - What is the quality of research and/or policy question and relevancy of data to those questions?\nCorrectness - Are statistical procedures carried out and explained correctly?\nWriting and Presentation - What is the quality of the statistical presentation, writing, and explanations?\nCreativity and Critical Thought - Is the project carefully thought out? Are the limitations carefully considered? Does it appear that time and effort went into the planning and implementation of the project?\n\nA general breakdown of scoring is as follows:\n\n90%-100%: Outstanding effort. Student understands how to apply all statistical concepts, can put the results into a cogent argument, can identify weaknesses in the argument, and can clearly communicate the results to others.\n80%-89%: Good effort. Student understands most of the concepts, puts together an adequate argument, identifies some weaknesses of their argument, and communicates most results clearly to others.\n70%-79%: Passing effort. Student has misunderstanding of concepts in several areas, has some trouble putting results together in a cogent argument, and communication of results is sometimes unclear.\n60%-69%: Struggling effort. Student is making some effort, but has misunderstanding of many concepts and is unable to put together a cogent argument. Communication of results is unclear.\nBelow 60%: Student is not making a sufficient effort.\n\n\n\nLate work policy\nThere is no late work accepted on this project. Be sure to turn in your work early to avoid any technological mishaps."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "MA15Y030: Introduction aux Bases de Données",
    "section": "",
    "text": "moodle\n  \n  \n    \n     Github\n  \n\n  \n  \n\n\nCe site contient des informations techniques et le matériel du cours MA15E045: Bases de Données de la Licence MIASHS (L3) de l’Université Paris Cité.\nPour les informations pédagogiques (résumé du cours, références, évaluations), il faut se reporter à la page Moodle : MA15E045: Bases de Données\n\n\n\n\nLe cours s’appuie sur un serveur PostGres dont l’adresse est etu-pgsql.math.univ-paris-diderot.fr.\n\n\n\n\nVous trouverez sur ce site :  - Les clients utilisables - Les diapositives du cours magistral - Les feuilles d’exercices - Les corrigés - Les annales d’examen",
    "crumbs": [
      "Informations générales"
    ]
  },
  {
    "objectID": "cours-equipe.html",
    "href": "cours-equipe.html",
    "title": "Équipe enseignante",
    "section": "",
    "text": "Bertrand Gentou"
  },
  {
    "objectID": "cours-equipe.html#cours",
    "href": "cours-equipe.html#cours",
    "title": "Équipe enseignante",
    "section": "",
    "text": "Bertrand Gentou"
  },
  {
    "objectID": "cours-equipe.html#travaux-dirigés",
    "href": "cours-equipe.html#travaux-dirigés",
    "title": "Équipe enseignante",
    "section": " Travaux dirigés",
    "text": "Travaux dirigés\n\n\n\nNom\nHoraire\nSalle\n\n\n\n\nBertrand Gentou\n\n\n\n\nYves Capdeboscq"
  },
  {
    "objectID": "cours-equipe.html#membres",
    "href": "cours-equipe.html#membres",
    "title": "Équipe enseignante",
    "section": "Membres",
    "text": "Membres\n\n\n\nNom\nAnnées\n\n\n\n\nStéphane Boucheron\n2022-2024\n\n\nAnatole Dahan\n2022\n\n\nAmélie Gheerbrant\n2022\n\n\nSylvain Schmitz\n2023\n\n\nAmine Souiri\n2024\n\n\nCristina Sirangelo\n2024"
  },
  {
    "objectID": "computing-psql.html",
    "href": "computing-psql.html",
    "title": "Client psql",
    "section": "",
    "text": "Note\n\n\n\nQuelques possibilités si vous disposez d’une machine sur laquelle on peut installer psql et sur laquelle on peut établir des tunnels ssh\n\n\n\nInstaller\n\nGénéra\nWindows\nMacOS\nUbuntu\n\nDocumentation\n\n\nUtiliser\n\n\n\n\n\n\nTipÉtablissement d’un tunel SSH sur votre machine (ici sous Linux)\n\n\n\nRemplacer id_ent par votre identifiant ENT dans la suite.\nSaisissez votre mot de passe (attention : pas d’écho)\n$ ssh id_ent@etu-pgsql.math.univ-paris-diderot.fr -L 5436:localhost:5432 -N\n(id_ent@etu-pgsql.math.univ-paris-diderot.fr) Password for id_ent@etu-pgsql.math.univ-paris-diderot.fr:\n$\n\n\n\n\n\n\n\n\nTipConnexion au serveur PostGres, demander la liste des commandes disponibles\n\n\n\nUtilisez votre tunnel SSH pour accéder au serveur PostGres. Dans une autre fenêtre terminal, lancer psql, saisissez à nouveau votre mot de passe.\n$ psql -p 5436 -U id_ent -W -h localhost -d bd_2023-24\nPassword for id_ent: \n\nbd_2023-24=# \\?  \nVous êtes maintenant dans une session sur le serveur PostGres. Vous êtes connecté au catalogue bd_2023-24\nVous pouvez utiliser une grande partie des commandes magiques de psql\n\n\n\n\n\n\n\n\nTipChoisir un schéma par défaut (ici world)\n\n\n\nbd_2023-24=# SET search_path TO world ;\nSET\n\n\n\n\n\n\n\n\nTipLister les tables du schéma par défaut\n\n\n\nbd_2023-24=# \\d\n+--------+-----------------+-------+-----------+\n| Schema | Name            | Type  | Owner     |\n|--------+-----------------+-------+-----------|\n| world  | city            | table | boucheron |\n| world  | country         | table | boucheron |\n| world  | countrylanguage | table | boucheron |\n+--------+-----------------+-------+-----------+\n(3 rows)\n\n\n\n\n\n\n\n\nTipSchéma d’une table\n\n\n\nbd_2023-24=# \\d city\n \n+-------------+--------------+-----------+\n| Column      | Type         | Modifiers |\n|-------------+--------------+-----------|\n| id          | integer      |  not null |\n| name        | text         |  not null |\n| countrycode | character(3) |  not null |\n| district    | text         |  not null |\n| population  | integer      |  not null |\n+-------------+--------------+-----------+\nIndexes:\n    \"city_pkey\" PRIMARY KEY, btree (id)\nForeign-key constraints:\n    \"city_country_fk\" FOREIGN KEY (countrycode) REFERENCES country(countrycode) ON UPDATE CASCADE ON DELETE SET NULL DEFE&gt;\nReferenced by:\n    TABLE \"country\" CONSTRAINT \"country_capital_fkey\" FOREIGN KEY (capital) REFERENCES city(id)\n\n\n\n\n\n\n\n\nTipInformations de connexion\n\n\n\nbd_2023-24=# \\conninfo\nYou are connected to database \"bd_2023-24\" as user \"id_end\" on host \"localhost\"  (address \"127.0.0.1\") at port \"5436\".\n\n\n\n\n\n\n\n\nTipEditer, sauvegarder et exécuter des requêtes\n\n\n\nbd_2023-24=# \\e \n\nSelect an editor.  To change later, run 'select-editor'.\n  1. /bin/nano        &lt;---- easiest\n  2. /usr/bin/vim.basic\n  3. /usr/bin/nvim\n  4. /usr/bin/vim.tiny\n  5. /usr/bin/emacs\n  6. /usr/bin/code\n  7. /bin/ed\nChoose 1-7 [1]: 6\nSous mon éditeur préféré (vs code ici), j’edite une requête\nSELECT ci.name, co.name_country\nFROM \n  world.city ci JOIN \n  world.country co ON (\n    ci.countrycode=co.countrycode AND \n    ci.id = co.capital\n  ) \nORDER BY co.name_country;\nsauvegardée dans un fichier de chemin d’accès /tmp/psql.edit.23866.sql (construit automatiquement)\nDans ma session sur bd_2023-24, je peux maintenant inclure et exécuter cette requête.\nbd_2023-24=# \\i /tmp/psql.edit.23866.sql\n               name                |             name_country              \n-----------------------------------+---------------------------------------\n Kabul                             | Afghanistan\n Tirana                            | Albania\n Alger                             | Algeria\n Fagatogo                          | American Samoa\n Andorra la Vella                  | Andorra\n Luanda                            | Angola\n:\n...\nEntrez q pour sortir du pager\n\n\n\n\n\n\n\n\nTipUn fichier par TP ?\n\n\n\nIl est commode d’archiver le travail d’une séance de TP dans un fichier *.sql. On peut créer les fichiers avant la session ou en cours de session (ici dans un dialecte d’Unix)\nbd_2023-24=# \\! touch tp-x.sql\nbd_2023-24=# -- editer tp-x.sql\nbd_2023-24=# \\e tp-x.sql \nbd_2023-24=# -- charger/exécuter tp-x.sql\nbd_2023-24=# \\i tp-x.sql\n\n\n\n\nRenseignements utiles\nDocumentation psql)",
    "crumbs": [
      "Support",
      "Client psql"
    ]
  },
  {
    "objectID": "computing-pgcli.html",
    "href": "computing-pgcli.html",
    "title": "Client pgcli",
    "section": "",
    "text": "Note\n\n\n\nQuelques possibilités si vous disposez d’une machine sur laquelle on peut installer pgcli et sur laquelle on peut établir des tunnels ssh\n\n\n\nInstaller\nÀ partir de pgcli.com\n\n\nUtiliser\n\n\n\n\n\n\nTipÉtablissement d’un tunel SSH sur votre machine (ici sous Linux)\n\n\n\nRemplacer id_ent par votre identifiant ENT dans la suite.\nSaisissez votre mot de passe (attention : pas d’écho)\n$ ssh  id_ent@etu-pgsql.math.univ-paris-diderot.fr -L 5436:localhost:5432 -N\n(id_ent@etu-pgsql.math.univ-paris-diderot.fr) Password for id_ent@etu-pgsql.math.univ-paris-diderot.fr:\n$\n\n\n\n\n\n\n\n\nTipConnexion au serveur PostGres, demander la liste des commandes disponibles\n\n\n\nUtilisez votre tunnel SSH pour accéder au serveur PostGres.\nDans une autre fenêtre terminal, saisissez à nouveau votre mot de passe.\n$ pgcli -p 5436 -U id_ent -W -h localhost -d bd_2023-24\nPassword for id_ent: \nServer: PostgreSQL 13.8\nVersion: 3.5.0\nHome: http://pgcli.com\nbd_2023-24&gt; \\?  \nVous êtes maintenant dans une session sur le serveur PostGres. Vous êtes connecté au catalogue bd_2023-24\nVous pouvez utiliser une grande partie des commandes magiques de psql\n\n\n\n\n\n\n\n\nTipChoisir un schéma par défaut (ici world)\n\n\n\nbd_2023-24&gt; SET search_path TO world ;\nSET\nTime: 0.002s\n\n\n\n\n\n\n\n\nTipLister les tables du schéma par défaut\n\n\n\nbd_2023-24&gt; \\d\n+--------+-----------------+-------+-----------+\n| Schema | Name            | Type  | Owner     |\n|--------+-----------------+-------+-----------|\n| world  | city            | table | boucheron |\n| world  | country         | table | boucheron |\n| world  | countrylanguage | table | boucheron |\n+--------+-----------------+-------+-----------+\nSELECT 3\nTime: 0.013s\n\n\n\n\n\n\n\n\nTipSchéma d’une table\n\n\n\nbd_2023-24&gt; \\d city\n \n+-------------+--------------+-----------+\n| Column      | Type         | Modifiers |\n|-------------+--------------+-----------|\n| id          | integer      |  not null |\n| name        | text         |  not null |\n| countrycode | character(3) |  not null |\n| district    | text         |  not null |\n| population  | integer      |  not null |\n+-------------+--------------+-----------+\nIndexes:\n    \"city_pkey\" PRIMARY KEY, btree (id)\nForeign-key constraints:\n    \"city_country_fk\" FOREIGN KEY (countrycode) REFERENCES country(countrycode) ON UPDATE CASCADE ON DELETE SET NULL DEFE&gt;\nReferenced by:\n    TABLE \"country\" CONSTRAINT \"country_capital_fkey\" FOREIGN KEY (capital) REFERENCES city(id)\n\nTime: 0.025s\n\n\n\n\n\n\n\n\nTipInformations de connexion\n\n\n\nbd_2023-24&gt; \\conninfo\nYou are connected to database \"bd_2023-24\" as user \"id_end\" on host \"localhost\" at port \"5436\".\nTime: 0.000s\n\n\n\n\n\n\n\n\nTipEditer, sauvegarder et exécuter des requêtes\n\n\n\nbd_2023-24&gt; \\e \n\nSelect an editor.  To change later, run 'select-editor'.\n  1. /bin/nano        &lt;---- easiest\n  2. /usr/bin/vim.basic\n  3. /usr/bin/nvim\n  4. /usr/bin/vim.tiny\n  5. /usr/bin/emacs\n  6. /usr/bin/code\n  7. /bin/ed\nChoose 1-7 [1]: 6\nSous mon éditeur préféré (vs code ici), j’edite une requête\nSELECT *\nFROM world.city ci\nWHERE ci.countrycode='FRA' ;\nsauvegardée dans un fichier de chemin d’accès /tmp/editor-w6qw9gs0.sql\nDans ma session sur bd_2023-24, je peux maintenant inclure et exécuter cette requête.\nbd_2023-24&gt; \\i /tmp/editor-w6qw9gs0.sql\n+------+----------------------+-------------+----------------------+------------+\n| id   | name                 | countrycode | district             | population |\n|------+----------------------+-------------+----------------------+------------|\n| 2974 | Paris                | FRA         | Île-de-France        | 2125246    |\n| 2975 | Marseille            | FRA         | Provence-Alpes-Côte  | 798430     |\n| 2976 | Lyon                 | FRA         | Rhône-Alpes          | 445452     |\n| 2977 | Toulouse             | FRA         | Midi-Pyrénées        | 390350     |\n| 2978 | Nice                 | FRA         | Provence-Alpes-Côte  | 342738     |\n...\n\n\n\n\n\n\n\n\nNoteJetez un oeil sur les named queries\n\n\n\nDocumentation\n\n\n\n\nRenseignements utiles\nDocumentation pgcli",
    "crumbs": [
      "Support",
      "Client pgcli"
    ]
  },
  {
    "objectID": "computing-cloudbeaver.html",
    "href": "computing-cloudbeaver.html",
    "title": "Client CloudBeaver",
    "section": "",
    "text": "Démonstration\nDémo\n\n\nInstaller\n\n\nDocker\n\n\nConfigurer une connexion\n\nOnglet Main\n\nConnect by Host,\n\nHost: localhost,\nPort: 5434 (ou un autre nombre exotique)\nDatabase: bd_2023-24\nDécocher `Show all databases\n\nAuthentification: Database Native\n\nUsername: username (ENT)\nPassword: xxxxxxx (ENT)\nCocher Save password\n\n\n\nOnglet PostgreSQL\nOnglet SSH\n\nCocher Use SSH Tunnel\nSettings\n\nHost/IP: localhost\nPort 22\nUsername: username (ENT)\nPassword: xxxxxxx (ENT)\nCocher Save credentials\n\nJump servers\n\nJump #1 etu-pgsql.math.univ-paris-diderot.fr username Password\nTarget localhost:22 username Password\n\n\n\n\n\nUtiliser une connexion\n\n\nDéfinir et utiliser un projet\n\nConnections\nBookmarks\nDashboards\nDiagrams\nScripts\n\n\n\nÉditeur SQL\n\n\n\n\n\nConnexions ssh (Linux/MacOS)\nPour accéder au serveur Postgres (SGBD), il faut d’abord se connecter à la machine qui héberge ce serveur etu-pgsql.math.univ-paris-diderot.fr.\nPour se connecter à etu-pgsql.math.univ-paris-diderot.fr, on utilise le protocole ssh, avec son identifiant et son mot de passe ENT.\n$ ssh username@etu-pgsql.math.univ-paris-diderot.fr\n(username@etu-pgsql.math.univ-paris-diderot.fr) Password for username@etu-pgsql.math.univ-paris-diderot.fr:\nLast login: ..................\n....\n....\nThis fortune brought to you by:\n$FreeBSD$\n[username@etu-pgsql ~]$ ...\nAttention : pas d’écho lorsque vous saisissez votre mot de passe.\nOn peut maintenant se connecter au serveur Postgres, toujours avec son identifiant et son mot de passe ENT\nIci, nous proposons d’utiliser le client pgcli :\n[username@etu-pgsql ~]$ pgcli -d bd_2023-24 \nPassword for username: \nServer: PostgreSQL 13.8\nVersion: 3.5.0\nHome: http://pgcli.com\nuserame@/tmp:bd_2023-24&gt; \n\n\n\n\n\n\nNotePourquoi préciser -d bd_2023-24 ?\n\n\n\nbd_2023-24 est un des catalogues hébergés par le serveur PostGres. bd_2023-24 contient les schemas sur lesquels nous travaillerons.\n\n\nNous sommes maintenant dans une session du serveur\nusername@/tmp:bd_2023-24&gt; \\conninfo\nYou are connected to database \"bd_2023-24\" as user \"username\" on socket \"/tmp\" at port \"None\".\nTime: 0.000s\nPour obtenir de l’aide, utiliser la commande \\d? et laissez vous guider.\nNous nous intéresserons en général à un ensemble de tables formant un schéma. Ici, nous choisissons comme schéma par défaut world et nous affichons les tables du schéma.\nusername@/tmp:bd_2023-24&gt; set search_path to world ;\nSET\nTime: 0.001s\nusername@/tmp:bd_2023-24&gt; \\dt\n+--------+-----------------+-------+-----------+\n| Schema | Name            | Type  | Owner     |\n|--------+-----------------+-------+-----------|\n| world  | city            | table | boucheron |\n| world  | country         | table | boucheron |\n| world  | countrylanguage | table | boucheron |\n+--------+-----------------+-------+-----------+\nSELECT 3\nTime: 0.011s\nusername@/tmp:bd_2023-24&gt; ...\n\n\nConnexions ssh sous windows\n\n\n\nConnexions ssh avec tunnel\n$ ssh -f username@etu-pgsql.math.univ-paris-diderot.fr -L 5436:localhost:5432 -N\n(username@etu-pgsql.math.univ-paris-diderot.fr) Password for username@etu-pgsql.math.univ-paris-diderot.fr:\n$ \n\n\n\n\n\n\nNoteRenvoi de port -L 5436:localhost:5432\n\n\n\n\n\n\n\n\n\n\n\n\nNotePourquoi -N ?\n\n\n\n\n\n\nOn peut maintenant lancer un client sur sa propre machine (localhost) en précisant qu’on s’adresse au port local 5436 (ou le port que vous choisissez), la requête de conexion au serveur PostGres distant sera transmise par le tunnel : elle sera envoyée sur le port officiel 5432 de la machine distante. Une fois la session établie, tout se passsera comme précédemment (ou presque).\n$ pgcli -d bd_2023-24 -h localhost -p 5436 -u username\nServer: PostgreSQL 13.8\nVersion: 3.5.0\nHome: http://pgcli.com\nbd_2023-24&gt; \\dn\n+----------------+--------------+\n| Name           | Owner        |\n|----------------+--------------|\n...\n...\n\n\nClient dbeaver\nLe mécanisme du tunnel ssh peut être utilisé pour connecter un client plus ambitieux au serveur. Le client dbeaver est particulièrement facile à utiliser."
  },
  {
    "objectID": "computing-access.html",
    "href": "computing-access.html",
    "title": "Moyens de calcul",
    "section": "",
    "text": "Serveur\nLe cours et les TP\n\nServeur PostGreSQL\nMachine dédiée : etu-pgsql.math.univ-paris-diderot.fr\n\n\n\nClients\nEn salle TP, vous pourrez choisir entre trois clients\n\npsql\npgcli\ndbeaver\n\npsql et pgcli sont très proches. Ce sont des applications qui fonctionnent en mode ligne de commande. pgcli est un peu plus conviviale que psql avec un système de complétion plus performant. L’ensemble des commandes spéciales proposées par pgcli est un peu moins vaste que celui proposé par psql\ndbeaver est un client graphique qui ne tombe pas dans le cliquodrome. dbeaver permet d’attaquer une grande famille de SGBDs.\nTous ces clients doivent utiliser des connexions sécurisées ssh.\n\n\nConnexions ssh (Linux/MacOS)\nPour accéder au serveur Postgres (SGBD), il faut d’abord se connecter à la machine qui héberge ce serveur etu-pgsql.math.univ-paris-diderot.fr.\nPour se connecter à etu-pgsql.math.univ-paris-diderot.fr, on utilise le protocole ssh, avec son identifiant et son mot de passe ENT.\n$ ssh username@etu-pgsql.math.univ-paris-diderot.fr\n(username@etu-pgsql.math.univ-paris-diderot.fr) Password for username@etu-pgsql.math.univ-paris-diderot.fr:\nLast login: ..................\n....\n....\nThis fortune brought to you by:\n$FreeBSD$\n[username@etu-pgsql ~]$ ...\nAttention : pas d’écho lorsque vous saisissez votre mot de passe.\nOn peut maintenant se connecter au serveur Postgres, toujours avec son identifiant et son mot de passe ENT\nIci, nous proposons d’utiliser le client pgcli exécuté sur etu-pgsql.math.univ-paris-diderot.fr :\n[username@etu-pgsql ~]$ pgcli -d bd_2023-24 \nPassword for username: \nServer: PostgreSQL 13.8\nVersion: 3.5.0\nHome: http://pgcli.com\nuserame@/tmp:bd_2023-24&gt; \n\n\n\n\n\n\nNotePourquoi préciser -d bd_2023-24 ?\n\n\n\nbd_2023-24 est un des catalogues hébergés par le serveur PostGres. bd_2023-24 contient les schemas sur lesquels nous travaillerons.\n\n\nNous sommes maintenant dans une session du serveur\nusername@/tmp:bd_2023-24&gt; \\conninfo\nYou are connected to database \"bd_2023-24\" as user \"username\" on socket \"/tmp\" at port \"None\".\nTime: 0.000s\nPour obtenir de l’aide, utiliser la commande \\d? et laissez vous guider.\nNous nous intéresserons en général à un ensemble de tables formant un schéma. Ici, nous choisissons comme schéma par défaut world et nous affichons les tables du schéma.\nusername@/tmp:bd_2023-24&gt; set search_path to world ;\nSET\nTime: 0.001s\nusername@/tmp:bd_2023-24&gt; \\dt\n+--------+-----------------+-------+-----------+\n| Schema | Name            | Type  | Owner     |\n|--------+-----------------+-------+-----------|\n| world  | city            | table | boucheron |\n| world  | country         | table | boucheron |\n| world  | countrylanguage | table | boucheron |\n+--------+-----------------+-------+-----------+\nSELECT 3\nTime: 0.011s\nusername@/tmp:bd_2023-24&gt; ...\n\n\n\n\n\n\nImportantPlus pratique\n\n\n\nPour pgcli et psql, il est plus pratique d’exécuter psql et/ou pgcli sur votre machine et de communiquer avec le serveur Postgres via un tunnel ssh. Voir détails pour pgcli et détails pour psql.\n\n\n\n\nConnexions ssh sous windows\nPour accéder au serveur Postgres (SGBD), il faut d’abord se connecter à la machine qui héberge ce serveur etu-pgsql.math.univ-paris-diderot.fr.\nPour se connecter à etu-pgsql.math.univ-paris-diderot.fr, on utilise le protocole ssh, avec son identifiant et son mot de passe ENT.\nOn lance d’abord une fenêtre Powershell.\n$ ssh username@etu-pgsql.math.univ-paris-diderot.fr\n(username@etu-pgsql.math.univ-paris-diderot.fr) Password for username@etu-pgsql.math.univ-paris-diderot.fr:\nLast login: ..................\n....\n....\nThis fortune brought to you by:\n$FreeBSD$\n[username@etu-pgsql ~]$ ...\n Attention : pas d’écho lorsque vous saisissez votre mot de passe.\nOn peut maintenant se connecter au serveur Postgres, toujours avec son identifiant et son mot de passe ENT\nIci, nous proposons d’utiliser le client pgcli :\n[username@etu-pgsql ~]$ pgcli -d bd_2023-24 \nPassword for username: \nServer: PostgreSQL 13.8\nVersion: 3.5.0\nHome: http://pgcli.com\nuserame@/tmp:bd_2023-24&gt; \n\n\n\n\n\n\nNotePourquoi préciser -d bd_2023-24 ?\n\n\n\nbd_2023-24 est un des catalogues hébergés par le serveur PostGres. bd_2023-24 contient les schemas sur lesquels nous travaillerons.\n\n\nNous sommes maintenant dans une session du serveur\nusername@/tmp:bd_2023-24&gt; \\conninfo\nYou are connected to database \"bd_2023-24\" as user \"username\" on socket \"/tmp\" at port \"None\".\nTime: 0.000s\nPour obtenir de l’aide, utiliser la commande \\d? et laissez vous guider.\nNous nous intéresserons en général à un ensemble de tables formant un schéma. Ici, nous choisissons comme schéma par défaut world et nous affichons les tables du schéma.\nusername@/tmp:bd_2023-24&gt; set search_path to world ;\nSET\nTime: 0.001s\nusername@/tmp:bd_2023-24&gt; \\dt\n+--------+-----------------+-------+-----------+\n| Schema | Name            | Type  | Owner     |\n|--------+-----------------+-------+-----------|\n| world  | city            | table | boucheron |\n| world  | country         | table | boucheron |\n| world  | countrylanguage | table | boucheron |\n+--------+-----------------+-------+-----------+\nSELECT 3\nTime: 0.011s\nusername@/tmp:bd_2023-24&gt; ...\n\n\nConnexions ssh avec tunnel\nVous avez pu constater que les connexions ssh sous MacOS, Linux et Windows sont presque identiques.\nMais utiliser une connexion ssh et un client base de données qui s’exécute sur etu-pgsql.math.univ-paris-diderot.fr n’est pas la manière la plus confortable de travailler.\nIl est plus agréable d’utiliser un client base de données qui s’exécute sur sa propre machine (en local) et qui interagit avec le serveur PostGres au travers d’un tunnel ssh.\nLa commande suivante établit un tunnel en tâche de fond (background job) grâce à l’option -f\n$ ssh -f username@etu-pgsql.math.univ-paris-diderot.fr -L 5436:localhost:5432 -N\n(username@etu-pgsql.math.univ-paris-diderot.fr) Password for username@etu-pgsql.math.univ-paris-diderot.fr:\n$ \nUne fois le tunnel établi, on peut continuer d’utiliser la fenêtre terminal, par exemple pour lancer pgcli ou psql.\nLa commande suivante établit aussi un tunnel mais en tâche de premier plan.\n$ ssh username@etu-pgsql.math.univ-paris-diderot.fr -L 5436:localhost:5432 -N\n(username@etu-pgsql.math.univ-paris-diderot.fr) Password for username@etu-pgsql.math.univ-paris-diderot.fr:\n$ \nUne fois le tunnel établi, la fenêtre terminal est bloquée. Si on veut lancer pgcli ou psql, il faut disposer d’une autre fenêtre.\n\n\n\n\n\n\nNoteTunnel en tâche de fond ou pas ?\n\n\n\nLe lancement du tunnel en tâche de premier plan peut paraître moins pratique que le lancement du tunnel en tâche de fond.\nIl présente un avantage : lorsque le tunnel cesse de fonctionner (en général parce qu’on ne s’en est pas servi depuis quelques minutes), il faut termniner (tuer) le processus qui contrôle le tunnel, pour pouvoir récupérer l’usage du port local ; si le tunnel est contrôlé par une tache de premier plan, c’est trivial (^C sous Unix), si le tunnel est contrôlé par une tâche de fond, il faut déterminer le processus contrôleur, puis le terminer explicitement ($ kill -9 pid).\n\n\n\n\n\n\n\n\nNoteRenvoi de port -L 5436:localhost:5432\n\n\n\nUn serveur PostGres écoute (attend) d’éventuels clients sur le port officiel 5432. Le serveur que nous utiliserons attend effectivement ses clients sur le port 5432 de la machine qui l’héberge. Notre client local ne va pas s’adresser directement au port 5432 de etu-pgsql.math.univ-paris-diderot.fr (c’est interdit). Notre client local s’adressera au port 5436 de la machine qui héberge le client et qui est lui-même renvoyé via le tunnel ssh vers le port 5432 de la machine qui héberge le serveur.\n\n\nOn peut maintenant lancer un client sur sa propre machine (localhost) en précisant qu’on s’adresse au port local 5436 (ou le port que vous choisissez), la requête de conexion au serveur PostGres distant sera transmise par le tunnel : elle sera envoyée sur le port officiel 5432 de la machine distante. Une fois la session établie, tout se passsera comme précédemment (ou presque).\n$ pgcli -d bd_2023-24 -h localhost -p 5436 -u username -W\nServer: PostgreSQL 13.8\nVersion: 3.5.0\nHome: http://pgcli.com\nbd_2023-24&gt; \\dn\n+----------------+--------------+\n| Name           | Owner        |\n|----------------+--------------|\n...\n...\n\n\nClient dbeaver\nLe mécanisme du tunnel ssh peut être utilisé pour connecter un client plus ambitieux au serveur. Le client dbeaver est particulièrement facile à utiliser.\n\n\nClient VS Code + extensions SQLTools\nSi vous êtes déjà habitué à l’éditeur Visual Studio Code (VS Code), vous pouvez utiliser l’extension SQLToos et son pilote ‘PostgreSQL/Cockroach’.\nVotre configuration de connexion devrait ressembler à :\n{\n  \"label\": \"etu-pgsql\",\n  \"host\": \"localhost\",\n  \"user\": \"&lt;identifiant ENT&gt;\",\n  \"port\": 5436,\n  \"ssl\": false,\n  \"database\": \"bd_2023-24\",\n  \"schema\": \"world\",\n  \"password\": \"Ask on connect\"\n}\nIl faut par ailleurs ouvrir un tunnel SSH dans un terminal\n$ ssh  username@etu-pgsql.math.univ-paris-diderot.fr -L 5436:localhost:5432 -N\n(username@etu-pgsql.math.univ-paris-diderot.fr) Password for username@etu-pgsql.math.univ-paris-diderot.fr:\n$ \nen remplaçant username par votre identifiant ENT.",
    "crumbs": [
      "Support",
      "Accès Informatique"
    ]
  },
  {
    "objectID": "computing-dbeaver.html",
    "href": "computing-dbeaver.html",
    "title": "Client dbeaver",
    "section": "",
    "text": "À partir de Dbeaver community edition",
    "crumbs": [
      "Support",
      "Client dbeaver"
    ]
  },
  {
    "objectID": "computing-dbeaver.html#connections",
    "href": "computing-dbeaver.html#connections",
    "title": "Client dbeaver",
    "section": "Connections",
    "text": "Connections\nVous devrez créer une connection avec le serveur au sein de votre projet. Vous pouvez en créer d’autres avec d’autres serveurs, possiblement un serveur PostGres hébergé sur votre propre machine.",
    "crumbs": [
      "Support",
      "Client dbeaver"
    ]
  },
  {
    "objectID": "computing-dbeaver.html#bookmarkssignets",
    "href": "computing-dbeaver.html#bookmarkssignets",
    "title": "Client dbeaver",
    "section": "Bookmarks/Signets",
    "text": "Bookmarks/Signets\nDocumentation sur les signets\n\n\n\n\n\n\nTip\n\n\n\nVous pouvez créer des signets pour retrouver facilement les schémas sur lesquels vous travaillez, ou avez travaillé.",
    "crumbs": [
      "Support",
      "Client dbeaver"
    ]
  },
  {
    "objectID": "computing-dbeaver.html#diagrammes-er",
    "href": "computing-dbeaver.html#diagrammes-er",
    "title": "Client dbeaver",
    "section": "Diagrammes ER",
    "text": "Diagrammes ER\ndbeaver permet de faire un peu de rétro-ingénieurie et de visualiser (partiellement) un schéma. Outil utile quand on veut retoucher un schéma ou simplement le comprendre.",
    "crumbs": [
      "Support",
      "Client dbeaver"
    ]
  },
  {
    "objectID": "computing-dbeaver.html#scripts",
    "href": "computing-dbeaver.html#scripts",
    "title": "Client dbeaver",
    "section": "Scripts",
    "text": "Scripts\n\nUn script pour chaque séance de TD/TP\nNommer le script de façon utile (avec rename)\nCommenter le script\nSéparer les requêtes par des lignes blanches et une ligne de commentaire blanche --\nUtiliser le reformattage pour rendre votre code plus lisible",
    "crumbs": [
      "Support",
      "Client dbeaver"
    ]
  },
  {
    "objectID": "computing-pipelines.html",
    "href": "computing-pipelines.html",
    "title": "Pipelines",
    "section": "",
    "text": "Interroger une base de données avec R (via ODBC)\n\n\nInterroger une base de données avec Python (via ODBC)"
  },
  {
    "objectID": "corriges-tds.html",
    "href": "corriges-tds.html",
    "title": "Corrigés",
    "section": "",
    "text": "Note\n\n\n\n Ne vous précipitez pas sur les propositions de corrections avant d’avoir tenté par vous-même de réaliser les exercices.\n\n\n\n\n   \n    \n    \n      Order By\n      Default\n      \n        Titre\n      \n      \n        Date - Oldest\n      \n      \n        Date - Newest\n      \n      \n        Description\n      \n    \n  \n    \n      \n      \n    \n\n\n\n\n\n\nDate\n\n\n\nTitre\n\n\n\nDescription\n\n\n\n\n\n\n\n\nSep 19, 2025\n\n\nTD 1 2025-26\n\n\nRequêtes, SQL\n\n\n\n\n\n\nSep 26, 2025\n\n\nTD 2 2025-26\n\n\nRequêtes, SQL\n\n\n\n\n\n\nOct 3, 2025\n\n\nTD 3 2025-26\n\n\nRequêtes, SQL\n\n\n\n\n\n\nOct 10, 2025\n\n\nTD 4 2025-26\n\n\nRequêtes, Aggrégation, Fenêtres\n\n\n\n\n\n\nOct 17, 2025\n\n\nTD 5 2025-26\n\n\nRequêtes Aggrégation, Fenêtres\n\n\n\n\n\n\nOct 24, 2025\n\n\nTD 6 2025-26\n\n\nContraintes\n\n\n\n\n\n\nNov 7, 2025\n\n\nTD 7 2025-26\n\n\nContraintes\n\n\n\n\n\n\nNov 14, 2025\n\n\nTD 8 2025-26\n\n\nModélisation\n\n\n\n\n\n\nNov 21, 2025\n\n\nTD 9 2025-26\n\n\nModélisation\n\n\n\n\n\n\nNov 28, 2025\n\n\nTD 10 2025-26\n\n\nNormalisation\n\n\n\n\n\n\nDec 5, 2025\n\n\nTD 11 2025-26\n\n\nNormalisation\n\n\n\n\n\n\nNo matching items\n\n\n\n\n\n\n\nNote\n\n\n\n Les corrigés ne sont que des propositions. Il est très possible que vous ayez en tête des solutions différentes des propositions et que vos propositions soient correctes.\n Pour lever les doutes, comparer les résultats de vos requêtes et de celles proposées dans les solutions. Avec ... EXCEPT ... vous devriez y voir clair."
  },
  {
    "objectID": "exams-listings.html",
    "href": "exams-listings.html",
    "title": "Annales",
    "section": "",
    "text": "Note\n\n\n\nLes annales recueillent les sujets de contrôle continu (CC) et de contrôle terminal (CT) des années universitaires 2022-23 et 2023-24.\nLes sujets sont partiellement corrigés.\n\n\n\n\n   \n    \n    \n      Order By\n      Default\n      \n        Titre\n      \n      \n        Date - Oldest\n      \n      \n        Date - Newest\n      \n      \n        Description\n      \n    \n  \n    \n      \n      \n    \n\n\n\n\n\n\nDate\n\n\n\nTitre\n\n\n\nDescription\n\n\n\n\n\n\n\n\nJun 6, 2025\n\n\nCT 2 2024-25\n\n\nModélisation, Entité-Association, Pattes de corbeaux, Requêtes, Dépendances fonctionnelles, Normalisation\n\n\n\n\n\n\nJan 6, 2025\n\n\nCT 1 2024-25\n\n\nModélisation, Entité-Association, Pattes de corbeaux, Requêtes, Dépendances fonctionnelles, Normalisation\n\n\n\n\n\n\nDec 13, 2024\n\n\nCC 3 2024-25\n\n\nModélisation, Entité-Association, Pattes de corbeaux, Requêtes, Dépendances fonctionnelles\n\n\n\n\n\n\nNov 15, 2024\n\n\nCC 2 2024-25\n\n\nRequêtes, Aggrégation, Fenêtres, pagila, world\n\n\n\n\n\n\nOct 25, 2024\n\n\nCC 1 2024-25\n\n\nRequêtes simples, Aggrégation, pagila\n\n\n\n\n\n\nJun 19, 2024\n\n\nCT 2 2023-24\n\n\nRequêtes Aggrégation, Fenêtres, nycflights\n\n\n\n\n\n\nJan 8, 2024\n\n\nCT 1 2023-24\n\n\nModélisation, Normalisation, Requêtes Aggrégation, Fenêtres, nycflights\n\n\n\n\n\n\nDec 8, 2023\n\n\nCC 3 2023-24\n\n\nModélisation, Aggrégation, Fenêtres, French-Towns\n\n\n\n\n\n\nNov 24, 2023\n\n\nCC 2 2023-24\n\n\nAggrégation, Fenêtres, world\n\n\n\n\n\n\nOct 27, 2023\n\n\nCC 1 2023-24\n\n\nRequêtes, world\n\n\n\n\n\n\nNov 25, 2022\n\n\nCC 2 2022-23\n\n\nAggrégation, Fenêtres, nycflights, babynames\n\n\n\n\n\n\nNov 13, 2022\n\n\nCC 3-4 2022-23\n\n\nAggrégation, Fenêtres, nycflights\n\n\n\n\n\n\nNov 3, 2022\n\n\nCC 3-3 2022-23\n\n\nAggrégation, Fenêtres, nycflights\n\n\n\n\n\n\nOct 21, 2022\n\n\nCC 3-2 2022-23\n\n\nAggrégation, Fenêtres, babynames\n\n\n\n\n\n\nOct 14, 2022\n\n\nCC 3-1 2022-23\n\n\nAggrégation, Fenêtres, world\n\n\n\n\n\n\nNo matching items\n\n\n\n\n\n\n\nCaution\n\n\n\nLe contrôle continu 3 (CC3) de l’année 2022-23 est formé d’une suite de devoirs à réaliser à la maison entre deux séances de TD.\nLes contrôles continus 1 et 2 (CC1 et CC2) de l’année 2022-23 se déroulaient en salle de TP sur machines.\nTous les autres contrôles consistaient en épreuves sur table de 1 heure, 1 heure 30 ou 2 heures.",
    "crumbs": [
      "Annales"
    ]
  },
  {
    "objectID": "journal-listings.html",
    "href": "journal-listings.html",
    "title": "Journal",
    "section": "",
    "text": "Le journal décrit la progression du cours et des séances d’exercice.\n\n\n   \n    \n    \n      Order By\n      Default\n      \n        Titre\n      \n      \n        Date - Oldest\n      \n      \n        Date - Newest\n      \n      \n        Categories\n      \n    \n  \n    \n      \n      \n    \n\n\n\n\n\n\nDate\n\n\n\nTitre\n\n\n\nCategories\n\n\n\n\n\n\n\n\nSep 8, 2025\n\n\nSemaine 1\n\n\nworld, Algèbre relationnelle\n\n\n\n\n\n\nSep 15, 2025\n\n\nSemaine 2\n\n\ndellstore, SQL, Interrogation\n\n\n\n\n\n\nSep 22, 2025\n\n\nSemaine 3\n\n\nbabynames, SQL, Interrogation\n\n\n\n\n\n\nSep 29, 2025\n\n\nSemaine 4\n\n\nnycflights13, SQL, Manipulation\n\n\n\n\n\n\nOct 6, 2025\n\n\nSemaine 5\n\n\npagila, SQL, Définition\n\n\n\n\n\n\nNo matching items\n\n\n\n\n\n\n\nNoteMode d’emploi",
    "crumbs": [
      "Journal"
    ]
  },
  {
    "objectID": "project-tips-resources.html",
    "href": "project-tips-resources.html",
    "title": "Project tips + resources",
    "section": "",
    "text": "R Data Sources for Regression Analysis\nFiveThirtyEight data\nTidyTuesday\n\n\n\n\n\nWorld Health Organization\nThe National Bureau of Economic Research\nInternational Monetary Fund\nGeneral Social Survey\nUnited Nations Data\nUnited Nations Statistics Division\nU.K. Data\nU.S. Data\nU.S. Census Data\nEuropean Statistics\nStatistics Canada\nPew Research\nUNICEF\nCDC\nWorld Bank\nElection Studies"
  },
  {
    "objectID": "project-tips-resources.html#data-sources",
    "href": "project-tips-resources.html#data-sources",
    "title": "Project tips + resources",
    "section": "",
    "text": "R Data Sources for Regression Analysis\nFiveThirtyEight data\nTidyTuesday\n\n\n\n\n\nWorld Health Organization\nThe National Bureau of Economic Research\nInternational Monetary Fund\nGeneral Social Survey\nUnited Nations Data\nUnited Nations Statistics Division\nU.K. Data\nU.S. Data\nU.S. Census Data\nEuropean Statistics\nStatistics Canada\nPew Research\nUNICEF\nCDC\nWorld Bank\nElection Studies"
  },
  {
    "objectID": "project-tips-resources.html#tips",
    "href": "project-tips-resources.html#tips",
    "title": "Project tips + resources",
    "section": "Tips",
    "text": "Tips\n\nAsk questions if any of the expectations are unclear.\nCode: In your write up your code should be hidden (echo = FALSE) so that your document is neat and easy to read. However your document should include all your code such that if I re-knit your qmd file I should be able to obtain the results you presented.\n\nException: If you want to highlight something specific about a piece of code, you’re welcome to show that portion.\n\nMerge conflicts will happen, issues will arise, and that’s fine! Commit and push often, and ask questions when stuck.\nMake sure each team member is contributing, both in terms of quality and quantity of contribution (we will be reviewing commits from different team members).\nAll team members are expected to contribute equally to the completion of this assignment and group assessments will be given at its completion - anyone judged to not have sufficient contributed to the final product will have their grade penalized. While different teams members may have different backgrounds and abilities, it is the responsibility of every team member to understand how and why all code and approaches in the assignment works."
  },
  {
    "objectID": "project-tips-resources.html#formatting-communication-tips",
    "href": "project-tips-resources.html#formatting-communication-tips",
    "title": "Project tips + resources",
    "section": "Formatting + communication tips",
    "text": "Formatting + communication tips\n\nSuppress Code, Warnings, & Messages\n\nInclude the following code in a code chunk at the top of your .qmd file to suppress all code, warnings, and other messages. Use the code chunk header {r set-up, include = FALSE} to suppress this set up code.\n\n\n\nHeaders\n\nUse headers to clearly label each section.\nInspect the document outline to review your headers and sub-headers.\n\n\n\nReferences\n\nInclude all references in a section called “References” at the end of the report.\nThis course does not have specific requirements for formatting citations and references.\n\n\n\nAppendix\n\nIf you have additional work that does not fit or does not belong in the body of the report, you may put it at the end of the document in section called “Appendix”.\nThe items in the appendix should be properly labeled.\nThe appendix should only be for additional material. The reader should be able to fully understand your report without viewing content in the appendix.\n\n\n\nResize figures\nResize plots and figures, so you have more space for the narrative.\n\n\nArranging plots\nArrange plots in a grid, instead of one after the other. This is especially useful when displaying plots for exploratory data analysis and to check assumptions.\nIf you’re using ggplot2 functions, the patchwork package makes it easy to arrange plots in a grid. See the documentation and examples here.\n\n\nDo a little more to make the plot look professional!\n\nInformative title and axis labels\nFlipped coordinates to make names readable\nArranged bars based on count\nCapitalized manufacturer names\nOptional: Added color - Use a coordinated color scheme throughout paper / presentation\nOptional: Applied a theme - Use same theme throughout paper / presentation\n\n\n\nTables and model output\n\nUse the kable function from the knitr package to neatly output all tables and model output. This will also ensure all model coefficients are displayed.\n\nUse the digits argument to display only 3 or 4 significant digits.\nUse the caption argument to add captions to your table.\n\n\n\n\nGuidelines for communicating results"
  },
  {
    "objectID": "project-tips-resources.html#additional-resources",
    "href": "project-tips-resources.html#additional-resources",
    "title": "Project tips + resources",
    "section": "Additional resources",
    "text": "Additional resources\n\nR for Data Science\nQuarto Documentation"
  },
  {
    "objectID": "schemas/schema-babynames.html",
    "href": "schemas/schema-babynames.html",
    "title": "Schéma : babynames",
    "section": "",
    "text": "Présentation du schéma babynames, pour l’entrainement à PostGres.\nCe jeu de données est fourni par l’INSEE https://www.insee.fr/fr/statistiques/fichier/2540004/nat2021_csv.zip permet d’étudier l’évolution des prénoms donnés en France entre 1900 et aujourd’hui.\nCe schéma ne comporte qu’une seule table."
  },
  {
    "objectID": "schemas/schema-babynames.html#table-babynames.bebes",
    "href": "schemas/schema-babynames.html#table-babynames.bebes",
    "title": "Schéma : babynames",
    "section": "Table : babynames.bebes",
    "text": "Table : babynames.bebes\n\nsex (entier)\nDescription : Représente le sexe des bébés. Valeurs :\n\n1 pour Homme\n2 pour Femme\n\n\n\nname (varchar(500))\nDescription : Le prénom des bébés nés en France. Type : Chaîne de caractères variable d’une longueur maximale de 500 caractères.\n\n\nyear (nombre entier) :\nDescription : L’année de naissance des bébés ayant reçu un certain prénom. Type : Entier\n\n\ncount (nombre entier) :\nDescription : Nombre de bébés d’un sexe donné, portant un nom particulier, nés au cours d’une année donnée."
  },
  {
    "objectID": "schemas/schema-babynames.html#exemple-de-données",
    "href": "schemas/schema-babynames.html#exemple-de-données",
    "title": "Schéma : babynames",
    "section": "Exemple de données",
    "text": "Exemple de données\n+---+------+-----+-----+\n|sex| name | year|count|\n+---+------+-----+-----+\n| 1 |Liam  | 2020| 350 |\n| 2 |Emma  | 2020| 420 |\n| 1 |Noah  | 2019| 340 |\n| 2 |Olivia| 2019| 390 |"
  },
  {
    "objectID": "schemas/schema-babynames.html#usages",
    "href": "schemas/schema-babynames.html#usages",
    "title": "Schéma : babynames",
    "section": "Usages",
    "text": "Usages\nCet ensemble de données peut être utilisé pour\n\nAnalyser les tendances de popularité : Déterminer les prénoms les plus populaires pour les garçons et les filles au fil du temps.\nSuivre l’évolution des tendances en matière de noms : Comprendre comment certains prénoms gagnent ou perdent en popularité au fil des années.\nAnalyse fondée sur le sexe : Comparer la façon dont certains noms sont spécifiques à un sexe ou partagés par les hommes et les femmes.\nRecherche historique : Explorer les tendances culturelles ou sociétales qui se reflètent dans les conventions de dénomination des bébés."
  },
  {
    "objectID": "schemas/schema-babynames.html#synthèse",
    "href": "schemas/schema-babynames.html#synthèse",
    "title": "Schéma : babynames",
    "section": "Synthèse",
    "text": "Synthèse\n\n\n\nIdx\nName\nData Type\n\n\n\n\n* 🔑\nsex\ninteger\n\n\n* 🔑\nname\nvarchar(500)\n\n\n* 🔑\nyear\ninteger\n\n\n\ncount\ninteger"
  },
  {
    "objectID": "schemas/schema-nycflights.html",
    "href": "schemas/schema-nycflights.html",
    "title": "Schéma : nycflights",
    "section": "",
    "text": "Présentation du schéma nycflights, pour l’entrainement à PostGres.\nCe jeu de données est construit à partir du package  nycflights13."
  },
  {
    "objectID": "schemas/schema-nycflights.html#table-nycflights.airlines",
    "href": "schemas/schema-nycflights.html#table-nycflights.airlines",
    "title": "Schéma : nycflights",
    "section": "Table nycflights.airlines",
    "text": "Table nycflights.airlines\n\n\n\nIdx\nName\nData Type\n\n\n\n\n* 🔑 ⬋\ncarrier\ntext\n\n\n🔍\nname\ntext"
  },
  {
    "objectID": "schemas/schema-nycflights.html#table-nycflights.airports",
    "href": "schemas/schema-nycflights.html#table-nycflights.airports",
    "title": "Schéma : nycflights",
    "section": "Table nycflights.airports",
    "text": "Table nycflights.airports\n\n\n\nIdx\nName\nData Type\n\n\n\n\n* 🔑 ⬋\nfaa\ntext\n\n\n\nname\ntext\n\n\n🔍\nlat\ndouble precision\n\n\n🔍\nlon\ndouble precision\n\n\n\nalt\ndouble precision\n\n\n\ntz\ndouble precision\n\n\n\ndst\ntext\n\n\n\ntzone\ntext"
  },
  {
    "objectID": "schemas/schema-nycflights.html#table-nycflights.flights",
    "href": "schemas/schema-nycflights.html#table-nycflights.flights",
    "title": "Schéma : nycflights",
    "section": "Table nycflights.flights",
    "text": "Table nycflights.flights\n\n\n\nIdx\nName\nData Type\n\n\n\n\n🔍\nyear\ninteger\n\n\n🔍\nmonth\ninteger\n\n\n🔍\nday\ninteger\n\n\n\ndep_time\ninteger\n\n\n\nsched_dep_time\ninteger\n\n\n\ndep_delay\ndouble precision\n\n\n\narr_time\ninteger\n\n\n\nsched_arr_time\ninteger\n\n\n\narr_delay\ndouble precision\n\n\n⬈\ncarrier\ntext\n\n\n\nflight\ninteger\n\n\n🔍 ⬈\ntailnum\ntext\n\n\n* 🔍 ⬈\norigin\ntext\n\n\n🔍 ⬈\ndest\ntext\n\n\n\nair_time\ndouble precision\n\n\n\ndistance\ndouble precision\n\n\n🔍\nhour\ndouble precision\n\n\n🔍\nminute\ndouble precision\n\n\n*\ntime_hour\ntimestamptz\n\n\n\n distance est la distance orthodromique (earth distance) entre origin et dest en miles (pas en miles nautiques). On peut le vérifier avec les fonctions de l’extension earthdistance.\n le vol est effectué si dep_time n’est pas NULL\n dep_time, sched_dep_time, arr_time, sched_arr_time sont construits de la façon\n\nForeign Keys\n\n\n\nType\nName\nOn\n\n\n\n\n\nflights_fk\n( carrier ) ref nycflights.airlines (carrier)\n\n\n\nflights_fk_planes\n( tailnum ) ref nycflights.planes (tailnum)\n\n\n\nflights_fk_origin\n( origin ) ref nycflights.airports (faa)\n\n\n\nflights_fk_dest\n( dest ) ref nycflights.airports (faa)"
  },
  {
    "objectID": "schemas/schema-nycflights.html#table-nycflights.planes",
    "href": "schemas/schema-nycflights.html#table-nycflights.planes",
    "title": "Schéma : nycflights",
    "section": "Table nycflights.planes",
    "text": "Table nycflights.planes\n\n\n\nIdx\nName\nData Type\n\n\n\n\n* 🔑 ⬋\ntailnum\ntext\n\n\n\nyear\ninteger\n\n\n\ntype\ntext\n\n\n\nmanufacturer\ntext\n\n\n\nmodel\ntext\n\n\n\nengines\ninteger\n\n\n\nseats\ninteger\n\n\n\nspeed\ninteger\n\n\n\nengine\ntext"
  },
  {
    "objectID": "schemas/schema-nycflights.html#table-nycflights.weather",
    "href": "schemas/schema-nycflights.html#table-nycflights.weather",
    "title": "Schéma : nycflights",
    "section": "Table nycflights.weather",
    "text": "Table nycflights.weather\n\n\n\nIdx\nName\nData Type\n\n\n\n\n* 🔑 ⬈\norigin\ntext\n\n\n\nyear\ninteger\n\n\n\nmonth\ninteger\n\n\n\nday\ninteger\n\n\n\nhour\ninteger\n\n\n\ntemp\ndouble precision\n\n\n\ndewp\ndouble precision\n\n\n\nhumid\ndouble precision\n\n\n\nwind_dir\ndouble precision\n\n\n\nwind_speed\ndouble precision\n\n\n\nwind_gust\ndouble precision\n\n\n\nprecip\ndouble precision\n\n\n\npressure\ndouble precision\n\n\n\nvisib\ndouble precision\n\n\n* 🔑\ntime_hour\ntimestamptz\n\n\n\n\nForeign Keys\n\n\n\nType\nName\nOn\n\n\n\n\n\nweather_fk\n( origin ) ref nycflights.airports (faa)"
  },
  {
    "objectID": "schemas/schema-pagila-film.html",
    "href": "schemas/schema-pagila-film.html",
    "title": "Schéma : pagila (films)",
    "section": "",
    "text": "Présentation de la partie film du schéma pagila, pour l’entrainement à PostGres."
  },
  {
    "objectID": "schemas/schema-pagila-film.html#contexte",
    "href": "schemas/schema-pagila-film.html#contexte",
    "title": "Schéma : pagila (films)",
    "section": "Contexte",
    "text": "Contexte\nDescription de quelques tables from the pagila database, spécifiquement les tables liées au catalogue de filmss (sans considérer les tables liées au fichier client, à la gestion des locations, aux magasins).\nPagemaison de la base de données pagila.\nPagemaison de la base de données sakila"
  },
  {
    "objectID": "schemas/schema-pagila-film.html#table-pagila.actor",
    "href": "schemas/schema-pagila-film.html#table-pagila.actor",
    "title": "Schéma : pagila (films)",
    "section": "Table pagila.actor",
    "text": "Table pagila.actor\n\n\n\n\n\n\n\n\nIdx\nName\nData Type\n\n\n\n\n* 🔑 ⬋\nactor_id\ninteger DEFAULT nextval(‘pagila.actor_actor_id_seq’::regclass)\n\n\n*\nfirst_name\nvarchar(45)\n\n\n* 🔎\nlast_name\nvarchar(45)\n\n\n*\nlast_update\ntimestamp DEFAULT now()\n\n\n\nactor_id sert de clé primaire. Noter le mécanisme de génération de nouvelles clés grâce au comportment par défaut et à l’usage de la fonction nextval() opérant sur une séquence associée à la table actor.\nLa colonne last_update sert à dater les mises à jour."
  },
  {
    "objectID": "schemas/schema-pagila-film.html#table-pagila.category",
    "href": "schemas/schema-pagila-film.html#table-pagila.category",
    "title": "Schéma : pagila (films)",
    "section": "Table pagila.category",
    "text": "Table pagila.category\n\n\n\n\n\n\n\n\nIdx\nName\nData Type\n\n\n\n\n* 🔑 ⬋\ncategory_id\ninteger DEFAULT nextval(‘pagila.category_category_id_seq’::regclass)\n\n\n*\nname\nvarchar(25)\n\n\n*\nlast_update\ntimestamp DEFAULT now()"
  },
  {
    "objectID": "schemas/schema-pagila-film.html#table-pagila.film",
    "href": "schemas/schema-pagila-film.html#table-pagila.film",
    "title": "Schéma : pagila (films)",
    "section": "Table pagila.film",
    "text": "Table pagila.film\n\n\n\n\n\n\n\n\nIdx\nName\nData Type\n\n\n\n\n* 🔑 ⬋\nfilm_id\ninteger DEFAULT nextval(‘pagila.film_film_id_seq’::regclass)\n\n\n* 🔎\ntitle\nvarchar(255)\n\n\n\ndescription\ntext\n\n\n\nrelease_year\nyear\n\n\n* 🔎 ⬈\nlanguage_id\nsmallint\n\n\n🔎 ⬈\noriginal_language_id\nsmallint\n\n\n*\nrental_duration\nsmallint DEFAULT 3\n\n\n*\nrental_rate\nnumeric(4,2) DEFAULT 4.99\n\n\n\nlength\nsmallint\n\n\n*\nreplacement_cost\nnumeric(5,2) DEFAULT 19.99\n\n\n\nrating\nmpaa_rating DEFAULT ‘G’::pagila.mpaa_rating\n\n\n*\nlast_update\ntimestamp DEFAULT now()\n\n\n\nspecial_features\ntext[]\n\n\n\n\nForeign Keys\n\n\n\nType\nName\nOn\n\n\n\n\n\nfilm_original_language_id_fkey\n( original_language_id ) ref pagila.language (language_id)\n\n\n\nfilm_language_id_fkey\n( language_id ) ref pagila.language (language_id)\n\n\n\nLes colonnes film_id (clé primaire), original_language_id et language_id sont utilisées pour réaliser des (équi)-jointures avec les tables film_actor, film_category, film_language\nUn film est censé n’avoir qu’une seule langue originale. L’association film a pour langue orginale la langue xxx est de un vers plusieurs. On peut la représenter à l’aide d’un attribut dans la table film."
  },
  {
    "objectID": "schemas/schema-pagila-film.html#table-pagila.film_actor",
    "href": "schemas/schema-pagila-film.html#table-pagila.film_actor",
    "title": "Schéma : pagila (films)",
    "section": "Table pagila.film_actor",
    "text": "Table pagila.film_actor\n\n\n\nIdx\nName\nData Type\n\n\n\n\n* 🔑 ⬈\nactor_id\nsmallint\n\n\n* 🔑 ⬈\nfilm_id\nsmallint\n\n\n*\nlast_update\ntimestamp DEFAULT now()\n\n\n\nC’est une table intermédiaire qui permet de représenter/traduire l’association plusieurs à plusieurs acteur joue dans film.\n\nForeign Keys\n\n\n\nType\nName\nOn\n\n\n\n\n\nfilm_actor_film_id_fkey\n( film_id ) ref pagila.film (film_id)\n\n\n\nfilm_actor_actor_id_fkey\n( actor_id ) ref pagila.actor (actor_id)"
  },
  {
    "objectID": "schemas/schema-pagila-film.html#table-pagila.film_category",
    "href": "schemas/schema-pagila-film.html#table-pagila.film_category",
    "title": "Schéma : pagila (films)",
    "section": "Table pagila.film_category",
    "text": "Table pagila.film_category\n\n\n\nIdx\nName\nData Type\n\n\n\n\n* 🔑 ⬈\nfilm_id\nsmallint\n\n\n* 🔑 ⬈\ncategory_id\nsmallint\n\n\n*\nlast_update\ntimestamp DEFAULT now()\n\n\n\n\nForeign Keys\n\n\n\nType\nName\nOn\n\n\n\n\n\nfilm_category_film_id_fkey\n( film_id ) ref pagila.film (film_id)\n\n\n\nfilm_category_category_id_fkey\n( category_id ) ref pagila.category (category_id)\n\n\n\nC’est une table intermédiaire qui permet de représenter/traduire l’association plusieurs à plusieurs film relève de catégorie."
  },
  {
    "objectID": "schemas/schema-pagila-film.html#table-pagila.language",
    "href": "schemas/schema-pagila-film.html#table-pagila.language",
    "title": "Schéma : pagila (films)",
    "section": "Table pagila.language",
    "text": "Table pagila.language\n\n\n\n\n\n\n\n\nIdx\nName\nData Type\n\n\n\n\n* 🔑 ⬋\nlanguage_id\ninteger DEFAULT nextval(‘pagila.language_language_id_seq’::regclass)\n\n\n*\nname\nchar(20)\n\n\n*\nlast_update\ntimestamp DEFAULT now()"
  },
  {
    "objectID": "schemas/schema-world.html",
    "href": "schemas/schema-world.html",
    "title": "Schéma : world",
    "section": "",
    "text": "Présentation du schéma world, pour l’entrainement à PostGres.\nCréé avec DbSchema"
  },
  {
    "objectID": "schemas/schema-world.html#contexte",
    "href": "schemas/schema-world.html#contexte",
    "title": "Schéma : world",
    "section": "Contexte",
    "text": "Contexte\nworld est un schéma formé par trois tables country, city et countrylanguage. Les instances de ce schéma sont censées fournir des données de géographie politique : un état du monde à une date donnée.\nLa table country nous renseigne sur les états reconnus (à l’ONU) et sur des territoires jugés plus ou moins autonomes Dépendances, Territoires non autonomes\nLa table city nous renseigne sur les villes les plus importantes de chaque territoire.\nLatable countrylanguage nous indique quelles langues sont parlées dans quels pas.\nL’instance du schéma utilisée donne une idée du monde au début des années 2000."
  },
  {
    "objectID": "schemas/schema-world.html#diagrammme-en-pattes-de-corbeau-crowfoot",
    "href": "schemas/schema-world.html#diagrammme-en-pattes-de-corbeau-crowfoot",
    "title": "Schéma : world",
    "section": "Diagrammme en pattes de corbeau (crowfoot)",
    "text": "Diagrammme en pattes de corbeau (crowfoot)\nUn diagramme en pattes de corbeau est formé par les tables (pour chaque colonne/attribut, nom et domaine) et des arcs qui décrivent des contraintes référentielles.\n\n\n\nSchéma world en pattes de corbeau"
  },
  {
    "objectID": "schemas/schema-world.html#table-world.country",
    "href": "schemas/schema-world.html#table-world.country",
    "title": "Schéma : world",
    "section": "Table world.country",
    "text": "Table world.country\n\n\n\n\n\n\n\n\n\n\nIdx\nName\nData Type\nDescription\n\n\n\n\n* 🔑 ⬋\ncountrycode\nchar(3)\nCode ISO à 3 symboles\n\n\n*\nname_country\ntext\nNom du territoire en Anglais\n\n\n*\ncontinent\ntext\n\n\n\n*\nregion\ntext\n\n\n\n*\nsurfacearea\nreal\nSurface en Km2\n\n\n\nindepyear\nsmallint\nAnnée de fondation/indépendance\n\n\n*\npopulation_country\ninteger\nNombre d’habitants\n\n\n\nlifeexpectancy\nreal\nEspérance de vie à naissance\n\n\n\ngnp\nnumeric(10,2)\nPIB (en Millions de USD?)\n\n\n\ngnpold\nnumeric(10,2)\n\n\n\n*\nlocalname\ntext\nNom du territoire dans les langues officielles\n\n\n*\ngovernmentform\ntext\nType de régime\n\n\n\nheadofstate\ntext\nChef de l’état\n\n\n⬈\ncapital\ninteger\nIdentifiant (id) de la capitale dans city\n\n\n*\ncode2\nchar(2)\nCode ISO à 2 symboles\n\n\n\ngnp est formé par les initiales de Gross National Product (Produit National Brut), un indicateur de revenu défini par les économistes.\nlifeexpectancy (espérance de vie à la naissance) est un indicateur de santé publique construit par les démographes. Ce n’est pas l’âge moyen au décès.\n\nChaque ligne de country est identifiée par la valeur de countrycode. Cet attribut ne peut pas être NULL. Deux lignes distinctes de country ne peuvent coïncider sur l’attribut countrycode.\nL’attribut countrycode peut être utilisé pour désigner une ligne de la table country. Cette possibilité est utilisée dans les tables city et countrylanguage\nEn jargon, l’attribut countrycode sert de clé primaire à la table country\nUn extrait de la table concernant les pays de région Western Europe permet de comprendre au moins une partie de la signification et des usages des colonnes\n\n\n\n\n\n\n\n\n\n\n\n\n\ncountrycode\ncode2\nname_country\nlocalname\ngovernmentform\nheadofstate\ncapital\n\n\n\n\nNLD\nNL\nNetherlands\nNederland\nConstitutional Monarchy\nBeatrix\n5\n\n\nBEL\nBE\nBelgium\nBelgië/Belgique\nConstitutional Monarchy, Federation\nAlbert II\n179\n\n\nAUT\nAT\nAustria\nÖsterreich\nFederal Republic\nThomas Klestil\n1523\n\n\nLIE\nLI\nLiechtenstein\nLiechtenstein\nConstitutional Monarchy\nHans-Adam II\n2446\n\n\nLUX\nLU\nLuxembourg\nLuxembourg/Lëtzebuerg\nConstitutional Monarchy\nHenri\n2452\n\n\nMCO\nMC\nMonaco\nMonaco\nConstitutional Monarchy\nRainier III\n2695\n\n\nFRA\nFR\nFrance\nFrance\nRepublic\nJacques Chirac\n2974\n\n\nDEU\nDE\nGermany\nDeutschland\nFederal Republic\nJohannes Rau\n3068\n\n\nCHE\nCH\nSwitzerland\nSchweiz/Suisse/Svizzera/Svizra\nFederation\nAdolf Ogi\n3248\n\n\n\n\n\nForeign Keys (clée étrangères)\nLa colonne capital ne contient pas les noms de capitale (il existe des territoires sans capitale), elle contient des entiers (ou NULL) qui renvoient à des lignes dans la table city.\n\n\n\n\nType\nName\nOn\n\n\n\n\n\ncountry_capital_fkey\n( capital ) ref world.city (id)\n\n\n\n\n\n\nConstraints\nLe domaine de la colonne (de l’atttribut) continent est un type énuméré (défini en extension).\n\n\n\n\n\n\n\nName\nDefinition\n\n\n\n\ncountry_continent_check\n((continent = ‘Asia’::text) OR (continent = ‘Europe’::text) OR (continent = ‘North America’::text) OR (continent = ‘Africa’::text) OR (continent = ‘Oceania’::text) OR (continent = ‘Antarctica’::text) OR (continent = ‘South America’::text))"
  },
  {
    "objectID": "schemas/schema-world.html#table-world.city",
    "href": "schemas/schema-world.html#table-world.city",
    "title": "Schéma : world",
    "section": "Table world.city",
    "text": "Table world.city\n\n\n\n\nIdx\nName\nData Type\n\n\n\n\n* 🔑 ⬋\nid\ninteger\n\n\n*\nname\ntext\n\n\n* ⬈\ncountrycode\nchar(3)\n\n\n*\ndistrict\ntext\n\n\n*\npopulation\ninteger\n\n\n\n\nChaque ligne de city est identifiée par la valeur de is. Cet attribut ne peut pas être NULL. Deux lignes distinctes de city ne peuvent coïncider sur l’attribut id.\n\nForeign Keys\nLa colonne countrycode ne contient pas les noms des pays, mais le code à 3 symboles du territoire où se situe la ville\n\n\n\n\nType\nName\nOn\n\n\n\n\n\ncity_country_fk\n( countrycode ) ref world.country (countrycode)\n\n\n\n\nL’extrait suivant correspond au villes du pays nommé France.\n\n\n\nid\nname\ndistrict\npopulation\n\n\n\n\n2974\nParis\nÎle-de-France\n2125246\n\n\n2975\nMarseille\nProvence-Alpes-Côte\n798430\n\n\n2976\nLyon\nRhône-Alpes\n445452\n\n\n2977\nToulouse\nMidi-Pyrénées\n390350\n\n\n2978\nNice\nProvence-Alpes-Côte\n342738\n\n\n2979\nNantes\nPays de la Loire\n270251\n\n\n2980\nStrasbourg\nAlsace\n264115\n\n\n2981\nMontpellier\nLanguedoc-Roussillon\n225392\n\n\n2982\nBordeaux\nAquitaine\n215363\n\n\n2983\nRennes\nHaute-Normandie\n206229\n\n\n2984\nLe Havre\nChampagne-Ardenne\n190905\n\n\n2985\nReims\nNord-Pas-de-Calais\n187206\n\n\n2986\nLille\nRhône-Alpes\n184657\n\n\n2987\nSt-Étienne\nBretagne\n180210\n\n\n2988\nToulon\nProvence-Alpes-Côte\n160639\n\n\n2989\nGrenoble\nRhône-Alpes\n153317\n\n\n2990\nAngers\nPays de la Loire\n151279\n\n\n2991\nDijon\nBourgogne\n149867\n\n\n2992\nBrest\nBretagne\n149634\n\n\n2993\nLe Mans\nPays de la Loire\n146105\n\n\n2994\nClermont-Ferrand\nAuvergne\n137140\n\n\n2995\nAmiens\nPicardie\n135501\n\n\n2996\nAix-en-Provence\nProvence-Alpes-Côte\n134222\n\n\n2997\nLimoges\nLimousin\n133968\n\n\n2998\nNîmes\nLanguedoc-Roussillon\n133424\n\n\n2999\nTours\nCentre\n132820\n\n\n3000\nVilleurbanne\nRhône-Alpes\n124215\n\n\n3001\nMetz\nLorraine\n123776\n\n\n3002\nBesançon\nFranche-Comté\n117733\n\n\n3003\nCaen\nBasse-Normandie\n113987\n\n\n3004\nOrléans\nCentre\n113126\n\n\n3005\nMulhouse\nAlsace\n110359\n\n\n3006\nRouen\nHaute-Normandie\n106592\n\n\n3007\nBoulogne-Billancourt\nÎle-de-France\n106367\n\n\n3008\nPerpignan\nLanguedoc-Roussillon\n105115\n\n\n3009\nNancy\nLorraine\n103605\n\n\n3010\nRoubaix\nNord-Pas-de-Calais\n96984\n\n\n3011\nArgenteuil\nÎle-de-France\n93961\n\n\n3012\nTourcoing\nNord-Pas-de-Calais\n93540\n\n\n3013\nMontreuil\nÎle-de-France\n90674\n\n\n\n\n\n\n\n\n\n La description des tables country et city n’impose pas que la capitale d’un pays soit une ville située dans ce pays.\nEst-ce que cette contrainte devrait être mise en place ?"
  },
  {
    "objectID": "schemas/schema-world.html#table-world.countrylanguage",
    "href": "schemas/schema-world.html#table-world.countrylanguage",
    "title": "Schéma : world",
    "section": "Table world.countrylanguage",
    "text": "Table world.countrylanguage\nLa table countrylanguage nous renseigne sur les langues parlées dans les différents pays.\n\n\n\n\nIdx\nName\nData Type\n\n\n\n\n* 🔑 ⬈\ncountrycode\nchar(3)\n\n\n* 🔑\nlanguage\ntext\n\n\n*\nisofficial\nboolean\n\n\n*\npercentage\nreal\n\n\n\n\nUn extrait correspondant au pays FRA (France) aide à comprendre\n\n\n\n\ncountrycode\nlanguage\nisofficial\npercentage\n\n\n\n\nFRA\nFrench\nt\n93.6\n\n\nFRA\nArabic\nf\n2.5\n\n\nFRA\nPortuguese\nf\n1.2\n\n\nFRA\nItalian\nf\n0.4\n\n\nFRA\nSpanish\nf\n0.4\n\n\nFRA\nTurkish\nf\n0.4\n\n\n\n\nLes lignes nous renseignent sur 6 langues. Une documentation complète serait nécessaire pour vérifier si le percentage correspond à la proportion d’individus qui déclarent telle ou telle langue comme langue maternelle. On ne sait pas si un individu peut déclarer posséder plusieurs langues.\n\n\n\n\n\n\n La documentation d’une base de données ne se réduit pas toujours à un diagramme.\n\n\n\nD’après l’instance du schéma world, la seule langue réputée officielle en France est le français.\n\n\n\n\n\n\n Qu’est ce qu’une langue officielle ?\n\n\n\nDans la table countrylanguage, l’attribut countrycode renvoie à une ligne de country grâce à l’attribut de même nom dans la table country.\n\nForeign Keys\n\n\n\nType\nName\nOn\n\n\n\n\n\ncountrylanguage_countrycode_fkey\n( countrycode ) ref world.country (countrycode)\n\n\n\n\n\n\n\n\n\nDans le schéma world, chaque ligne de countrylanguage est identifiée par les valeurs des colonnes countrycode et language. On parle de clé primaire composée."
  },
  {
    "objectID": "td-listings.html",
    "href": "td-listings.html",
    "title": "Feuilles d’exercices",
    "section": "",
    "text": "Note\n\n\n\nLes feuilles d’exercice forment le matériau de base des TDS et TPS. Vous êtes invités à les lire avant la séance et à réfléchir par vous-même. Ne vous précipitez pas sur les propositions de corrections qui sont disponibles sur ce site\n\n\n\n\n   \n    \n    \n      Order By\n      Default\n      \n        Date - Oldest\n      \n      \n        Date - Newest\n      \n      \n        Titre\n      \n    \n  \n    \n      \n      \n    \n\n\n\n\n\n\nDate\n\n\n\nTitre\n\n\n\nDescription\n\n\n\n\n\n\n\n\nSep 19, 2025\n\n\nTD 1: Algèbre relationnelle\n\n\nLogistique et Algèbre relationnelle\n\n\n\n\n\n\nSep 26, 2025\n\n\nTD 2: SQL\n\n\nSQL Interrogation de données\n\n\n\n\n\n\nOct 3, 2025\n\n\nTD 3: SQL\n\n\nSQL Interrogation de données, requêtes complexes\n\n\n\n\n\n\nOct 10, 2025\n\n\nTD 4: SQL\n\n\nAggrégations, Partitions, Fenêtres\n\n\n\n\n\n\nOct 17, 2025\n\n\nTD 5: SQL\n\n\nFenêtres et fonctions SQL\n\n\n\n\n\n\nOct 24, 2025\n\n\nTD 6 : Contraintes\n\n\nDéfinition de données Contraintes\n\n\n\n\n\n\nNov 7, 2025\n\n\nTD 7 : Contraintes (suite)\n\n\nDéfinition de données et Contraintes\n\n\n\n\n\n\nNov 14, 2025\n\n\nTD 8 : Modélisation\n\n\nModélisation\n\n\n\n\n\n\nNov 21, 2025\n\n\nTD 9: Normalisation et dépendances\n\n\nDépendances fonctionnelles\n\n\n\n\n\n\nNov 28, 2025\n\n\nTD 10: Normalisation\n\n\nNormalisation, Perte de DF, Perte d’Information, FNBC, FN3\n\n\n\n\n\n\nDec 5, 2025\n\n\nTD 11: Normalisation et dépendances\n\n\nNormalisation et dépendances\n\n\n\n\n\n\nDec 12, 2025\n\n\nTD Récapitulatif SQL\n\n\nTD révision générale\n\n\n\n\n\n\nNo matching items\n\n\n\n\n\n\n\nTipConseil\n\n\n\nAvant de travailler sur un exercice, assurez vous que vous maîtrisez/comprenez le schéma relationnel concerné.",
    "crumbs": [
      "Exercices"
    ]
  },
  {
    "objectID": "weeks/week-2.html",
    "href": "weeks/week-2.html",
    "title": "Semaine 2",
    "section": "",
    "text": "Important\n\n\n\n\nCours magistral en Amphi 2 Olympe de Gouges 14h-15h30\nTD/TP 2004-2005-2006 Étage 2 Sophie Germain 15h45-18h15\n Emploi du temps"
  },
  {
    "objectID": "weeks/week-2.html#préparer",
    "href": "weeks/week-2.html#préparer",
    "title": "Semaine 2",
    "section": "Préparer",
    "text": "Préparer\nRequêtes du TD 1 TD 1"
  },
  {
    "objectID": "weeks/week-2.html#cours-magistral-diapositives",
    "href": "weeks/week-2.html#cours-magistral-diapositives",
    "title": "Semaine 2",
    "section": "Cours magistral : diapositives",
    "text": "Cours magistral : diapositives\nReprise de Introduction à l’algèbre relationnelle au  renommage jusqu’à Exemples de requêtes (sans aborder les jointures externes)\nPuis nous aborderons le langage de requêtes SQL dans SQL requêtes élémentaires jusqu’à Syntaxe de la clause WHERE"
  },
  {
    "objectID": "weeks/week-2.html#exercices-tdtp-1",
    "href": "weeks/week-2.html#exercices-tdtp-1",
    "title": "Semaine 2",
    "section": "Exercices : TD/TP 1",
    "text": "Exercices : TD/TP 1\nNous abordons avec les outils de l’algèbre relationnelle et de SQL les questions posées dans le td1 :\nhtml pdf"
  },
  {
    "objectID": "weeks/week-2.html#travail-personnel-optionnel",
    "href": "weeks/week-2.html#travail-personnel-optionnel",
    "title": "Semaine 2",
    "section": "Travail personnel (optionnel)",
    "text": "Travail personnel (optionnel)\n\nEssayer d’installer un client sur votre ordinateur personnel\nEssayez d’établir une connexion ssh entre votre ordinateur personnel et etu-pgsql.math.univ-paris-diderot.fr et depuis cette machine de vous connecter au serveur PostGres (par exemple via psql -d bd_2023-24)\nEssayez d’établir un tunnel ssh entre votre ordinateur personnel et etu-pgsql.math.univ-paris-diderot.fr, puis de vous connecter au serveur PostGres depuis le client installé sur votre machine\n\nEssayer de finir le TD 1\nVous pouvez aussi vous entrainer sur annales :\nCC 1 2023-24\n\n\nretour à Agenda ⏎"
  },
  {
    "objectID": "weeks/week-4.html",
    "href": "weeks/week-4.html",
    "title": "Semaine 4",
    "section": "",
    "text": "Important\n\n\n\n\nCours magistral en Amphi 2 Olympe de Gouges 14h-15h30\nTD/TP Ingémaths/METIS salle 2006 Etage 2 Sophie Germain Jeudi 13h30-16h00\nTD/TP MIASHS salles 2004-2005-2006 Étage 2 Sophie Germain Vendredi 15h45-18h15\n Emploi du temps MIASHS\n Emploi du temps Ingémaths/METIS"
  },
  {
    "objectID": "weeks/week-4.html#préparer",
    "href": "weeks/week-4.html#préparer",
    "title": "Semaine 4",
    "section": "Préparer",
    "text": "Préparer\nFinir requêtes du TD 2 TD 2"
  },
  {
    "objectID": "weeks/week-4.html#cours-magistral-diapositives",
    "href": "weeks/week-4.html#cours-magistral-diapositives",
    "title": "Semaine 4",
    "section": "Cours magistral : diapositives",
    "text": "Cours magistral : diapositives\nSQL Aggrégations/Fenêtres et Partitions"
  },
  {
    "objectID": "weeks/week-4.html#exercices-td-3",
    "href": "weeks/week-4.html#exercices-td-3",
    "title": "Semaine 4",
    "section": "Exercices : TD 3",
    "text": "Exercices : TD 3\nCommencer\n\nEnoncés html pdf\nSolutions html pdf"
  },
  {
    "objectID": "weeks/week-4.html#solutions-du-td-2-semaine-3",
    "href": "weeks/week-4.html#solutions-du-td-2-semaine-3",
    "title": "Semaine 4",
    "section": "Solutions du TD 2 (Semaine 3)",
    "text": "Solutions du TD 2 (Semaine 3)\nhtml pdf\n Construisez des vues à partir de vos requêtes"
  },
  {
    "objectID": "weeks/week-4.html#travail-personnel",
    "href": "weeks/week-4.html#travail-personnel",
    "title": "Semaine 4",
    "section": "Travail personnel ",
    "text": "Travail personnel \nCC 1 2023-24\n\n\nretour à Agenda ⏎"
  },
  {
    "objectID": "weeks/week-6.html",
    "href": "weeks/week-6.html",
    "title": "Semaine 5",
    "section": "",
    "text": "Important\n\n\n\n\nCours magistral en Amphi 2 Olympe de Gouges 14h-15h30\nTD/TP Ingémaths/METIS salle 2006 Etage 2 Sophie Germain Jeudi 13h30-16h00\nTD/TP MIASHS salles 2004-2005-2006 Étage 2 Sophie Germain Vendredi 15h45-18h15\n Emploi du temps MIASHS\n Emploi du temps Ingémaths/METIS"
  },
  {
    "objectID": "weeks/week-6.html#préparer",
    "href": "weeks/week-6.html#préparer",
    "title": "Semaine 5",
    "section": "Préparer",
    "text": "Préparer\nFinir requêtes du TD 3 TD 4 en particulier les questions portant sur la partie verte du schéma pagila"
  },
  {
    "objectID": "weeks/week-6.html#cours-magistral-diapositives",
    "href": "weeks/week-6.html#cours-magistral-diapositives",
    "title": "Semaine 5",
    "section": "Cours magistral : diapositives",
    "text": "Cours magistral : diapositives\nFonctions SQL, Vues et requêtes préparées"
  },
  {
    "objectID": "weeks/week-6.html#exercices-td-4",
    "href": "weeks/week-6.html#exercices-td-4",
    "title": "Semaine 5",
    "section": "Exercices : TD 4",
    "text": "Exercices : TD 4\nhtml pdf\n Construisez des vues à partir de vos requêtes"
  },
  {
    "objectID": "weeks/week-6.html#solutions-du-td-3-semaine-5",
    "href": "weeks/week-6.html#solutions-du-td-3-semaine-5",
    "title": "Semaine 5",
    "section": "Solutions du TD 3 (Semaine 5)",
    "text": "Solutions du TD 3 (Semaine 5)\nhtml pdf"
  },
  {
    "objectID": "weeks/week-6.html#travail-personnel",
    "href": "weeks/week-6.html#travail-personnel",
    "title": "Semaine 5",
    "section": "Travail personnel",
    "text": "Travail personnel\nCC 1 2023-24\n\n\nretour à Agenda ⏎"
  },
  {
    "objectID": "workshops/td-recap-sql.html",
    "href": "workshops/td-recap-sql.html",
    "title": "TD Récapitulatif SQL",
    "section": "",
    "text": "L3 MIASHS/Ingémath\n\n\nUniversité Paris Cité\n\n\nAnnée 2025\n\n\nCourse Homepage\n\n\nMoodle"
  },
  {
    "objectID": "workshops/td-recap-sql.html#schéma-world",
    "href": "workshops/td-recap-sql.html#schéma-world",
    "title": "TD Récapitulatif SQL",
    "section": "Schéma world",
    "text": "Schéma world\n\n\n\n\n\n\nNoteQuestion\n\n\n\nQuel est le pays qui a le plus de villes recensées dans la table world.city? Combien de villes ? (363 villes)\n\n\n\n\n\n\n\n\nNoteQuestion\n\n\n\nQuels sont les pays qui ont \\(3\\) ou plus langues officielles ? (8 lignes)\n\n\n\n\n\n\n\n\nNoteQuestion\n\n\n\nQuels sont les pays dont plus de \\(1.000.000\\) d’habitants parlent une langue non officielle ? (72 lignes)\n\n\n\n\n\n\n\n\nNoteQuestion\n\n\n\nQuelles sont les langues qui sont officielles dans tous les continents où au moins une langue est parlée ? (1 ligne)\n\n\n\n\n\n\n\n\nNoteQuestion\n\n\n\nQuels sont les pays pour lesquels une langue non officielle est parlée par strictement plus de monde (dans le pays) qu’il n’y a d’habitants dans la capitale ? (118 lignes)\n\n\n\n\n\n\n\n\nNoteQuestion\n\n\n\nQuels est le nombre de villes par region ?"
  },
  {
    "objectID": "workshops/td-recap-sql.html#schéma-pagila",
    "href": "workshops/td-recap-sql.html#schéma-pagila",
    "title": "TD Récapitulatif SQL",
    "section": "Schéma pagila",
    "text": "Schéma pagila\n\n\n\n\n\n\n\nNoteQuestion\n\n\n\nQuel est l’acteur (actor_id) présent sur le plus de DVD (inventory_id) ?\n\n\n\n\n\n\n\n\nNoteQuestion\n\n\n\nQuel est le prix moyen d’une location de DVD ?\n\n\n\n\n\n\n\n\nNoteQuestion\n\n\n\nQuel est le DVD qui a rapporté le plus d’argent ? Le film (film_id)?\n\n\n\n\n\n\n\n\nNoteQuestion\n\n\n\nQuels sont les employés (staff_id) qui travaillent dans une autre ville que celle dans laquelle ils vivent ? (4 lignes)"
  },
  {
    "objectID": "workshops/td10.html",
    "href": "workshops/td10.html",
    "title": "TD 10: Normalisation",
    "section": "",
    "text": "L3 MIASHS/Ingémath\n\n\nUniversité Paris Cité\n\n\nAnnée 2025\n\n\nCourse Homepage\n\n\nMoodle\n\n\n\n\n\n\n\n\n\n\nExercice\nSoit \\(\\mathcal{A}=\\left\\{A,B,C,D,E\\right\\}\\) un schéma et soit \\(\\mathcal{A}_1=\\left\\{A,B,C\\right\\}\\). Pour chaque ensemble \\(\\Sigma\\) de dépendances fonctionnelles ci-dessous, déterminer un ensemble de DF équivalent à \\(\\pi_{\\mathcal{A}_1}(\\Sigma)\\).\n\n\\(\\Sigma=\\left\\{AB\\to DE, C\\to E, D\\to C, E\\to A\\right\\}\\)\n\\(\\Sigma=\\left\\{A\\to D, BD\\to E, AC\\to E, DE\\to B\\right\\}\\)\n\\(\\Sigma=\\left\\{AB\\to D, AC\\to E, BC\\to D, D\\to A, E\\to B\\right\\}\\)\n\\(\\Sigma=\\left\\{A\\to B, B\\to C, C\\to D, D\\to E, E\\to A\\right\\}\\)\n\n\n\nExercice\nSoit \\(\\mathcal{A}=\\left\\{A,B,C,D,E\\right\\}\\) un schéma et soit la décomposition \\(\\left\\{\\mathcal{A}_1,\\mathcal{A}_2,\\mathcal{A}_3\\right\\}\\) où \\[\\mathcal{A}_1=\\left\\{A,B,C\\right\\}\\quad \\mathcal{A}_2=\\left\\{B,C,D\\right\\}\\quad \\mathcal{A}_3=\\left\\{A,C,E\\right\\}\\] Pour chaque ensemble \\(\\Sigma\\) de dépendances fonctionnelles ci-dessous, déterminer quelles dépendances sont préservées par cette décomposition, c’est-à-dire quelles DF de \\(\\Sigma\\) sont impliquées par \\(\\bigcup_{i=1}^3 \\pi_{\\mathcal{A}_i}(\\Sigma)\\).\n\n\\(\\Sigma=\\left\\{b\\rightarrow E, CE\\rightarrow A\\right\\}\\)\n\\(\\Sigma=\\left\\{aC\\rightarrow E, BC\\to D\\right\\}\\)\n\\(\\Sigma=\\left\\{a\\rightarrow D, D\\to E, B\\to D\\right\\}\\)\n\\(\\Sigma=\\left\\{a\\rightarrow D, CD\\to E, E\\to D\\right\\}\\)\n\n\n\nExercice\nOn considère le schéma de relation suivant concernant la gestion de rendez-vous d’un service d’intervention hospitaliers. \\[\n\\mathcal{A}=\\left\\{\\texttt{IdM,NomM,PrenomM,DateRV,HeureRV,IdP,NomP,PrenomP,IdInterV}\\right\\}\n\\]\nChaque rendez-vous implique un médecin et un patient. Chaque médecin est identifié par un numéro, IdM, un nom NomM et un prénom PrenomM. Le rendez-vous est à une date, DateRV, et à une heure, HeureRV données. Chaque patient est identifié par un numéro, IdP, un nom NomP et un prénom PrenomP. Chaque rv est programmé pour un type d’intervention médical, IdInterV. On suppose que chaque jour, un médecin ne peut pratiquer qu’un seul type d’intervention médicale (consultation, type de chirurgie donnée).\nOn a les dépendances fonctionnelles \\(\\Sigma\\) suivantes:\nIdM, DateRV,HeureRV, IdInterV → IdP\nIdM, DateRV →  IdInterV\nIdM → NomM, PrenomM\nIdP → NomP, PrenomP\nIdP,DateRV,HeureRV → IdInterV\nIdP,DateRV,HeureRV →  IdM,NomM\n\nQuels sont les inconvénients d’une telle modélisation par une seule table en terme d’anomalies d’insertion ou de suppression ?\n\n\nCalculer \\([\\texttt{IdM}]^+_{\\Sigma}\\)\n\n\nProposez un ensemble d’attributs formant une clé de la relation.\n\n\nDonner un ensemble de dépendances fonctionnelles \\(\\Sigma'\\) équivalent à \\(\\Sigma\\) qui soit minimal (i.e. sans règles redondantes, notamment). Justifiez\n\nOn se donne la décomposition de \\(\\mathcal{A}\\) suivante~: \\[\n\\begin{array}{l}\n    \\mathcal{A}_1=\\left\\{\\texttt{IdM,HeureRV,DateRV,IdP,NomP,PrenomP}\\right\\},\\\\\n     \\mathcal{A}_2=\\left\\{\\texttt{IdM,DateRV,IdInterV}\\right\\},\\\\\n     \\mathcal{A}_3=\\left\\{\\texttt{IdM,NomM,PrenomM}\\right\\}\n\\end{array}\n\\]\n\nToutes les dépendances fonctionnelles sont-elles préservées par cette décomposition ?\nEst-elle sans perte d’information ?\nPour \\(i=1,2,3\\), déterminer si \\(\\mathcal{A}_i\\) est en forme normale de Boyce-Codd.\n\n\nMêmes questions pour la décomposition :\n\n\\[\n\\begin{array}{rl}\n\\mathcal{A}_1 &=\\left\\{\\texttt{IdM,HeureRV,DateRV,IdP}\\right\\}\\\\\n\\mathcal{A}_2 &=\\left\\{\\texttt{IdP,NomP,PrenomP}\\right\\}, \\\\\n\\mathcal{A}_3 &=\\left\\{\\texttt{IdM,DateRV,IdInterV}\\right\\},\\\\\n\\mathcal{A}_4 &=\\left\\{\\texttt{IdM,NomM,PrenomM}\\right\\}\n\\end{array}\n\\]\n\n\nExercice\nSoit une relation concernant des personnes résidant en France avec les attributs suivants:\nNom, Numéro de sécurité sociale, Commune, Département, Code postal, Numéro de téléphone\navec l’ensemble \\(\\Sigma\\) de DF suivantes~:\nNuméro de sécurité sociale → Nom, Commune, Département, Code postal, Numéro de téléphone \nCommune → Département \nCode postal → Commune, Département\n\nCe schéma est-il en forme normale de Boyce-Codd ?\n\nSoit la décomposition \\[\\mathcal{A}_1=\\left\\{\\texttt{Code postal}, \\texttt{Commune}, \\texttt{Département}\\right\\}\\] et \\[\\mathcal{A}_2=\\left\\{\\texttt{Numéro de sécurité sociale}, \\texttt{Nom}, \\texttt{Code postal},\\texttt{Numéro de téléphone}\\right\\}\\]\n\nChaque \\(\\mathcal{A}_i\\) est-elle en forme normale de Boyce-Codd ?\nCette décomposition préserve-t-elle les dépendances fonctionnelles ?\nCette décomposition est-elle sans perte d’information ?\nMêmes questions pour la décomposition \\[\\mathcal{A}_1=\\left\\{\\texttt{Commune}, \\texttt{Département}\\right\\}\\]\n\n\\[\\mathcal{A}_2=\\left\\{\\texttt{Numéro de sécurité sociale}, \\texttt{Nom}, \\texttt{Commune}, \\texttt{Code postal},\\texttt{Numéro de téléphone}\\right\\}\\]\n\n\nExercice\nSoit un schéma d’attributs \\(A_1, A_2,\\dots A_n\\) et un ensemble de dépendances fonctionnelles. Calculer le nombre de super-clefs (en fonction de \\(n\\)) dans les cas suivants~:\n\nLa seule clef est \\(\\left\\{A_1\\right\\}\\).\nLes seules clefs sont \\(\\left\\{A_1\\right\\}\\) et \\(\\left\\{A_2\\right\\}\\).\nLes seules clefs sont \\(\\left\\{A_1,A_2\\right\\}\\) et \\(\\left\\{A_3,A_4\\right\\}\\).\nLes seules clefs sont \\(\\left\\{A_1,A_2\\right\\}\\) et \\(\\left\\{A_1,A_3\\right\\}\\).\n\n\n\nExercice\nSoit le schéma \\(\\mathcal{A}=\\{A,B,C,D\\}\\) et l’ensemble de dépendances fonctionnelles \\[\\Sigma = \\{ A \\to B, B \\to C\\} \\]\n\nQuelle est la fermeture \\(\\{A\\}^+\\) de \\(\\{A\\}\\) ?\n\n\nQuelles sont les super-clés ? Les clés ?\n\n\n\nExercice\nSoit le schéma \\(\\mathcal{A}=\\{A,B,C,D,E,F\\}\\) et l’ensemble de dépendances fonctionnelles \\[\\Sigma = \\Bigl\\{ \\left\\{A,B\\right\\}\\to C, \\left\\{B,C\\right\\}\\to \\left\\{A,D\\right\\}, D\\to E, \\left\\{C,F\\right\\}\\to B \\Bigr\\}\\]\n\nCalculer la fermeture \\(\\left\\{A,B\\right\\}^+\\) de \\(\\left\\{A,B\\right\\}\\).\nEst-ce que \\(\\Sigma\\) implique la dépendance fonctionnelle \\(\\left\\{A,B\\right\\}\\to D\\)~?\nEst-ce que \\(\\Sigma\\) implique la dépendance fonctionnelle \\(D\\to A\\)~?\n\n\n\n\nExercice\nOn considère une schéma \\(\\mathcal{A}\\) avec les attributs\nPropriétaire, Occupant, Adresse, Noapt, Nbpièces, Nbpersonnes\nUn nuplet/tuple (p, o, a, n, nb1, nb2) ayant la signification suivante : La personne o habite avec nb2 personnes l’appartement de numéro n ayant nb1 pièces dont le propriétaire est p.\nUne analyse de cette relation nous fournit un ensemble initial \\(\\Sigma\\) de dépendances fonctionnelles\nOccupant → Adresse\nOccupant → Noapt\nOccupant → Nbpersonnes\nAdresse, Noapt → Proprietaire\nAdresse, Noapt → Occupant\nAdresse, Noapt → Nbpieces\n\nDéterminer les clés du schémas\nLes schéma est-il en FN3 ?\nSi la réponse est Non, décomposer sans perte d’information et sans perte de dépendances fonctionnelles.\n\n\n\nExercice\n\nSoit le schéma \\[\\mathcal{A}=\\{\\texttt{IdLivre, Titre, Langue, Pays, IdTraducteur, Nom, Date}\\}\\] et l’ensemble de DF\nIdLivre → Titre \nLangue → Pays \nIdTraducteur → Nom \nIdLivre, IdTraducteur, Langue → Date\nIdLivre, IdTraducteur → Langue\nAppliquer l’algorithme de décomposition vu en cours pour obtenir une décomposition de \\(\\mathcal{A}\\) qui respecte la FNBC et est sans perte d’information. Déterminer quelles DF sont préservées.\n\n\nExercice\nSoit le schéma \\[\\mathcal{A}=\\left\\{\\texttt{A,B,C,D,E,F,G,H}\\right\\}\\] et l’ensemble de DF\nBE → AC  \nB → H  \nF → CD  \nD → G\n\nAppliquer l’algorithme de décomposition vu en cours pour obtenir une décomposition de \\(\\mathcal{A}\\) qui respecte la FNBC et est sans perte d’information. Déterminer quelles DF sont préservées.\nPeut-on, en ajoutant un sous-schéma à la décomposition, obtenir une décomposition FNBC sans perte d’information et sans perte de DF ?\n\n\n\nExercice\nReprendre les questions de l’exercice précédent pour le schéma \\[\\mathcal{A}=\\left\\{\\texttt{A,B,C,D,E,F,G,H}\\right\\}\\] et l’ensemble de DF\nBE → AC  \nB → H\nF → CD\nD → G\nA→ E"
  },
  {
    "objectID": "workshops/td2.html",
    "href": "workshops/td2.html",
    "title": "TD 2: SQL",
    "section": "",
    "text": "L3 MIASHS/Ingémath\n\n\nUniversité Paris Cité\n\n\nAnnée 2025\n\n\nCourse Homepage\n\n\nMoodle"
  },
  {
    "objectID": "workshops/td2.html#schéma-world-rappel",
    "href": "workshops/td2.html#schéma-world-rappel",
    "title": "TD 2: SQL",
    "section": "Schéma world (rappel)",
    "text": "Schéma world (rappel)\nUtiliser les commandes suivantes pour retrouver les schémas de tables country, countrylanguage et city.\nbd_2023&gt; \\d world.\"nom de table\"\nVue d’ensemble du schéma world"
  },
  {
    "objectID": "workshops/td2.html#écriture-de-requêtes",
    "href": "workshops/td2.html#écriture-de-requêtes",
    "title": "TD 2: SQL",
    "section": "Écriture de requêtes",
    "text": "Écriture de requêtes\nPour extraire des informations d’une base de données, on utilise l’algèbre relationnelle (pour la théorie) et le langage SQL (pour la pratique).\n\n\n\n\n\n\n\n\nOpération\nAlgèbre rel.\nSQL\n\n\n\n\nProjection\n\\(\\Pi_{\\text{liste d'attributs}}(R)\\)\nSELECT attributs FROM  R\n\n\nSélection\n\\({\\Large \\sigma}_{\\text{condition}}{R}\\)\nSELECT * FROM R WHERE condition\n\n\nRenommage\n\\(\\rho_{\\text{nom1} \\rightarrow \\text{nom2}}(R)\\)\nSELECT nom1 AS nom2 FROM table1 AS table2\n\n\nUnion\n\\(R \\cup S\\)\n(SELECT * FROM R) UNION (SELECT * FROM S)\n\n\nDifférence\n\\(R - S\\)\n(SELECT * FROM R) EXCEPT (SELECT * FROM S)\n\n\nProduit\n\\(R \\times S\\)\nSELECT * FROM R,S\n\n\nIntersection\n\\(R \\cap S\\)\n(SELECT * FROM R) INTERSECT (SELECT * FROM S)"
  },
  {
    "objectID": "workshops/td2.html#opérations-avancées",
    "href": "workshops/td2.html#opérations-avancées",
    "title": "TD 2: SQL",
    "section": "Opérations avancées",
    "text": "Opérations avancées\n\nJointures\nLa jointure est une opération qui permet de recoller deux relations ensemble. On la note avec le signe \\(\\bowtie_C\\) où \\(C\\) est une condition. Formellement, ce n’est qu’une sélection selon la condition \\(C\\) d’un produit cartésien, c’est-à-dire, par définition : \\[R {\\Large \\bowtie}_C S = {\\Large \\sigma}_{C}{(R \\times S)}.\\]\nCette opération est très courante dans les requêtes. Cela vient du fait que les bases de données sont conçues pour ne pas avoir d’information redondante.\nPrenons l’exemple du schéma world et des tables world.country et world.city. La table world.country possède une colonne capital qui contient le numéro d’identification d’une ville de la table world.city. Par exemple, pour la France, la colonne capital vaut 2974 et la ville numéro 2974 est Paris:\nbd_2023-24&gt; SELECT capital \nFROM world.country \nWHERE countrycode='FRA';\nbd_2023-24&gt; SELECT name \nFROM world.city \nWHERE id = 2974;\nPour lister les noms des capitales mondiales, on va avoir besoin de recoller les deux tables en prenant soin de respecter la condition d’égalité entre la capitale et le numéro d’identification de la ville. Cela peut s’écrire en SQL comme suit:\nSELECT name\nFROM world.city AS V JOIN \n     world.country AS P ON \n     V.id = P.capital;\nParfois, on veut recoller deux tables avec la condition que les colonnes qui ont le même nom doivent être égales. Cela arrive souvent si la base de données a bien été conçue. On appelle cette jointure une jointure naturelle, qu’on peut écrire avec NATURAL JOIN. La requête\nSELECT name \nFROM world.city NATURAL JOIN world.country\nWHERE continent = 'Oceania';\nrenvoie la liste des villes d’Océanie. La jointure est faite implicitement sur la condition\nworld.city.countrycode = world.country.countrycode\nla table résultante n’aura qu’une seule colonne countrycode. Si l’on souhaite ne faire la jointure naturelle que sur un sous-ensemble a1,...,ak des attributs communs, on peut utiliser JOIN ... USING (a1,...,ak).\n\n\nRequêtes nommées : utilisation de WITH\nLorsque les requêtes se compliquent, il est parfois commode de la découper en plusieurs requêtes qu’on manipulera par la suite. Par exemple, trouver le nom des capitales européennes ayant plus d’un million d’habitants peut se découper ainsi: on résout la requête CAP qui contient le nom, le continent et la population des capitales. Puis on résout la requête finale en filtrant CAP. Cela peut s’écrire avec l’opérateur WITH:\nWITH CAP AS (\n  SELECT name, continent, population\n  FROM world.city AS V JOIN \n    world.country AS P ON  V.id=P.capital\n)\n\nSELECT name\nFROM CAP\nWHERE continent = 'Europe' AND population &gt; 1000000;"
  },
  {
    "objectID": "workshops/td2.html#requêtes",
    "href": "workshops/td2.html#requêtes",
    "title": "TD 2: SQL",
    "section": "Requêtes",
    "text": "Requêtes\n\nQuels sont les noms des capitales Sud-Américaines ? (14 lignes)\n\n\nQuels sont les noms des pays où le français est langue officielle ? (18 lignes)\n\n\nQuels sont les pays dont le gouvernement est monarchique (constitutionnelle ou pas) ? (43 lignes)\n\n\nQuelles sont les monarchies d’Europe dont la capitale compte moins d’un million d’habitants ? (8 lignes)\n\n\nQuelles sont les régions où on ne trouve pas de monarchie ? (9 lignes)\n\n\nQuelles sont les langues qui ne sont langues officielles dans aucun pays ? (355 lignes)\n\n\nQuels sont les pays qui n’ont pas de langue officielle ? (49 lignes)\n\n\nQuels sont les pays dont la seule langue officielle est le français ? (9 lignes)\n\n\nLes noms des pays où le français n’est pas la seule langue officielle. (9 lignes)\n\n\nQuelles sont les régions qui ne comportent qu’une seule forme de gouvernement ? (3 lignes)\n\n\nQuelles sont les langues officielles des pays dont la capitale compte plus de 5 000 000 d’habitants ? (12 lignes)\n\n\nQuels sont les pays où au moins trois langues sont parlées chacune par strictement plus de \\(10\\%\\) de la population ? (35 lignes)\n\n\nQuelles sont les régions où il existe deux pays dont les espérances de vie diffèrent par au moins \\(10\\) ans ? (16 lignes)\n\n\nQuels sont les pays où l’anglais et le français sont des langues officielles ? (3 lignes)\n\n\nMontrer comment calculer l’intersection de deux tables avec une jointure (sous certaines conditions)."
  },
  {
    "objectID": "workshops/td4.html",
    "href": "workshops/td4.html",
    "title": "TD 4: SQL",
    "section": "",
    "text": "L3 MIASHS/Ingémath\n\n\nUniversité Paris Cité\n\n\nAnnée 2025\n\n\nCourse Homepage\n\n\nMoodle\nDocumentation Postgres\nDocumentation Postgres en Français"
  },
  {
    "objectID": "workshops/td4.html#count",
    "href": "workshops/td4.html#count",
    "title": "TD 4: SQL",
    "section": "Count",
    "text": "Count\nPour compter les pays en Europe, on écrira :\nSELECT COUNT(countrycode)\nFROM world.country\nWHERE continent='Europe';\nCette requête renvoie une table ayant une ligne et une colonne contenant le nombre de lignes dans le résultat de la requête."
  },
  {
    "objectID": "workshops/td4.html#sum-max-min-avg",
    "href": "workshops/td4.html#sum-max-min-avg",
    "title": "TD 4: SQL",
    "section": "Sum, Max, Min, Avg",
    "text": "Sum, Max, Min, Avg\nUne autre fonction importante est la fonction SUM(col) qui effectue la somme des valeurs (numériques) d’une colonne :\nSELECT SUM(population_country)\nFROM world.country;\nrenvoie la population mondiale.\nOn peut de même utiliser GROUP BY pour faire des paquets :\nSELECT \n  continent, SUM(population_country)\nFROM \n  world.country\nGROUP BY continent;\nrenvoie la population de chaque continent.\nOn peut même faire des opérations sur la colonne à l’intérieur de SUM. Par exemple: SUM(percentage/100).\n\n\n\n\n\n\nNoteQuestion\n\n\n\nÉcrire une requête qui renvoie le nombre de langues officielles par pays"
  },
  {
    "objectID": "workshops/td6.html",
    "href": "workshops/td6.html",
    "title": "TD 6 : Contraintes",
    "section": "",
    "text": "L3 MIASHS/Ingémath\n\n\nUniversité Paris Cité\n\n\nAnnée 2025\n\n\nCourse Homepage\n\n\nMoodle"
  },
  {
    "objectID": "workshops/td6.html#contraintes-check.",
    "href": "workshops/td6.html#contraintes-check.",
    "title": "TD 6 : Contraintes",
    "section": "Contraintes CHECK.",
    "text": "Contraintes CHECK.\nCette contrainte permet de vérifier que les colonnes d’une ligne donnée vérifient une certaine condition. Par exemple, on pourrait vouloir vérifier que la valeur de la colonne percentage de la table countrylanguage est inférieure à 100 ou que la valeur de la colonne return_date de la table rental est soit NULL ou supérieure à rental_date. Ces contraintes se définissent lors de la création de la table. Par exemple :\nCREATE TABLE solde(\n    produit TEXT,\n    reduc_pourcentage INT,\n    CHECK (reduc_pourcentage&lt;=100 AND reduc_pourcentage%10=0)\n);\nOn peut ajouter une contrainte CHECK à une table qui existe déjà. Par exemple :\nALTER TABLE solde ADD \n    CHECK (reduc_pourcentage &gt;=0);\nou bien en nommant la contrainte :\nALTER TABLE solde \n    ADD CONSTRAINT reduc_positive \n    CHECK (reduc_pourcentage &gt;=0);"
  },
  {
    "objectID": "workshops/td6.html#contraintes-default-not-null-unique",
    "href": "workshops/td6.html#contraintes-default-not-null-unique",
    "title": "TD 6 : Contraintes",
    "section": "Contraintes DEFAULT / NOT NULL / UNIQUE",
    "text": "Contraintes DEFAULT / NOT NULL / UNIQUE\nCes contraintes s’appliquent à une colonne en particulier. La contrainte DEFAULT spécifie une valeur par défaut pour remplir une colonne lorsque sa valeur n’est pas spécifiée, NOT NULL que la valeur de la colonne ne peut pas être NULL et UNIQUE que deux lignes différentes de la table ne peuvent pas avoir la même valeur sur les colonnes indiquées. Par exemple:\nCREATE TABLE membre(\n    nom VARCHAR(50) NOT NULL,\n    prenom VARCHAR(50) NOT NULL,\n    date_inscription DATE DEFAULT NOW(),\n    UNIQUE(nom, prenom)  \n);"
  },
  {
    "objectID": "workshops/td6.html#contraintes-primaryforeign-key.",
    "href": "workshops/td6.html#contraintes-primaryforeign-key.",
    "title": "TD 6 : Contraintes",
    "section": "Contraintes PRIMARY/FOREIGN KEY.",
    "text": "Contraintes PRIMARY/FOREIGN KEY.\nFormellement, la contrainte PRIMARY KEY est équivalente à UNIQUE et NOT NULL. C’est un moyen d’identifier de façon unique chaque ligne. Chaque table est censée avoir une clé primaire. La contrainte FOREIGN KEY spécifie que la valeur d’une (ou de plusieurs) colonne contient des valeurs présentes dans une autre table. Par exemple, la colonne capital de country contient une valeur qui doit apparaître dans la colonne id de city. Par exemple:\nCREATE TABLE membre(\n    nom VARCHAR(50) NOT NULL, \n    prenom VARCHAR(50) NOT NULL, \n    id INT, \nPRIMARY KEY (id)\n);\n\nCREATE TABLE amis(\n    id1 INT, \n    id2 INT,\n  FOREIGN KEY (id1) REFERENCES membre (id)\n);\nOn peut aussi ajouter une seconde clef étrangère comme ceci :\nALTER TABLE amis ADD \n    FOREIGN KEY (id2) REFERENCES membre;"
  },
  {
    "objectID": "workshops/td6.html#contraintes-exclude.",
    "href": "workshops/td6.html#contraintes-exclude.",
    "title": "TD 6 : Contraintes",
    "section": "Contraintes EXCLUDE.",
    "text": "Contraintes EXCLUDE.\nLes contraintes NOT NULL, DEFAULT, KEY, CHECK portent uniquement sur une ligne tandis que la contrainte UNIQUE permet uniquement de tester des égalités entre lignes. On veut parfois vérifier une condition plus riche sur deux lignes. Par exemple, si notre table contient des réservations d’une salle entre start_date et end_date, on ne veut pas que deux réservations se chevauchent. On écrira:\nCREATE TABLE reservation(\n    start_date DATE, \n    end_date DATE,\n\n    EXCLUDE USING gist (\n        daterange(start_date, end_date) WITH &&)\n);"
  },
  {
    "objectID": "workshops/td8.html",
    "href": "workshops/td8.html",
    "title": "TD 8 : Modélisation",
    "section": "",
    "text": "L3 MIASHS/Ingémath\n\n\nUniversité Paris Cité\n\n\nAnnée 2025\n\n\nCourse Homepage\n\n\nMoodle"
  },
  {
    "objectID": "workshops/td8.html#exercice-supermarché",
    "href": "workshops/td8.html#exercice-supermarché",
    "title": "TD 8 : Modélisation",
    "section": "Exercice (Supermarché)",
    "text": "Exercice (Supermarché)\n\n\n\n\n\n\nNoteQuestion\n\n\n\nProduire un schéma E/R qui décrit des informations concernant les produits d’un supermarché.\n\n\nChaque produit a un nom et un prix et appartient à une catégorie.\nLe supermarché a plusieurs rayons, un rayon étant caractérisé par un étage et un numéro de rangée. On veut maintenir l’emplacement des produits dans les rayons. Les produits d’une même catégorie sont placés dans le même rayon, mais un rayon peut contenir des produits de plusieurs catégories.\n\n\n\n\n\n\nNoteQuestion\n\n\n\nTraduire le schéma EA dans le formalisme des pattes de corbeau\n\n\n\n\n\n\n\n\nNoteQuestion\n\n\n\nDéfinir le schéma relationnel correspondant en SQL"
  },
  {
    "objectID": "workshops/td8.html#exercice-location-de-voitures",
    "href": "workshops/td8.html#exercice-location-de-voitures",
    "title": "TD 8 : Modélisation",
    "section": "Exercice (Location de voitures)",
    "text": "Exercice (Location de voitures)\n\n\n\n\n\n\nNoteQuestion\n\n\n\nProduire un schéma E/R qui décrit des informations concernant des voitures à louer.\n\n\nChaque voiture a une plaque d’immatriculation, une couleur et une marque. Le prix de la location dépend de la catégorie, où chaque catégorie est identifiée par un nom.\n\n\n\n\n\n\nNoteQuestion\n\n\n\nModifier ensuite le schéma pour représenter les modèles de voitures.\n\n\nUn modèle a un nom, une marque et un nombre de sièges.\nToutes les voitures du même modèle doivent appartenir à la même catégorie de prix.\n\n\n\n\n\n\nNoteQuestion\n\n\n\nDe plus, on veut distinguer les voitures disponibles des voitures en location. Pour les voitures disponibles on représente l’emplacement. Pour les voitures en location on représente la date et la durée de la location, ainsi que le nom du client.\n\n\n\n\n\n\n\n\nNoteQuestion\n\n\n\nTraduire le schéma EA dans le formalisme des pattes de corbeau\n\n\n\n\n\n\n\n\nNoteQuestion\n\n\n\nDéfinir le schéma relationnel correspondant en SQL"
  },
  {
    "objectID": "workshops/td8.html#exercice-gestion-du-personnel-dune-entreprise",
    "href": "workshops/td8.html#exercice-gestion-du-personnel-dune-entreprise",
    "title": "TD 8 : Modélisation",
    "section": "Exercice (Gestion du personnel d’une entreprise)",
    "text": "Exercice (Gestion du personnel d’une entreprise)\nDans une entreprise, chaque employé (identifié par un numéro) est attaché à un département de l’entreprise. Il occupe un bureau et participe à un ou plusieurs projets développés par l’entreprise.\nDe chaque employé, on connait : le nom, le prénom, les emplois qu’il a occupés à différentes dates et les salaires qu’il a perçus dans ces emplois.\nChaque département est identifié par un numéro, a son budget propre et est dirigé par un directeur faisant partie du personnel de l’entreprise.\nChaque bureau est identifié par un numéro, est rattaché à un département et est caractérisé par sa surface en mètres carrés. Il possède un numéro de téléphone associé.\nChaque projet est identifié par un numéro, possède un certain budget et emploie plusieurs personnes appartenant à différents départements. Chaque employé est affecté pour un certain nombre d’heures à un projet.\n\n\n\n\n\n\nNoteQuestion\n\n\n\nDonner un modèle entité-association correspondant à la description ci-dessus.\n\n\n\n\n\n\n\n\nNoteQuestion\n\n\n\nModifier votre modélisation pour tenir compte de l’évolution dans le temps de la vie de l’entreprise : les projets ont des durées de vie limitées, chaque employé est affecté à un projet (mais aussi un département) pendant une certaines durée, etc\n\n\n\n\n\n\n\n\nNoteQuestion\n\n\n\nTraduire le schéma EA dans le formalisme des pattes de corbeau\n\n\n\n\n\n\n\n\nNoteQuestion\n\n\n\nDéfinir le schéma relationnel correspondant en SQL\n\n\n\n\n\n\n\n\nNoteQuestion\n\n\n\nEssayer de coder les contraintes externes (exclusion, vérification, unicité, …)\nOn s’intéresse d’abord aux contraintes qui pèsent sur les associations entre employe et departement.\n\nUn employé ne peut être membre de plusieurs départements simultanément\nUn département ne peut pas être dirigé simultanément par plusieurs employés\nUn employé ne peut pas diiger plusieurs départements simultanément\n\n\n\n\n\n\n\n\n\nNoteQuestion\n\n\n\nEssayer de coder les contraintes externes (exclusion, vérification, unicité, …)\nOn s’intéresse maintenant aux contraintes qui pèsent sur les associations entre employe et projet.\n\nUn employé ne peut participer à un projet que pendant la durée de vie du projet\nUn employé ne peut pas travailler plus de 50 heures par semaine\n\nLa première contrainte concerne deux tables projet et participe: il faut que l’intervalle spécifié par debut_date, fin_date dans participe soit inclus dans l’intervalle debut_date, fin_date de l’instance de projet désignée par num_projet. Cette vérification devrait être effectuée lors des insertions/mises à jour dans participe mais aussi lors des mises à jour dans projet.\nPour mettre en place de genre de contraintes, SQl et PostgreSQL offre un cadre : celui des gachettes (TRIGGER). Cela va au delà de ce cours. Nous allons essayer de faire avec les moyens dont nous disposons : les fonctions SQL et les contraintes CHECK.\nCREATE FUNCTION cho.chk_participation_in_project_range(\n  p_num_projet bigint,\n  p_debut_date date,\n  p_fin_date date\n)\nRETURNS integer\nLANGUAGE SQL AS \n$$\nSELECT \n  COUNT(*)\nFROM \n  cho.projet pr\nWHERE \n  p_num_projet=pr.num \n  AND \n  daterange(p_debut_date, p_fin_date) &lt;@ daterange(pr.debut_date, pr.fin_date) ;\n$$ ;\nALTER TABLE cho.participe \nADD CONSTRAINT cns_participe_2 \nCHECK (\n  1 = cho.chk_participation_in_project_range(\n        num_projet,\n        debut_date,\n        fin_date \n  )\n)\n;\nIl faudrait créer une fonction et une contrainte CHECK du côté projet.\nIl faudrait aussi vérifier que la directrice d’un département est membre du département …"
  }
]