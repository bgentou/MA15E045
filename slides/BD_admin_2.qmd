---
title: "BD VII: Administration et Droits"
---

```{r}
#| echo: false
#| eval: false
library(DBI)
db <- dbConnect(RSQLite::SQLite(), dbname = "sql.sqlite")
knitr::opts_chunk$set(connection = "db")
```





---

# Introduction  {background-color="#1c191c"}

---


SQL n'est pas *seulement* un langage de définition, de manipulation et d'interrogation de données

- SQL permet de définir une politique d'accès aux données très fine et donc de contrôler la sécurité des bases de données

- SQL permet d'administrer tous les aspects d'un SGBD : chaque objet (schéma, table, vue, colonne, type de données, utilisateur, rôle, droit, fonction, etc) est décrit dans des tables d'administration que l'on peut interroger et modifier directement en SQL.


Ces remarques ne sont qu'un appercu des principes de Codd

---

## Les lois des tables {.smaller}

::: {.callout-note}

{{< include _codds-principles.qmd >}}

:::


---

# Droits  {background-color="#1c191c"}

---

## Problème

Un *serveur* de BD met à la disposition d'une collectivité
d'usagers un multitude de bases formées d'une collection de
tables, de vues, de routines...

- Les usagers ne sont pas tous égaux...

--

Certains utilisateurs doivent pouvoir créer des bases, d'autres les mettre à jour, d'autres les consulter

--

- {{< fa ban >}}  Le contrôle de l'accès...

Peut être motivé par un désir de maintenir l'*intégrité* ou la *confidentialité* des données.

Le niveau de contrôle (granularité) désirable peut varier : base, schema, table, colonne, ligne....



---


## Confidentialité et sécurité

*Objectif :*

Protéger les données gérées contre tout accès (malveillant ou accidentel) non autorisé

. . .

- Quels outils ?

Un système de **privilèges** implémenté dans SQL pour définir l'accès des usagers et plus généralement
des rôles aux différents objets

---

##  Commandes

Pour octroyer ou retirer des droits d'accès (par exemple sur une relation ou une vue) :

`GRANT` et `REVOKE`

Les droits d'accès donnent la possibilité d'exécuter des requêtes SQL

{{< fa hand-point-right >}} Le propriétaire (créateur) d'une relation à tous les droits sur cette relation et on ne peut lui les retirer


---

## Les commandes

Dépendent du type d'objet auquel on s'intéresse.

Pour une table ou une vue :

::::: {.columns}
::: {.column}

Syntaxe :

```{.sql}
GRANT {ALL PRIVILEGES |
   privilege {,privilege*}
ON {[TABLE] table_name [, ...]
    | ALL TABLES IN SCHEMA schema_name}
TO role-specification [, ...]
[WITH GRANT OPTION]
```
:::

::: {.column}

`role-specification` :

```{.sql}
role_name, PUBLIC, ...
```

:::


::: {.column}

`privilege` :

```{.sql}
SELECT, DELETE, INSERT,
UPDATE [(nom-attribut
    {, nom-attribut})],
REFERENCES [(nom-attribut
     {, nom-attribut})]
```

:::

:::::






{{< fa hand-point-right >}}  *`WITH GRANT OPTION`:]  si spécifié, donne le droit  de transmettre les droits obtenus

{{< fa binoculars >}}  voir : [https://www.postgresql.org/docs/current/sql-grant.html](https://www.postgresql.org/docs/current/sql-grant.html){target="_blank"}


---


## Les commandes  (suite) : granularité

On peut aller plus loin et spécifier le droit d'accès à seulement une ou plusieurs colonnes d'une table

Pour d'autres objets, comme les domaines, fonction, bases de données, schémas ou rôles d'autres types de droits sont pertinents:

- le droit de *créer* une BD ou un schéma dans une BD existante
- le droit de se *connecter* à une BD existante
- le droit d'*exécuter* une fonction
- le droit d'*usage* d'un schéma (i.e. d'en voir les objets existants)
- le droit d'*attribuer* des rôles à des utilisateurs

---


Exemples de syntaxe pour une BD:

```{.sql}
GRANT { { CREATE | CONNECT | TEMPORARY | TEMP } [, ...]
        | ALL [ PRIVILEGES ] }
ON DATABASE database_name [, ...]
TO role_specification [, ...]
[ WITH GRANT OPTION ]
[ GRANTED BY role_specification ]
```

Commentaire sur

- `TEMPORARY`
- `GRANTED BY ...`


---


## Révoquer des droits

via le mot clé `REVOKE`

Syntaxe (simplifiée) :

```{.sql}
REVOKE [ GRANT OPTION FOR ]
{ { SELECT | INSERT | UPDATE | DELETE }
| ALL [ PRIVILEGES ] }

ON { [ TABLE ] table_name [, ...]
      | ALL TABLES IN SCHEMA schema_name }

FROM role_spec [, ...]
[ GRANTED BY role_spec ]
[ CASCADE | RESTRICT ]
```


 {{< fa binoculars >}}  *syntaxe complète:] voir [https://www.postgresql.org/docs/current/sql-revoke.html](https://www.postgresql.org/docs/current/sql-revoke.html){target="_blank"}


Commentaire

- `GRANT OPTION FOR`
- `CASCADE`
- `RESTRICT`


---



## Exemples

```{.sql}
GRANT USAGE
ON SCHEMA durand
TO thomas007
```

. . .

```{.sql}
GRANT SELECT
ON ALL TABLES IN SCHEMA durand
TO thomas007
```

. . .

On peut se mettre "à la place" de l'utilisateur thomas007 par la commande :

```{.sql}
set role thomas007
```

. . .

```{.sql}
REVOKE SELECT
ON ALL TABLES IN SCHEMA durand
FROM thomas007
```

```{.sql}
REVOKE USAGE
ON SCHEMA durand
FROM thomas007
```

On pouvait donner directement les mêmes droits à tous
les utilisateurs d'un même rôle `etudiant` par exemple plutôt qu'un seul utilisateur


- `USAGE`
- `SELECT`
- `EXECUTE`


---

## Exemples  (suite)

Supposons que le schema `durand` contiennent une table `resultat`
dont une des colonnes se nomme `identifiant`.

Que peut faire (et ne pas faire) l'utilisateur `thomas007` après ces trois commandes ?

- `GRANT INSERT (identifiant) ON TABLE durand.resultat TO thomas007;`

- `GRANT USAGE ON SCHEMA durand  TO thomas007`

- `GRANT SELECT ON TABLE durand.resultat TO thomas007;`

. . .

Il peut selectionner les infos de la table `resultat`,
inserer un tuple avec une valeur pour
l'attribut `identifiant` et null pour les autres attributs

Il ne peut pas effacer son insertion...




## Politique de droits


- Lors de la conception d'une base de données, on anticipe le fait que tous les utilisateurs ne vont pas avoir les mêmes droits

- Il peut y avoir plusieurs niveaux d'administrateurs aussi

- L'architecture des droits doit être pensée le plus finement possible pour éviter les problèmes de sécurité

- SQL permet d'implémenter directement cela (et ne pas le laisser à la couche applicative au dessus)


Renvoyer aux principes de Codd


# Administration  {background-color="#1c191c"}



## Administrer : utilisation d'une "métabase"


- Les SGBD relationnels contiennent des schémas particuliers qui décrivent totalement l'état des bases :
  + schéma existants,
  + tables,
  + colonnes,
  + utilisateurs,
  + fonction stockées,
  + contraintes,
  + etc

- Ces schémas  constituent  une **métabase**

- On peut utiliser SQL pour interroger ces tables et donc (presque) tout savoir de l'état du SGBD sans faire appel à un langage extérieur

- On peut aussi apporter des modifications en utilisant les instructions SQL classiques `INSERT`, `UPDATE`, `DELETE`, etc

---

Relier aux principes de Codd

> Méta est un préfixe qui provient du grec μετά (meta) (après, au-delà de, avec).
> Il exprime tout à la fois la réflexion, le changement, la succession, le fait d'aller au-delà,
> à côté de, entre ou avec. Selon le contexte, le préfixe équivaut au sens de profond
> (comme les métadonnées ou le métalangage), haut ou grand (comme méta-revue).

.fr[Wikipedia]



---


## Administrer : utilisation d'une "méta-base"

Deux schémas jouent un rôle essentiel dans l'administration de Postgres (situation similaire dans tous les SGBD)

#### `information_schema`

- les définitions de tables, de vues, de colonnes, les contraintes, ...
- il est formé de tables et surtout de (très nombreuses) vues
- comme pour les autres tables, les instructions, `CREATE, ALTER, DROP` modifient le contenu
de ce schéma (une seule instruction `ALTER TABLE` peut
engendrer en cascade plusieurs mises à jours dans les tables de
`information_schema`)
- contient, en théorie, des informations compatibles avec le standard SQL (identique sur tout SGBD respectant la norme)

#### `pg_catalog`

- Contient des informations de nature similaire à `information_schema`  mais  spécifiques à l'organisation de Postgres





---



## Quelques tables et vues de `information_schema`

{{< fa binoculars >}} Une liste complète des tables et vues de `information_schema` se trouve ici :

[https://www.postgresql.org/docs/current/information-schema.html](https://www.postgresql.org/docs/current/information-schema.html){target="_blank"}

Quelques exemples:


- `schemata` contient la liste des schémas, leurs propriétaires, leurs catalogue d'appartenance, etc

- `tables` contient la liste des noms de toutes les tables et vues et, entre autres, leurs BD et schémas d'appartenance

- `columns` contient les noms de colonnes, les tables (et donc schémas et BD) auxquels elles appartiennent.

- `role_table_grants` contient la liste de tous les droits alloués, à qui, par qui etc


---


## Quelques tables et vues de `pg_catalog`


Une liste complète des tables et vues de `pg_catalog` se trouve ici :

{{< fa binoculars >}} [https://www.postgresql.org/docs/current/catalogs.html](https://www.postgresql.org/docs/current/catalogs.html){target="_blank"}

Quelques exemples:


- `pg_user` contient la liste des utilisateurs, leur id système

- `pg_tables` contient des informations similaires à `information_schema.tables`

- `pg_views` contient la liste des vues

- `pg_roles` contient la liste des roles

- `pg_auth_members` met en relation les rôles entre eux (quel rôle est contenu dans tel autre)


---



## Exemples

```
SELECT *
FROM information_schema.tables;
```

```{.sql}
SELECT table_name
FROM information_schema.tables
WHERE table_type='VIEW' AND table_schema='durand';
```

```{.sql}
    +------------------+
    | table_name       |
    |------------------|
    | listevuecc1      |
    | notescc1         |
    | listevuecc1_isif |
    | q4               |
    | q5               |
    | q6               |
    | defi1            |
    | q1               |
    | q2               |
    | q3               |
    +------------------+
```

---

## Exemple : Représentation des droits dans la metabase

```{.sql}
SELECT table_schema, table_name, privilege_type
FROM information_schema.role_table_grants
WHERE grantee='durand'
```

```{verbatim}
 +----------------+--------------------+------------------+
 | table_schema   | table_name         | privilege_type   |
 |----------------+--------------------+------------------|
 | gestion_2022   | etudiantsmiashs    | INSERT           |
 | gestion_2022   | etudiantsmiashs    | SELECT           |
 | gestion_2022   | etudiantsmiashs    | UPDATE           |
 | gestion_2022   | etudiantsmiashs    | DELETE           |
 | gestion_2022   | etudiantsmiashs    | TRUNCATE         |
 | gestion_2022   | etudiantsmiashs    | REFERENCES       |
 | gestion_2022   | etudiantsmiashs    | TRIGGER          |
```


---

## `information_schema.table_privileges`

The view `table_privileges` identifies all privileges granted on tables or views to a currently enabled role or by a currently enabled role.

There is one row for each combination of table, grantor, and grantee.


```{.sql}

```


Le role `PUBLIC` dispose du privilège de `SELECT` sur les tables de `pg_catalog`  et  de `information_schema`


# Fin  {background-color="#1c191c"}
