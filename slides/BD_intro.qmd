---
title: "BD I: Introduction aux SGBD"
subtitle: "Bases de Données Licences MIASHS et Mathématiques"
date: "2025-09-15"

format: 
  revealjs:
    header: "Les Bases de Données : survol"
---


  

# Données ? {background-color="#1c191c"}

## Situation du cours Bases de Données (MA15E045) dans la [Licence MIASHS](https://licence.math.u-paris.fr/formations/miashs/)

- Troisième cours tourné vers l'informatique 
  - *Initiation* (L1, S1)
  - *Algorithmes et Programmation* (L2, S3)
  
- Un cours tourné vers les données avant *Science des Données* (L3, S6)
  

## Le déluge des données : une mode ?

```{=html}
<iframe width="780" height="500" src="https://www.economist.com/leaders/2010/02/25/the-data-deluge" title="The Data Deluge"></iframe>
```

## Rien de neuf sous le soleil ...

::: {.aside}

> Je croyais que le goût de la statistique était particulier aux administrateurs de nos jours ; mais je me trompais. Vers la fin de l’ancien régime, on envoie souvent à l’intendant de petits tableaux tout imprimés qu’il n’a plus qu’à faire remplir par ses subdélégués et par les syndics des paroisses. Le contrôleur-général se fait faire des rapports sur la nature des terres, sur leur culture, l’espèce et la quantité des produits, le nombre des bestiaux, l’industrie et les mœurs des habitants. Les renseignements ainsi obtenus ne sont guère moins circonstanciés ni plus certains que ceux que fournissent en pareils cas de nos jours les sous-préfets et les maires. Le jugement que les subdélégués portent, à cette occasion, sur le caractère de leurs administrés, est en général peu favorable. Ils reviennent souvent sur cette opinion que « le paysan est naturellement paresseux, et ne travaillerait pas s’il n’y était obligé pour vivre. »

> C’est là une doctrine économique qui paraît fort répandue chez ces administrateurs.

:::

{{< fa brain >}} De qui sont ces lignes ? Quand furent-elles écrites ? 

## Les données intéressent

- les sciences

- les administrations

- les entreprises

- les citoyennes (et les citoyens)

- ...


## Les données en Sciences Sociales 

::: {.columns}

::: {.column}

- Pourquoi ?

- De quoi sont faites les données ?

- Comment les *accumuler* ?

- Comment les *interroger* ?

- Comment les *conserver* ? les *éditer* ?

:::

::: {.column}

![BN Salle ovale](/images/SalleOvale-BnF.png)

:::

::: 





## Sources et usages des données 

::: {.columns}


::: {.column}

### Quelques références

![[*Data humanities with R.* Arnold and Tilton](https://humanitiesdata.org)](/images/arnoldtiltoncover.jpg){height="300px"}

[*Quantitative tour at social sciences* edited by Gelman and Cortina, 2009](
https://doi.org/10.1017/CBO9780511818851)
 
{{< fa brands slideshare >}} [Relational databses on slideshare](https://www.slideshare.net/search?searchfrom=header&q=relational+databases)


:::

::: {.column}

### Quelques problèmes 

- Constitution (archivage, etc)

- Acquisition/organisation 

- Usage(s)

- Maintenance 

:::

::: 





## Les données de l'entreprise/des administrations

:::::: {.columns}
::: {.column}

- La comptabilité

- Les stocks (ERP)

- La clientèle (CRM)

- ...

:::

::: {.column}

![](/images/pexels-shkrabaanthony-5816299.jpg){height="400px"}

:::
::::::




## La vie des données (en résumé)

::: {.columns}
::: {.column}

- {{< fa keyboard >}} Saisie/Alimentation

- {{< fa server >}} Traitement(s)

- {{< fa circle-question >}} Usage(s)

- {{< fa database >}} Archivage 

- {{< fa screwdriver-wrench >}} Maintenance

:::

::: {.column}

![pipelines](/images/pexels-manelandsean-12573579.jpg){heigth="80%"}

:::

::: 




## Avant-hier

:::::: {.columns}

::: {.column width="30%"}


  
Les entreprises et les administrations ont toujours cultivé une mémoire
sous forme de *fichiers* plus ou moins mécanisés et formattés.

Ces collections de fichiers mécanisées répondaient à des exigences de
*fiabilité*, de *convenance* (facilité de la recherche, de
la maintenance)


:::


::: {.column width="70%"}

![From https://www.ibm.com/history/punched-card](/images/image-ibm-punchcard.jpeg)






:::
::::::





## Aujourd'hui

::: {.columns}
::: {.column width="30%"}

- Explosion des volumes 

- Explosion des débits

- Usages (très) divers

:::

::: {.column width="70%"}

![](/images/pexels-artunchained-9101888.jpg)


:::
::: 



  

# Systèmes d'information  {background-color="#1c191c"}


## Systèmes d'information 

> Un *système d'information (SI)* est un ensemble de composants qui fonctionnent ensemble pour collecter, traiter, stocker et diffuser des informations. 
 
. . .

> Les systèmes d'information ont des objectifs (très) divers. 

> Par exemple : les *systèmes de traitement des transactions (TPS)*, les *systèmes d'information de gestion (MIS)*, les *systèmes d'aide à la décision (DSS)* et les *systèmes de planification des ressources de l'entreprise (ERP)*.


## Décomposition des SI 

Un système d'information comprend en général les éléments suivants:

::: {.incremental}

1. *Matériel informatique (ou pas)* : dispositifs physiques utilisés pour collecter, stocker et traiter l'information (ordinateurs, serveurs, stockage, réseau, ...).
   
2. *Logiciels* : Les programmes exécutés sur le matériel pour gérer les données et effectuer des tâches spécifiques (OS, SGBD, Logiciels applicatifs).
   
3. *Données*  
    
4. *Personnes* : Les usagers du système d'information
   
5. *Processus* : Les flux de travail et les règles régissant la manière dont les données sont collectées, traitées et distribuées, conformément aux objectifs.

:::




## Systèmes d'information (SI) et Bases de Données (BD, SGBD, SGBDR)

Au coeur des systèmes d'information (modernes) on trouve (presque toujours) les **bases de données**


::: {.callout-caution}

Toutes les bases de données ne sont pas relationnelles

:::


## Des propriétés désirables (ACID)

::: {.callout-note}

### Atomicité

Chaque ajout/modification d'information doit former un tout cohérent

Si tout se passe correctement, les actions de la *transaction* sont toutes validées, sinon
on retourne à l'état initial

:::

. . .

::: {.callout-note}

### Cohérence 

Le contenu de la base de données doit rester
  conforme à des *contraintes* définies lors de la
  *conception* 
:::

. . .

::: {.callout-note}

### Isolation

La bases de données doit pouvoir être utilisée concurremment par plusieurs usagers


:::

. . .

::: {.callout-note}

### Durabilité 

La vie d'une base de données s'étale sur  plusieurs dizaines d'années

:::


# Bases de données et (autres) logiciels {background-color="#1c191c"}


## {{< fa database >}} Bases de **données**  


- Qu'est-ce que c'est (plus précisément) ?

. . .

Ce sont des logiciels intermédiaires (*middleware*) entre :

- Systèmes de gestion de fichiers/Systèmes d'exploitation  {{< fa brands windows >}} {{< fa brands linux >}} ... 

- Applications (CRM, ERP, CMS, ...) {{< fa brands salesforce >}} {{< fa brands wordpress >}} {{< fa brands facebook-f >}}  ...
  
. . . 

Les bases de données ne sont pas (simplement) un *langage* (comme `JAVA`, 
{{< fa brands r-project >}}, {{< fa brands python >}}) 




  

# Bases de données (relationnelles)  {background-color="#1c191c"}


---

::: {.callout-caution}

Toutes les bases de données informatiques ne sont pas relationnelles

:::

. . .



Les **Bases de données relationnelles** forment un sous-ensemble important (et même prépondérant) des systèmes de gestion des bases de données en entreprise

. . .

Les bases de données relationnelles ont été conçues pour traiter les données tabulaires (oragnisées en tables)


## {{< fa table-cells >}} Collection de tables/`data frame`s

Caricaturalement :


> Une base de données relationnelle est une collection de *tables*

. . .

Les tables s'incarnent de plusieurs façons en informatique


`R`, `Pandas`, les tableurs (`Excel` ...), offrent un environnement interactif de manipulation de données et un environnement de définition de données



## {{< fa brands r-project >}} Data frame 

<!-- () -->

::: {.incremental}

- Un `dataframe` est une *liste* de *vecteurs* (colonnes)

- Les vecteurs (colonnes) d'un `dataframe` sont tous de même longueur

- Les éléments d'un vecteur sont d'un même type de base

- Chaque vecteur a un nom et son propre type

:::

## Autres environments (`Excel`, `JAVA`, `Python`)

<!-- {{< fa python >}} -->

- Les `spreadsheet` des tableurs  {{< fa file-excel >}}

- Les `Dataframes`  de `Pandas`   {{< fa brands python >}}
<!-- ({{< fa python >}}) -->

- Les tableaux d'objets en `JAVA`

permettent de représenter ce que les `dataframes` représentent en `R`
<!-- {{< fa r-project >}} -->




## Les SGBD vont au delà : 

Ils offrent:

::: {.callout-important}

### Persistance

Entre deux *sessions*,  les données sont confiées au système de fichiers de l'ordinateur

:::

. . .

::: {.callout-important}

### Intégrité

Les données confiées au système de fichiers ne peuvent pas être altérées par d'autres logiciels

:::

. . .

::: {.callout-important}

### Concurrence

Les données peuvent être manipulées/consultées/mises à jour de manière *concurrente* par plusieurs
voire par une grande quantité d' utilisateurs.

:::




## Usages

- Sites web dynamiques   {{< fa brands wordpress >}}  {{< fa brands facebook-f >}}


-  Logiciels personnels

Derrière certaines applications (gestion de photos, de carnet
d'adresses, ...), on trouve des bases de données légères
(`SQLITE`)

- Partout 

    - smartphones, tablettes, ...

    - web, réseaux sociaux

    - administrations (APOGEE, ...)

    - entreprises (Stocks Supply Chain, Customer Relationship Management, ...)

    - NSA





  

# L'idée relationnelle  {background-color="#1c191c"}



## L'idée clé (Codd, 1970)

Organiser les informations en **tables** ou **relations**



Développer et formaliser un langage de manipulation de
tables : l'*algèbre relationnelle* (langage `SQL`, Structured Query Language)

-  L'usager peut définir l'organisation des données

-  Il peut interroger celles-ci (par des requêtes)

-  Le langage est *déclaratif* :

    -  On décrit ce que l'on veut obtenir (quoi mais pas comment)
    -  Le système fait le reste...

-  L'évaluation de toutes les requêtes s'arrête (au moins en théorie : si on y met les moyens...)

-  L'algèbre relationnelle/SQL n'est pas un langage complet (différence avec  `JAVA`, `C`, `Python`, etc)


---

{{< include _codds-principles.qmd >}}



## Quelques acteurs




:::::: {.columns}
::: {.column}


**Serveurs**

- [ORACLE (commercial)](https://www.oracle.com)

- [DB2 (IBM commercial)](https://www.ibm.com/db2)

- [SQLSERVER (Microsoft commercial)](https://www.microsoft.com/fr-fr/sql-server/sql-server-2022)

- [MySQL (open source)](https://www.mysql.com)

- [**PostGres** (open source)](https://www.postgresql.org)

- [Hana (commercial)](https://www.sap.com/france/products/technology-platform/hana/what-is-sap-hana.html)


:::

::: {.column}

**Clients**

- [`psql`](https://www.postgresql.org/docs/current/app-psql.html)

- [`pgcli`](https://www.pgcli.com)

- [`dbeaver`](https://dbeaver.io)

- [`PgAdmin`](https://www.pgadmin.org/)

- ...


:::
::::::


## PostGres (PostgreSQL)


- Un **serveur** : `etu-pgsql`

- Un **catalogue** : `bd_2023-24`

- Des **schémas**: `world, pagila, nycflights13, ...`




## Un exemple de schéma `world`

Un schema

Des schémas de table

- `continent` : association nom de continent (texte)-code de continent (entier)

- `country` : chaque tuple porte sur un état/territoire

- `city` : chaque tuple porte sur une ville (déisgnée par `id`) qui appartient à un
état/territoire désigné par `countrycode`

- `countrylanguage` : chaque tuple indique la
part de la population d'un état/territoire (désigné par `countrycode`) qui parle/connaît une langue
(désignée par `language`) et précise si la langue est officielle dans cet état/territoire.









## Détails du schema `world`

![Image World](/images//world.png)

::: {.aside}

Un schéma de table : la donnée des noms des colonnes et des types des colonnes

:::




## Quelques questions et propriétés typiques

-  Extraire de l'information

-  Assurer de la cohérence après modification

	-  Faire en sorte que chaque état/territoire soit identifié par un numéro unique
    -  Faire en sorte que chaque ville soit identifiée par un numéro unique
    -  Ne pas proposer de données sur des villes/territoires/états qui n'existent pas

. . .

-  Propager l'information

    - Historiciser le schéma





## Objectifs du cours


- Compétences d'un usager de BD relationnelles

- Exprimer des requêtes en algèbre relationnelle et en SQL

- SQL Définition, manipulation et contrôle des données

- Concevoir un Modèle Conceptuel de Données (Entités/Associations)

- Déterminer les dépendances fonctionnelles et normaliser une relation





## Plan du cours


- Algèbre et calcul relationnels

- SQL (algèbre relationnelle stricte)

- SQL sous-requêtes

- SQL agrégation

- SQL requêtes paramétrées

- Définition de données/Conception

- Normalisation



# Autour des bases de données  {background-color="#1c191c"}



## Entrepôts de données (Fin des années 1980)

::: {.callout-note}

### Datawarehouse

> Un Data Warehouse est une technologie qui regroupe des données *structurées* provenant d'une ou de plusieurs sources afin qu'elles puissent être comparées et analysées.

:::

<!-- {{< fa hand-point-right >}}  -->

[Entrepôt_de_données sur Wikipedia](https://fr.wikipedia.org/wiki/Entrepôt_de_données)


## Lacs de données (2010)

::: {.callout-note}

### Datalake

Le concept de Data Lake a été évoqué pour la première fois, en 2010, par James Dixon, comme une solution pour le stockage de données sans pré-traitement et sans connaître précisément l'usage futur qui en sera fait. L'image du lac, permettant d'expliquer, que différentes sources peuvent l'alimenter de manière naturelle et brute, et que les utilisateurs peuvent y plonger pour l'explorer et en rapporter des échantillons à examiner

:::


## Au delà du relationnel: No SQL


> Ce sont les grandes entreprises du web qui ont été les premières confrontées aux limitations intrinsèques des SGBD relationnels traditionnels. Ces systèmes fondés sur une application stricte des propriétés ACID et généralement conçus pour fonctionner sur des ordinateurs uniques ont rapidement posé des problèmes d'extensibilité.

. . .

> Afin de répondre à ces limites, ces entreprises ont commencé à développer leurs propres systèmes de gestion de bases de données pouvant fonctionner sur des architectures matérielles distribuées et permettant de traiter des volumes de données importants. 

. . .

> Les systèmes propriétaires qui en ont résulté, Google (BigTable), Amazon (Dynamo (en)), LinkedIn (Voldemort), Facebook (Cassandra puis HBase), SourceForge.net (MongoDB), Ubuntu One (CouchDB), Baidu (Hypertable) ont été les précurseurs du modèle NoSQL.

---

> Les performances restent bonnes avec la montée en charge en multipliant simplement le nombre de serveurs, solution raisonnable avec la baisse des coûts, en particulier si les revenus croissent en même temps que l'activité. Les systèmes géants sont les premiers concernés : énormes quantités de données, structuration relationnelle faible (ou de moindre importance que la capacité d'accès très rapide, quitte à multiplier les serveurs).

. . .

> Un modèle typique en NoSQL est le système clé-valeur, avec une base de données pouvant se résumer topologiquement à un simple tableau associatif unidimensionnel avec des millions — voire des milliards — d'entrées. Parmi les applications typiques, on retrouve des analyses temps-réel, statistiques, du stockage de logs (journaux), etc.




<!-- {{< fa hand-point-right >}}  -->
::: {.aside}

[NoSQL](https://fr.wikipedia.org/wiki/NoSQL)
 
:::


## Lire plus 

[Guy Harrison. Next Generation Databases. NoSQL, NewSQL, Big Data](https://scholar.google.com/scholar?hl=fr&as_sdt=0%2C5&q=harrison+next+generation+databases&oq=harrison+next+)


```{r}
#| echo: false
#| eval: false
knitr::include_url("http://guyharrison.squarespace.com/blog/tag/nosql")
```

<!-- {{< embed http://guyharrison.squarespace.com/blog/tag/nosql >}} -->




# The End  {background-color="#1c191c"}


