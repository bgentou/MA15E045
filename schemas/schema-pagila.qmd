---
title: "Schéma : pagila"
categories: [pagila, crowfoot, DDL]
subtitle: "pagila, relationnel, pattes de corbeau, crowfoot"
date: "2024-09-20"

format:
  pdf:
    code-annotations: below
    keep-tex: false
    code-fold: false
    toc: false
    output-file: schema-pagila.pdf
    include-in-header:
      - text: "\\lhead{{\\sf  Base de données \\\\ Schema pagila}}"
  html:
    embed-resources: true
    code-fold: true
    output-file: schema-pagila.html
params:
    year: 2024 
    curriculum: "L3 MIASHS/Ingémath"
    university: "Université Paris Cité"
    homepage: "https://s-v-b.github.io/MA15Y030/"
    moodle: "https://moodle.u-paris.fr/course/view.php?id=2313"

engine: knitr
---


::: {.callout-warning}

Présentation de la partie `film` du schéma `pagila`, pour l'entrainement à PostGres. 

::: 


::: {layout="[80,20]"}

::: {#first-column}


- **`r stringr::str_glue('{params$curriculum}')`**
- **`r stringr::str_glue('[{params$university}](https://www.u-paris.fr)')`**
- `r stringr::str_glue("Année {params$year}-{params$year+1}")`
- `r stringr::str_glue("[Course Homepage]({params$homepage})")`
- `r stringr::str_glue("[Moodle]({params$moodle})")`

::: 

::: {#second-column}
![](../images/UniversiteParis_monogramme_couleur_RVB.png){align="right" style="size:50px;" width=75}
:::

:::





![Schema pagila créé par [DbSchema](https://dbschema.com)](/images/schema-pagila.png)



## Contexte

Description de presque toutes les  tables de la base `pagila` , 

- [Pagemaison de la base de données  `pagila`](https://github.com/devrimgunduz/pagila). 
- [Pagemaison de la base de données  `sakila`](https://dev.mysql.com/doc/sakila/en/)
- [Détails sur les films](/schemas/schema-pagila-film.qmd)
- [Détails sur les adresses, clients, magasins, paiements](/schemas/schema-pagila-address.qmd)

`pagila`  est une base d'entrainement pour PostgreSQL. Cette base est une adaptation de la base `sakila` utilisée pour l'entrainement à MySQL. 

La base `pagila` est censée permettre de gérer les prêts et la facturation d'une chaine fictive de magasins de location de DVD (une activité commerciale florissante durant les années 1990 et au début des années 2000). 

Le schéma `pagila`  est formé  de 15 tables. Un groupe de tables concerne les films diponibles au catalogue de la chaîne de magasins: `film`, `actor`, `language`, `category`, `film_actor`, `film_category`. 

Les lignes de la table `film` sont les entrées du catalogue de la chaîne. Une ligne est identifiée par l'attribut `film_id` (noter l'attribution automatique des identifiants grâce au mécanisme des séquences). 

Un film possède une distribution constituée d'actrices et d'acteurs. Comme une actrice peut jouer dans plusieurs films, l'association plusieurs-à-plusieurs entre films et acteurs/actrices est rerésentée par une *table intémédiaire* `film_actor`.       

Un film relève d'une ou plusieurs catégories. Là encore, l'association plusieurs-à-plusieurs entre films et catégories est rerésentée par une *table intémédiaire* `film_category`.

Une entrée au catalogue correspond à un titre de film tourné dans une certaine langue (la langue originale) et à une bande son dans une langue qui peut être différente de la langue originale. 

::: {.callout-note}

Notons ici qu'une entrée de la table `film` ne correspond pas tout à fait à l'idée que nous nous faisons d'un film (entrée dans la base [IMDB](https://www.imdb.com)), mais plutôt à une édition (simplifiée) de film en DVD.

:::

Une film disponible au catalogue correspond à un ou plusieurs DVD (objets physiques) qui sont représentés par des lignes de la table `inventory`. Les conditions de location 
d'un même titre (ligne de `film`) sont identiques pour les DVDs physiques correspondant au même titre. 

Un ligne de la table `inventory` peut faire l'objet d'une *location* qui correspond à une ligne de `rental`. La table `rental` est encore un cas de *table intermédiaire* entre les tables `inventory`, `customer` (client) et `staff` (employé). Le fait qu'il s'agisse d'une table intermédiaire destinée à représenter une association ternaire plusieurs-à-plusieurs entre élément d'inventaire, client et employé est en partie caché par le fait que `rental` possède un identifiant propre `rental_id`. Un élément de `rental` devrait pouvoir être identifié grâce aux identifiants  des lignes participantes de `inventory`, `customer` et `staff` et  à un identifiant relatif comme `rental_date`. 

Un client est rattaché à un magasin (`store`). Les employés sont eux aussi attachés à un magasin.

Les clients, employés et magasins sont liés à une adresse (`address`) qui relève d'une ville (`city`) qui elle même relève d'un pays (`country`).

Un paiement relie un employé à un client à propos d'une location. 



## Table pagila.address 
|Idx |Name |Data Type |
|----|-----|----------|
| * &#128273;  &#11019; | address\_id| integer  DEFAULT nextval('pagila.address_address_id_seq'::regclass) |
| * | address| varchar(50)  |
|  | address2| varchar(50)  |
| * | district| varchar(20)  |
| * &#128270; &#11016; | city\_id| smallint  |
|  | postal\_code| varchar(10)  |
| * | phone| varchar(20)  |
| * | last\_update| timestamp  DEFAULT now() |


### Foreign Keys
|Type |Name |On |
|---|---|---|
|  | address_city_id_fkey | ( city\_id ) ref [pagila.city](#city) (city\_id) |




## Table pagila.city 
|Idx |Name |Data Type |
|---|---|---|
| * &#128273;  &#11019; | city\_id| integer  DEFAULT nextval('pagila.city_city_id_seq'::regclass) |
| * | city| varchar(50)  |
| * &#128270; &#11016; | country\_id| smallint  |
| * | last\_update| timestamp  DEFAULT now() |


### Foreign Keys
|Type |Name |On |
|---|---|---|
|  | city_country_id_fkey | ( country\_id ) ref [pagila.country](#country) (country\_id) |




## Table pagila.country 
|Idx |Name |Data Type |
|---|---|---|
| * &#128273;  &#11019; | country\_id| integer  DEFAULT nextval('pagila.country_country_id_seq'::regclass) |
| * | country| varchar(50)  |
| * | last\_update| timestamp  DEFAULT now() |




## Table pagila.customer 
|Idx |Name |Data Type |
|---|---|---|
| * &#128273;  &#11019; | customer\_id| integer  DEFAULT nextval('pagila.customer_customer_id_seq'::regclass) |
| * &#128270; &#11016; | store\_id| smallint  |
| * | first\_name| varchar(45)  |
| * &#128270; | last\_name| varchar(45)  |
|  | email| varchar(50)  |
| * &#128270; &#11016; | address\_id| smallint  |
| * | activebool| boolean  DEFAULT true |
| * | create\_date| date  DEFAULT ('now'::text)::date |
|  | last\_update| timestamp  DEFAULT now() |
|  | active| integer  |


### Foreign Keys
|Type |Name |On |
|---|---|---|
|  | customer_store_id_fkey | ( store\_id ) ref [pagila.store](#store) (store\_id) |
|  | customer_address_id_fkey | ( address\_id ) ref [pagila.address](#address) (address\_id) |




## Table pagila.film 
|Idx |Name |Data Type |
|---|---|---|
| * &#128273;  &#11019; | film\_id| integer  DEFAULT nextval('pagila.film_film_id_seq'::regclass) |
| * &#128270; | title| varchar(255)  |
|  | description| text  |
|  | release\_year| year  |
| * &#128270; &#11016; | language\_id| smallint  |
| &#128270; &#11016; | original\_language\_id| smallint  |
| * | rental\_duration| smallint  DEFAULT 3 |
| * | rental\_rate| numeric(4,2)  DEFAULT 4.99 |
|  | length| smallint  |
| * | replacement\_cost| numeric(5,2)  DEFAULT 19.99 |
|  | rating| mpaa\_rating  DEFAULT 'G'::pagila.mpaa_rating |
| * | last\_update| timestamp  DEFAULT now() |
|  | special\_features| text[]  |


### Foreign Keys
|Type |Name |On |
|---|---|---|
|  | film_original_language_id_fkey | ( original\_language\_id ) ref [pagila.language](#language) (language\_id) |
|  | film_language_id_fkey | ( language\_id ) ref [pagila.language](#language) (language\_id) |




## Table pagila.inventory 
|Idx |Name |Data Type |
|---|---|---|
| * &#128273;  &#11019; | inventory\_id| integer  DEFAULT nextval('pagila.inventory_inventory_id_seq'::regclass) |
| * &#128270; &#11016; | film\_id| smallint  |
| * &#128270; &#11016; | store\_id| smallint  |
| * | last\_update| timestamp  DEFAULT now() |


### Foreign Keys
|Type |Name |On |
|---|---|---|
|  | inventory_store_id_fkey | ( store\_id ) ref [pagila.store](#store) (store\_id) |
|  | inventory_film_id_fkey | ( film\_id ) ref [pagila.film](#film) (film\_id) |




## Table pagila.payment 
|Idx |Name |Data Type |
|---|---|---|
| * &#128273;  | payment\_id| integer  DEFAULT nextval('pagila.payment_payment_id_seq'::regclass) |
| * &#128270; &#11016; | customer\_id| smallint  |
| * &#128270; &#11016; | staff\_id| smallint  |
| * &#11016; | rental\_id| integer  |
| * | amount| numeric(5,2)  |
| * | payment\_date| timestamp  |


### Foreign Keys
|Type |Name |On |
|---|---|---|
|  | payment_staff_id_fkey | ( staff\_id ) ref [pagila.staff](#staff) (staff\_id) |
|  | payment_rental_id_fkey | ( rental\_id ) ref [pagila.rental](#rental) (rental\_id) |
|  | payment_customer_id_fkey | ( customer\_id ) ref [pagila.customer](#customer) (customer\_id) |




## Table pagila.rental 
|Idx |Name |Data Type |
|---|---|---|
| * &#128273;  &#11019; | rental\_id| integer  DEFAULT nextval('pagila.rental_rental_id_seq'::regclass) |
| * &#128269; | rental\_date| timestamp  |
| * &#128269; &#11016; | inventory\_id| integer  |
| * &#128269; &#11016; | customer\_id| smallint  |
|  | return\_date| timestamp  |
| * &#11016; | staff\_id| smallint  |
| * | last\_update| timestamp  DEFAULT now() |


### Foreign Keys
|Type |Name |On |
|---|---|---|
|  | rental_staff_id_fkey | ( staff\_id ) ref [pagila.staff](#staff) (staff\_id) |
|  | rental_inventory_id_fkey | ( inventory\_id ) ref [pagila.inventory](#inventory) (inventory\_id) |
|  | rental_customer_id_fkey | ( customer\_id ) ref [pagila.customer](#customer) (customer\_id) |




## Table pagila.staff 
|Idx |Name |Data Type |
|---|---|---|
| * &#128273;  &#11019; | staff\_id| integer  DEFAULT nextval('pagila.staff_staff_id_seq'::regclass) |
| * | first\_name| varchar(45)  |
| * | last\_name| varchar(45)  |
| * &#11016; | address\_id| smallint  |
|  | email| varchar(50)  |
| * &#11016; | store\_id| smallint  |
| * | active| boolean  DEFAULT true |
| * | username| varchar(16)  |
|  | password| varchar(40)  |
| * | last\_update| timestamp  DEFAULT now() |
|  | picture| bytea  |


### Foreign Keys
|Type |Name |On |
|---|---|---|
|  | staff_store_id_fkey | ( store\_id ) ref [pagila.store](#store) (store\_id) |
|  | staff_address_id_fkey | ( address\_id ) ref [pagila.address](#address) (address\_id) |




## Table pagila.store 
|Idx |Name |Data Type |
|---|---|---|
| * &#128273;  &#11019; | store\_id| integer  DEFAULT nextval('pagila.store_store_id_seq'::regclass) |
| * &#128269; &#11016; | manager\_staff\_id| smallint  |
| * &#11016; | address\_id| smallint  |
| * | last\_update| timestamp  DEFAULT now() |


### Foreign Keys
|Type |Name |On |
|---|---|---|
|  | store_manager_staff_id_fkey | ( manager\_staff\_id ) ref [pagila.staff](#staff) (staff\_id) |
|  | store_address_id_fkey | ( address\_id ) ref [pagila.address](#address) (address\_id) |





