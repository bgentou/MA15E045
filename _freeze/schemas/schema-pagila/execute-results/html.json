{
  "hash": "017d35535645d4479c23bc48a42135ce",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Schéma : pagila\"\ncategories: [pagila, crowfoot, DDL]\nsubtitle: \"pagila, relationnel, pattes de corbeau, crowfoot\"\ndate: \"2024-09-20\"\n\nformat:\n  pdf:\n    code-annotations: below\n    keep-tex: false\n    code-fold: false\n    toc: false\n    output-file: schema-pagila.pdf\n    include-in-header:\n      - text: \"\\\\lhead{{\\\\sf  Base de données \\\\\\\\ Schema pagila}}\"\n  html:\n    embed-resources: true\n    code-fold: true\n    output-file: schema-pagila.html\nparams:\n    year: 2024 \n    curriculum: \"L3 MIASHS/Ingémath\"\n    university: \"Université Paris Cité\"\n    homepage: \"https://s-v-b.github.io/MA15Y030/\"\n    moodle: \"https://moodle.u-paris.fr/course/view.php?id=2313\"\n\nengine: knitr\n---\n\n\n\n\n\n::: {.callout-warning}\n\nPrésentation de la partie `film` du schéma `pagila`, pour l'entrainement à PostGres. \n\n::: \n\n\n::: {layout=\"[80,20]\"}\n\n::: {#first-column}\n\n\n- **L3 MIASHS/Ingémath**\n- **[Université Paris Cité](https://www.u-paris.fr)**\n- Année 2024-2025\n- [Course Homepage](https://s-v-b.github.io/MA15Y030/)\n- [Moodle](https://moodle.u-paris.fr/course/view.php?id=2313)\n\n::: \n\n::: {#second-column}\n![](../images/UniversiteParis_monogramme_couleur_RVB.png){align=\"right\" style=\"size:50px;\" width=75}\n:::\n\n:::\n\n\n\n\n\n![Schema pagila créé par [DbSchema](https://dbschema.com)](/images/schema-pagila.png)\n\n\n\n## Contexte\n\nDescription de presque toutes les  tables de la base `pagila` , \n\n- [Pagemaison de la base de données  `pagila`](https://github.com/devrimgunduz/pagila). \n- [Pagemaison de la base de données  `sakila`](https://dev.mysql.com/doc/sakila/en/)\n- [Détails sur les films](/schemas/schema-pagila-film.qmd)\n- [Détails sur les adresses, clients, magasins, paiements](/schemas/schema-pagila-address.qmd)\n\n`pagila`  est une base d'entrainement pour PostgreSQL. Cette base est une adaptation de la base `sakila` utilisée pour l'entrainement à MySQL. \n\nLa base `pagila` est censée permettre de gérer les prêts et la facturation d'une chaine fictive de magasins de location de DVD (une activité commerciale florissante durant les années 1990 et au début des années 2000). \n\nLe schéma `pagila`  est formé  de 15 tables. Un groupe de tables concerne les films diponibles au catalogue de la chaîne de magasins: `film`, `actor`, `language`, `category`, `film_actor`, `film_category`. \n\nLes lignes de la table `film` sont les entrées du catalogue de la chaîne. Une ligne est identifiée par l'attribut `film_id` (noter l'attribution automatique des identifiants grâce au mécanisme des séquences). \n\nUn film possède une distribution constituée d'actrices et d'acteurs. Comme une actrice peut jouer dans plusieurs films, l'association plusieurs-à-plusieurs entre films et acteurs/actrices est rerésentée par une *table intémédiaire* `film_actor`.       \n\nUn film relève d'une ou plusieurs catégories. Là encore, l'association plusieurs-à-plusieurs entre films et catégories est rerésentée par une *table intémédiaire* `film_category`.\n\nUne entrée au catalogue correspond à un titre de film tourné dans une certaine langue (la langue originale) et à une bande son dans une langue qui peut être différente de la langue originale. \n\n::: {.callout-note}\n\nNotons ici qu'une entrée de la table `film` ne correspond pas tout à fait à l'idée que nous nous faisons d'un film (entrée dans la base [IMDB](https://www.imdb.com)), mais plutôt à une édition (simplifiée) de film en DVD.\n\n:::\n\nUne film disponible au catalogue correspond à un ou plusieurs DVD (objets physiques) qui sont représentés par des lignes de la table `inventory`. Les conditions de location \nd'un même titre (ligne de `film`) sont identiques pour les DVDs physiques correspondant au même titre. \n\nUn ligne de la table `inventory` peut faire l'objet d'une *location* qui correspond à une ligne de `rental`. La table `rental` est encore un cas de *table intermédiaire* entre les tables `inventory`, `customer` (client) et `staff` (employé). Le fait qu'il s'agisse d'une table intermédiaire destinée à représenter une association ternaire plusieurs-à-plusieurs entre élément d'inventaire, client et employé est en partie caché par le fait que `rental` possède un identifiant propre `rental_id`. Un élément de `rental` devrait pouvoir être identifié grâce aux identifiants  des lignes participantes de `inventory`, `customer` et `staff` et  à un identifiant relatif comme `rental_date`. \n\nUn client est rattaché à un magasin (`store`). Les employés sont eux aussi attachés à un magasin.\n\nLes clients, employés et magasins sont liés à une adresse (`address`) qui relève d'une ville (`city`) qui elle même relève d'un pays (`country`).\n\nUn paiement relie un employé à un client à propos d'une location. \n\n\n\n## Table pagila.address \n|Idx |Name |Data Type |\n|----|-----|----------|\n| * &#128273;  &#11019; | address\\_id| integer  DEFAULT nextval('pagila.address_address_id_seq'::regclass) |\n| * | address| varchar(50)  |\n|  | address2| varchar(50)  |\n| * | district| varchar(20)  |\n| * &#128270; &#11016; | city\\_id| smallint  |\n|  | postal\\_code| varchar(10)  |\n| * | phone| varchar(20)  |\n| * | last\\_update| timestamp  DEFAULT now() |\n\n\n### Foreign Keys\n|Type |Name |On |\n|---|---|---|\n|  | address_city_id_fkey | ( city\\_id ) ref [pagila.city](#city) (city\\_id) |\n\n{{< fa hand-point-right >}} Dans les tables `address`, `city`, `country`, `store`, `inventory`, `rental`, `actor`, `film`, `category`, \n`language`, `payment`, on trouve une colonne nommée `nom de la table_id` qui est la clé primaire de la table. Cette colonne \nest (en général) renseignée automatiquement : la valeur par défaut est calculée en invoquant la fonction `nextval()` sur la \nséquence associée à la table. La clé primaire ne comporte d'information intéressante pour l'usager final, elle correspond à un \nrang d'insertion dans la table. \n\n{{< fa hand-point-right >}} Les tables de `pagila` comportent une colonne `last_update` (dernière mise-à-jour) de type `timestamp` (instant, nombre de secondes écoulées depuis le premier janvier 1970, origine des temps selon `Unix`). \nCette colonne est remplie (renseignée) automatiquement lors des insertions et mises à jour grâce à la valeur par défaut calculée\npar la fonction `now()`. \n\n::: {.callout-caution}\n\nLes colonnes `last_update` des différentes tables de `pagila` n'ont rien à voir les unes avec les autres (vérifier l'absence \nde contrainte référentielle au sujet de ces colonnes). Il n'est donc pas question (en général) d'utiliser ces colonnes `last_update`\npour effectuer des jointures entre les tables de `pagila`. \n\nLa présence des colonnes `last_update` nous empêche de faire des jointures naturelles (`NATURAL JOIN`) entre `film`, `film_actor`, `actor`, etc.\n\n```{.sql}\nSELECT count(*) \nFROM \n  film\nJOIN\n  film_actor \nUSING(film_id) ;\n\n count \n-------\n  5462\n```\nalors que \n\n```{.sql}\nSELECT count(*) \nFROM \n  film\nNATURAL JOIN\n  film_actor ;\n\n count \n-------\n     0\n```\n:::\n \n\n## Table pagila.city \n|Idx |Name |Data Type |\n|---|---|---|\n| * &#128273;  &#11019; | city\\_id| integer  DEFAULT nextval('pagila.city_city_id_seq'::regclass) |\n| * | city| varchar(50)  |\n| * &#128270; &#11016; | country\\_id| smallint  |\n| * | last\\_update| timestamp  DEFAULT now() |\n\n\n### Foreign Keys\n|Type |Name |On |\n|---|---|---|\n|  | city_country_id_fkey | ( country\\_id ) ref [pagila.country](#country) (country\\_id) |\n\n\n{{< fa hand-point-right >}} On dit que la contrainte référentielle `city_country_id_fkey` est émise par l'attribut `country_id` de la table `city` vers l'attribut\n`country_id` de la  table `country`. Une ville n'appartient qu'à un seul pays, mais un pays peut comporter plusieurs villes.\n\n## Table pagila.country \n|Idx |Name |Data Type |\n|---|---|---|\n| * &#128273;  &#11019; | country\\_id| integer  DEFAULT nextval('pagila.country_country_id_seq'::regclass) |\n| * | country| varchar(50)  |\n| * | last\\_update| timestamp  DEFAULT now() |\n\n\n\n\n## Table pagila.customer \n|Idx |Name |Data Type |\n|---|---|---|\n| * &#128273;  &#11019; | customer\\_id| integer  DEFAULT nextval('pagila.customer_customer_id_seq'::regclass) |\n| * &#128270; &#11016; | store\\_id| smallint  |\n| * | first\\_name| varchar(45)  |\n| * &#128270; | last\\_name| varchar(45)  |\n|  | email| varchar(50)  |\n| * &#128270; &#11016; | address\\_id| smallint  |\n| * | activebool| boolean  DEFAULT true |\n| * | create\\_date| date  DEFAULT ('now'::text)::date |\n|  | last\\_update| timestamp  DEFAULT now() |\n|  | active| integer  |\n\n\n### Foreign Keys\n|Type |Name |On |\n|---|---|---|\n|  | customer_store_id_fkey | ( store\\_id ) ref [pagila.store](#store) (store\\_id) |\n|  | customer_address_id_fkey | ( address\\_id ) ref [pagila.address](#address) (address\\_id) |\n\n\n\n\n## Table pagila.film \n|Idx |Name |Data Type |\n|---|---|---|\n| * &#128273;  &#11019; | film\\_id| integer  DEFAULT nextval('pagila.film_film_id_seq'::regclass) |\n| * &#128270; | title| varchar(255)  |\n|  | description| text  |\n|  | release\\_year| year  |\n| * &#128270; &#11016; | language\\_id| smallint  |\n| &#128270; &#11016; | original\\_language\\_id| smallint  |\n| * | rental\\_duration| smallint  DEFAULT 3 |\n| * | rental\\_rate| numeric(4,2)  DEFAULT 4.99 |\n|  | length| smallint  |\n| * | replacement\\_cost| numeric(5,2)  DEFAULT 19.99 |\n|  | rating| mpaa\\_rating  DEFAULT 'G'::pagila.mpaa_rating |\n| * | last\\_update| timestamp  DEFAULT now() |\n|  | special\\_features| text[]  |\n\n\n### Foreign Keys\n|Type |Name |On |\n|---|---|---|\n|  | film_original_language_id_fkey | ( original\\_language\\_id ) ref [pagila.language](#language) (language\\_id) |\n|  | film_language_id_fkey | ( language\\_id ) ref [pagila.language](#language) (language\\_id) |\n\n\n\n\n## Table pagila.inventory \n|Idx |Name |Data Type |\n|---|---|---|\n| * &#128273;  &#11019; | inventory\\_id| integer  DEFAULT nextval('pagila.inventory_inventory_id_seq'::regclass) |\n| * &#128270; &#11016; | film\\_id| smallint  |\n| * &#128270; &#11016; | store\\_id| smallint  |\n| * | last\\_update| timestamp  DEFAULT now() |\n\n\n### Foreign Keys\n|Type |Name |On |\n|---|---|---|\n|  | inventory_store_id_fkey | ( store\\_id ) ref [pagila.store](#store) (store\\_id) |\n|  | inventory_film_id_fkey | ( film\\_id ) ref [pagila.film](#film) (film\\_id) |\n\n\nUne instance d'`inventory` correspond à un support physique, quelque chose qui peut-être loué.\nElle permet au client de voir une instance de `film`, soit un  film dans une certaine langue. \n\n## Table pagila.payment \n|Idx |Name |Data Type |\n|---|---|---|\n| * &#128273;  | payment\\_id| integer  DEFAULT nextval('pagila.payment_payment_id_seq'::regclass) |\n| * &#128270; &#11016; | customer\\_id| smallint  |\n| * &#128270; &#11016; | staff\\_id| smallint  |\n| * &#11016; | rental\\_id| integer  |\n| * | amount| numeric(5,2)  |\n| * | payment\\_date| timestamp  |\n\n\n### Foreign Keys\n|Type |Name |On |\n|---|---|---|\n|  | payment_staff_id_fkey | ( staff\\_id ) ref [pagila.staff](#staff) (staff\\_id) |\n|  | payment_rental_id_fkey | ( rental\\_id ) ref [pagila.rental](#rental) (rental\\_id) |\n|  | payment_customer_id_fkey | ( customer\\_id ) ref [pagila.customer](#customer) (customer\\_id) |\n\nUn paiement (une ligne de `payment`) concerne une location (un tuple  de `rental`), d'où la contrainte référentielle `payment_rental_id_fkey`.\nun paiement concerne ausi un client (tuple de `customer`) et un employé (tuple de `staff`).\n\n\n## Table pagila.rental \n|Idx |Name |Data Type |\n|---|---|---|\n| * &#128273;  &#11019; | rental\\_id| integer  DEFAULT nextval('pagila.rental_rental_id_seq'::regclass) |\n| * &#128269; | rental\\_date| timestamp  |\n| * &#128269; &#11016; | inventory\\_id| integer  |\n| * &#128269; &#11016; | customer\\_id| smallint  |\n|  | return\\_date| timestamp  |\n| * &#11016; | staff\\_id| smallint  |\n| * | last\\_update| timestamp  DEFAULT now() |\n\n\n### Foreign Keys\n|Type |Name |On |\n|---|---|---|\n|  | rental_staff_id_fkey | ( staff\\_id ) ref [pagila.staff](#staff) (staff\\_id) |\n|  | rental_inventory_id_fkey | ( inventory\\_id ) ref [pagila.inventory](#inventory) (inventory\\_id) |\n|  | rental_customer_id_fkey | ( customer\\_id ) ref [pagila.customer](#customer) (customer\\_id) |\n\n\n\n\n## Table pagila.staff \n|Idx |Name |Data Type |\n|---|---|---|\n| * &#128273;  &#11019; | staff\\_id| integer  DEFAULT nextval('pagila.staff_staff_id_seq'::regclass) |\n| * | first\\_name| varchar(45)  |\n| * | last\\_name| varchar(45)  |\n| * &#11016; | address\\_id| smallint  |\n|  | email| varchar(50)  |\n| * &#11016; | store\\_id| smallint  |\n| * | active| boolean  DEFAULT true |\n| * | username| varchar(16)  |\n|  | password| varchar(40)  |\n| * | last\\_update| timestamp  DEFAULT now() |\n|  | picture| bytea  |\n\n\n### Foreign Keys\n|Type |Name |On |\n|---|---|---|\n|  | staff_store_id_fkey | ( store\\_id ) ref [pagila.store](#store) (store\\_id) |\n|  | staff_address_id_fkey | ( address\\_id ) ref [pagila.address](#address) (address\\_id) |\n\n\n\n\n## Table pagila.store \n|Idx |Name |Data Type |\n|---|---|---|\n| * &#128273;  &#11019; | store\\_id| integer  DEFAULT nextval('pagila.store_store_id_seq'::regclass) |\n| * &#128269; &#11016; | manager\\_staff\\_id| smallint  |\n| * &#11016; | address\\_id| smallint  |\n| * | last\\_update| timestamp  DEFAULT now() |\n\n\n### Foreign Keys\n|Type |Name |On |\n|---|---|---|\n|  | store_manager_staff_id_fkey | ( manager\\_staff\\_id ) ref [pagila.staff](#staff) (staff\\_id) |\n|  | store_address_id_fkey | ( address\\_id ) ref [pagila.address](#address) (address\\_id) |\n\n\n\n\n\n",
    "supporting": [
      "schema-pagila_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}