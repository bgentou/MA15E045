{
  "hash": "16652148b7d575c254880b9d6953fc26",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Schéma : pagila (films)\"\ncategories: [pagila, crowfoot, DDL]\nsubtitle: \"pagila, film, relationnel, pattes de corbeau, crowfoot\"\ndate: \"2024-09-20\"\n\nformat:\n  pdf:\n    code-annotations: below\n    keep-tex: false\n    code-fold: false\n    toc: false\n    output-file: schema-pagila-film.pdf\n    include-in-header:\n      - text: \"\\\\lhead{{\\\\sf  Base de données \\\\\\\\ Schema pagila}}\"\n  html:\n    embed-resources: true\n    code-fold: true\n    output-file: schema-pagila-film.html\nparams:\n    year: 2024 \n    curriculum: \"L3 MIASHS/Ingémath\"\n    university: \"Université Paris Cité\"\n    homepage: \"https://bgentou.github.io/MA15E045/\"\n    moodle: \"https://moodle.u-paris.fr/course/view.php?id=2313\"\n\nengine: knitr\n---\n\n\n\n\n\n::: {.callout-warning}\n\nPrésentation de la partie `film` du schéma `pagila`, pour l'entrainement à PostGres. \n\n::: \n\n\n::: {layout=\"[80,20]\"}\n\n::: {#first-column}\n\n\n- **L3 MIASHS/Ingémath**\n- **[Université Paris Cité](https://www.u-paris.fr)**\n- Année 2024-2025\n- [Course Homepage](https://bgentou.github.io/MA15E045/)\n- [Moodle](https://moodle.u-paris.fr/course/view.php?id=2313)\n\n::: \n\n::: {#second-column}\n![](../images/UniversiteParis_monogramme_couleur_RVB.png){align=\"right\" style=\"size:50px;\" width=75}\n:::\n\n:::\n\n\n\n\n\n![Schema pagila créé par [DbSchema](https://dbschema.com)](../images/schemas-pagila-film.png)\n\n## Contexte\n\nDescription de quelques  tables from the `pagila` database, spécifiquement les tables liées au catalogue de filmss (sans considérer les tables liées au fichier client, à la gestion des locations, aux magasins).\n\n[Pagemaison de la base de données  `pagila`](https://github.com/devrimgunduz/pagila). \n\n[Pagemaison de la base de données  `sakila`](https://dev.mysql.com/doc/sakila/en/)\n\n\n\n\n\n\n\n## Table pagila.actor \n|Idx |Name |Data Type |\n|---|---|---|\n| * &#128273;  &#11019; | actor\\_id| integer  DEFAULT nextval('pagila.actor_actor_id_seq'::regclass) |\n| * | first\\_name| varchar(45)  |\n| * &#128270; | last\\_name| varchar(45)  |\n| * | last\\_update| timestamp  DEFAULT now() |\n\n`actor_id` sert de clé primaire. Noter le mécanisme de génération de nouvelles clés grâce au comportment par défaut et à l'usage de la fonction `nextval()` opérant sur une séquence associée à la table `actor`. \n\nLa colonne `last_update` sert à dater les mises à jour.  \n\n\n\n## Table pagila.category \n|Idx |Name |Data Type |\n|---|---|---|\n| * &#128273;  &#11019; | category\\_id| integer  DEFAULT nextval('pagila.category_category_id_seq'::regclass) |\n| * | name| varchar(25)  |\n| * | last\\_update| timestamp  DEFAULT now() |\n\n\n\n\n## Table pagila.film \n|Idx |Name |Data Type |\n|---|---|---|\n| * &#128273;  &#11019; | film\\_id| integer  DEFAULT nextval('pagila.film_film_id_seq'::regclass) |\n| * &#128270; | title| varchar(255)  |\n|  | description| text  |\n|  | release\\_year| year  |\n| * &#128270; &#11016; | language\\_id| smallint  |\n| &#128270; &#11016; | original\\_language\\_id| smallint  |\n| * | rental\\_duration| smallint  DEFAULT 3 |\n| * | rental\\_rate| numeric(4,2)  DEFAULT 4.99 |\n|  | length| smallint  |\n| * | replacement\\_cost| numeric(5,2)  DEFAULT 19.99 |\n|  | rating| mpaa\\_rating  DEFAULT 'G'::pagila.mpaa_rating |\n| * | last\\_update| timestamp  DEFAULT now() |\n|  | special\\_features| text[]  |\n\n\n##### Foreign Keys\n|Type |Name |On |\n|---|---|---|\n|  | film_original_language_id_fkey | ( original\\_language\\_id ) ref [pagila.language](#language) (language\\_id) |\n|  | film_language_id_fkey | ( language\\_id ) ref [pagila.language](#language) (language\\_id) |\n\nLes colonnes `film_id` (clé primaire), `original_language_id` et `language_id` sont utilisées pour réaliser des (équi)-jointures avec les tables `film_actor`, `film_category`, `film_language`\n\nUn film est censé n'avoir qu'une seule langue originale. L'association *film a pour langue orginale la langue xxx* est de un vers plusieurs. On peut la \nreprésenter à l'aide d'un attribut dans la table `film`.\n\n## Table pagila.film_actor \n|Idx |Name |Data Type |\n|---|---|---|\n| * &#128273;  &#11016; | actor\\_id| smallint  |\n| * &#128273;  &#11016; | film\\_id| smallint  |\n| * | last\\_update| timestamp  DEFAULT now() |\n\nC'est une table intermédiaire qui permet de représenter/traduire l'association plusieurs à plusieurs  *acteur joue dans film*. \n\n\n##### Foreign Keys\n|Type |Name |On |\n|---|---|---|\n|  | film_actor_film_id_fkey | ( film\\_id ) ref [pagila.film](#film) (film\\_id) |\n|  | film_actor_actor_id_fkey | ( actor\\_id ) ref [pagila.actor](#actor) (actor\\_id) |\n\n\n\n\n## Table pagila.film_category \n|Idx |Name |Data Type |\n|---|---|---|\n| * &#128273;  &#11016; | film\\_id| smallint  |\n| * &#128273;  &#11016; | category\\_id| smallint  |\n| * | last\\_update| timestamp  DEFAULT now() |\n\n\n##### Foreign Keys\n|Type |Name |On |\n|---|---|---|\n|  | film_category_film_id_fkey | ( film\\_id ) ref [pagila.film](#film) (film\\_id) |\n|  | film_category_category_id_fkey | ( category\\_id ) ref [pagila.category](#category) (category\\_id) |\n\nC'est une table intermédiaire qui permet de représenter/traduire l'association plusieurs à plusieurs  *film relève de catégorie*. \n\n\n\n## Table pagila.language \n|Idx |Name |Data Type |\n|---|---|---|\n| * &#128273;  &#11019; | language\\_id| integer  DEFAULT nextval('pagila.language_language_id_seq'::regclass) |\n| * | name| char(20)  |\n| * | last\\_update| timestamp  DEFAULT now() |\n\n\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}