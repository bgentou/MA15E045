{
  "hash": "57f0f5b5320988040d9676d2892ddfaa",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Schéma : dellstore\"\ncategories: [dellstore, crowfoot, DDL]\nsubtitle: \"dellstore, relationnel, pattes de corbeau, crowfoot\"\ndate: \"2024-09-20\"\n\nformat:\n  pdf:\n    code-annotations: below\n    keep-tex: false\n    code-fold: false\n    toc: false\n    output-file: schema-dellstore.pdf\n    include-in-header:\n      - text: \"\\\\lhead{{\\\\sf  Base de données \\\\\\\\ Schema dellstore}}\"\n  html:\n    embed-resources: true\n    code-fold: true\n    output-file: schema-dellstore.html\nparams:\n    year: 2024 \n    curriculum: \"L3 MIASHS/Ingémath\"\n    university: \"Université Paris Cité\"\n    homepage: \"https://bgentou.github.io/MA15E045/\"\n    moodle: \"https://moodle.u-paris.fr/course/view.php?id=2313\"\n\nengine: knitr\n---\n\n\n\n\n\n::: {.callout-warning}\n\nPrésentation du schéma `dellstore`, pour l'entrainement à PostGres. \n\n::: \n\n\n::: {layout=\"[80,20]\"}\n\n::: {#first-column}\n\n\n- **L3 MIASHS/Ingémath**\n- **[Université Paris Cité](https://www.u-paris.fr)**\n- Année 2024-2025\n- [Course Homepage](https://bgentou.github.io/MA15E045/)\n- [Moodle](https://moodle.u-paris.fr/course/view.php?id=2313)\n\n::: \n\n::: {#second-column}\n![](../images/UniversiteParis_monogramme_couleur_RVB.png){align=\"right\" style=\"size:50px;\" width=75}\n:::\n\n:::\n\n\n\n\n\n![Schema dellstore créé par [DbSchema](https://dbschema.com)](/images/schema-dellstore.png)\n\n## Contexte\n\n\nLa base de données du magasin de DVD est gérée par six procédures stockées. Les deux premières sont utilisées pendant la phase de connexion. \n\nSi le client revient, la procédure Login est utilisée pour récupérer les informations du client, en particulier \nl'identifiant du client (CUSTOMERID). Si le client est un nouveau client, New_customer est utilisée pour créer une nouvelle ligne dans la table Customers \navec les données de l'utilisateur. Après la phase de connexion, le client peut rechercher un DVD par catégorie, acteur ou titre, \nacteur ou titre. Ces critères sont mis en œuvre par Browse_by_category, Browse_by_actor et Browse_by_title, respectivement. \nEnfin, une fois que l'utilisateur a fait ses choix, la procédure stockée Purchase est appelée pour terminer la transaction.\n   \nLes procédures stockées de l'application DS2 présentent des caractéristiques qui permettent de mieux modéliser les magasins en ligne d'aujourd'hui. \n\nLors de la connexion, par exemple, la commande précédente de l'utilisateur (jusqu'à dix titres) est signalée, ainsi que les titres \nrecommandés par d'autres clients qui aiment ces titres. \n\nLa fonction Parcourir_par_catégorie renvoie les titres \nde la catégorie spécifiée qui sont actuellement en vente. \n\nEnfin, la procédure stockée Achat vérifie désormais le champ QUAN_IN_STOCK \nde la table Inventaire pour voir si un titre est disponible. Cette opération est réalisée à l'aide d'une transaction de base de données, \n\nde sorte que si la quantité est insuffisante pour honorer la commande, les données QUAN_IN_STOCK ne sont pas mises à jour et un nouvel enregistrement n'est pas écrit dans la base de données. \nni un nouvel enregistrement dans la table ORDERS. \n\nLe schéma de la base de données « dellstore » dans PostgreSQL, utilisée à des fins de formation.\n\n1. **Tables** :\n   - **dellstore.categories** : Contient les détails des catégories avec des colonnes comme `category` (clé primaire) et `categoryname`. (`Action`, `Animation`, `Children`, ..., en tout 16 catégories)\n   - **dellstore.cust_hist** : Trace l'*historique* des clients avec des références aux clients , aux commandes (*orders*)et aux produits (*products*), en utilisant des clés étrangères (`customerid`, `(*customers*)orderid`, et `prod_id`).\n   - **dellstore.customers** : Stocke les informations sur les clients (*customers*) avec des champs tels que `customerid`, `firstname`, `lastname`, `address`, `city`, et `creditcard` details.\n   - **dellstore.inventory** : Gère l'inventaire des produits en suivant `prod_id` (clé primaire).\n\n2. **Clés étrangères** :\n   - **dellstore.cust_hist** a des références de clés étrangères à d'autres tables comme `customers`, `orders`, et `products`.\n\nCe schéma décrit les tables clés utilisées pour une application de type commerce électronique, gérant les catégories, les informations sur les clients et les transactions. Vous souhaitez obtenir une description plus détaillée de certaines tables ou de leurs relations ?\n\nLes sources du schéma sont décrites  [sur le site de Dell](https://linux.dell.com/dvdstore/readme.txt) \n\n## Table dellstore.categories\n\n|Idx |Name |Data Type |\n|---|---|---|\n| * &#128273;  &#11019; | category| integer  DEFAULT nextval('dellstore.categories_category_seq'::regclass) |\n| * | categoryname| varchar(50)  |\n\n\n\n## Table dellstore.cust_hist\n\n|Idx |Name |Data Type |\n|---|---|---|\n| * &#128270; &#11016; | customerid| integer  |\n| * &#11016; | orderid| integer  |\n| * &#11016; | prod\\_id| integer  |\n\n\n##### Foreign Keys\n|Type |Name |On |\n|---|---|---|\n|  | fk_cust_hist_customerid | ( customerid ) ref [dellstore.customers](#customers) (customerid) |\n|  | fk_cust_hist_orders | ( orderid ) ref [dellstore.orders](#orders) (orderid) |\n|  | fk_cust_hist_products | ( prod\\_id ) ref [dellstore.products](#products) (prod\\_id) |\n\n{{< fa hand-point-right >}} C'est une table *raccourci* (redondante) dont le contenu peut être reconstruit à l'aide de `customers`, `orders` et `orderlines`?  \n\n\n\n## Table dellstore.customers\n\n|Idx |Name |Data Type |\n|---|---|---|\n| * &#128273;  &#11019; | customerid| integer  DEFAULT nextval('dellstore.customers_customerid_seq'::regclass) |\n| * | firstname| varchar(50)  |\n| * | lastname| varchar(50)  |\n| * | address1| varchar(50)  |\n|  | address2| varchar(50)  |\n| * | city| varchar(50)  |\n|  | state| varchar(50)  |\n|  | zip| integer  |\n| * | country| varchar(50)  |\n| * | region| smallint  |\n|  | email| varchar(50)  |\n|  | phone| varchar(50)  |\n| * | creditcardtype| integer  |\n| * | creditcard| varchar(50)  |\n| * | creditcardexpiration| varchar(50)  |\n| * &#128269; | username| varchar(50)  |\n| * | password| varchar(50)  |\n|  | age| smallint  |\n|  | income| integer  |\n|  | gender| varchar(1)  |\n\n\n\n\n## Table dellstore.inventory\n\n|Idx |Name |Data Type |\n|---|---|---|\n| * &#128273;  &#11016; | prod\\_id| integer  |\n| * | quan\\_in\\_stock| integer  |\n| * | sales| integer  |\n\n\n##### Foreign Keys\n|Type |Name |On |\n|---|---|---|\n|  | fk_inventory_products | ( prod\\_id ) ref [dellstore.products](#products) (prod\\_id) |\n\nCette table nous indique l'état du stock pour chaque produit au catalogue, et combien d'exemplaires du produit ont étés \nvendus. \n\n\n## Table dellstore.orderlines\n\n|Idx |Name |Data Type |\n|---|---|---|\n| * &#128269; | orderlineid| integer  |\n| * &#128269; &#11016; | orderid| integer  |\n| * &#11016; | prod\\_id| integer  |\n| * | quantity| smallint  |\n| * | orderdate| date  |\n\n\n##### Foreign Keys\n|Type |Name |On |\n|---|---|---|\n|  | fk_orderid | ( orderid ) ref [dellstore.orders](#orders) (orderid) |\n|  | fk_orderlines_products | ( prod\\_id ) ref [dellstore.products](#products) (prod\\_id) |\n\nChaque ligne de `orderlines` nous renseigne sur l'achat d'un produit désigné par `prod_id` en une certaine \nquantité , à une certaine date. \n\n\n## Table dellstore.orders\n\n|Idx |Name |Data Type |\n|---|---|---|\n| * &#128273;  &#11019; | orderid| integer  DEFAULT nextval('dellstore.orders_orderid_seq'::regclass) |\n| * | orderdate| date  |\n| &#128270; &#11016; | customerid| integer  |\n| * | netamount| numeric(12,2)  |\n| * | tax| numeric(12,2)  |\n| * | totalamount| numeric(12,2)  |\n\n\n##### Foreign Keys\n|Type |Name |On |\n|---|---|---|\n|  | fk_customerid | ( customerid ) ref [dellstore.customers](#customers) (customerid) |\n\n\n\n\n## Table dellstore.products\n\n|Idx |Name |Data Type |\n|---|---|---|\n| * &#128273;  &#11019; | prod\\_id| integer  DEFAULT nextval('dellstore.products_prod_id_seq'::regclass) |\n| * &#128270; &#11016; | category| integer  |\n| * | title| varchar(50)  |\n| * | actor| varchar(50)  |\n| * | price| numeric(12,2)  |\n| &#128270; | special| smallint  |\n| * | common\\_prod\\_id| integer  |\n\n Un petit apperçu de la table aide à comprendre :\n\n\n\n\n\n```{.default}\n+---------+----------+--------------------+------------------+-------+---------+----------------+\n| prod_id | category | title              | actor            | price | special | common_prod_id |\n|---------+----------+--------------------+------------------+-------+---------+----------------|\n| 1       | 14       | ACADEMY ACADEMY    | PENELOPE GUINESS | 25.99 | 0       | 1976           |\n| 2       | 6        | ACADEMY ACE        | EWAN RICKMAN     | 20.99 | 0       | 6289           |\n| 3       | 6        | ACADEMY ADAPTATION | VIVIEN KAHN      | 28.99 | 0       | 7173           |\n| 4       | 3        | ACADEMY AFFAIR     | ALAN MARX        | 14.99 | 0       | 8042           |\n| 5       | 3        | ACADEMY AFRICAN    | CARRIE HANNAH    | 11.99 | 1       | 2183           |\n| 6       | 9        | ACADEMY AGENT      | LISA SPACEK      | 15.99 | 0       | 5243           |\n| 7       | 8        | ACADEMY AIRPLANE   | FRANCES WINFREY  | 25.99 | 0       | 7700           |\n| 8       | 7        | ACADEMY AIRPORT    | FARRAH TOMEI     | 16.99 | 0       | 9191           |\n| 9       | 2        | ACADEMY ALABAMA    | JULIETTE WEAVER  | 10.99 | 0       | 6633           |\n| 10      | 15       | ACADEMY ALADDIN    | ANNETTE FREEMAN  | 9.99  | 0       | 631            |\n+---------+----------+--------------------+------------------+-------+---------+----------------+\n```\n\n\n\n\nUne ligne représente un DVD fictif. Un DVD contient un film désigné par un titre. Dans ce film apparaît une actrice \nou un acteur. Le DVD est vendu au prix `price` (USD?). Un film/produi relève d'une seule catégorie.\n- `special` vaut 1 pour 104 lignes, 0 pour les autes. \n- `common_prod_id` ?\n\n\n\n##### Foreign Keys\n|Type |Name |On |\n|---|---|---|\n| Vir | fk_products_category | ( category ) ref [dellstore.categories](#categories) (category) |\n\n\n\n\n## Table dellstore.reorder\n\n|Idx |Name |Data Type |\n|---|---|---|\n| * &#11016; | prod\\_id| integer  |\n| * | date\\_low| date  |\n| * | quan\\_low| integer  |\n|  | date\\_reordered| date  |\n|  | quan\\_reordered| integer  |\n|  | date\\_expected| date  |\n\n\n\n##### Foreign Keys\n|Type |Name |On |\n|---|---|---|\n|  | fk_reorder_products | ( prod\\_id ) ref [dellstore.products](#products) (prod\\_id) |\n\n\n::: {.callout-note}\n\nOn peut se demander quel est l'usage de la table `reorder`. \n\n:::\n\nLa table `reorder` gère (peut-être) les réapprovisionements  de produits (lorsque l'inventaire `inventory` signale \nla quantité en stock d'un produit est dangereusement basse, on effectue une nouvelle commande).\n\n- Colonnes :\n  - `prod_id` : un nombre entier identifiant le produit (clé étrangère liée à la table `products`).\n  - `date_low` : la date à laquelle le niveau de stock a été détecté comme bas.\n  - `quan_low` : La quantité qui a déclenché le processus de réapprovisionnement.\n  - `date_reordered` : La date à laquelle le produit a été commandé à nouveau.\n  - `quan_reordered` : La quantité du produit commandé à nouveau.\n  - `date_expected` : la date à laquelle les produits commandés à nouveau sont censés arriver.\n\n- ** Foreign Key ** :\n  - `fk_reorder_products` : lie `prod_id` à la table `products`.\n\n{{< fa hand-point-right >}} Dans l'instance courante du schéma, cette table est vide.\n ",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}