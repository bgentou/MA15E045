{
  "hash": "8cf33738e440b1b67afbd8f834e10c6c",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"BD VII: Administration et Droits\"\n---\n\n::: {.cell}\n\n:::\n\n\n\n\n\n\n\n---\n\n# Introduction  {background-color=\"#1c191c\"}\n\n---\n\n\nSQL n'est pas *seulement* un langage de définition, de manipulation et d'interrogation de données\n\n- SQL permet de définir une politique d'accès aux données très fine et donc de contrôler la sécurité des bases de données\n\n- SQL permet d'administrer tous les aspects d'un SGBD : chaque objet (schéma, table, vue, colonne, type de données, utilisateur, rôle, droit, fonction, etc) est décrit dans des tables d'administration que l'on peut interroger et modifier directement en SQL.\n\n\nCes remarques ne sont qu'un appercu des principes de Codd\n\n---\n\n## Les lois des tables {.smaller}\n\n::: {.callout-note}\n\n\n\n\n\n\n### Codd's Twelve Principles\n\n1. Information is represented logically in *tables*\n2. Data must be *logically accessible* by table, primary key, and column.\n3. *Null* values must be uniformly treated as “missing information,” not as empty strings, blanks, or zeros.\n4. Metadata (data about the database) must be stored in the database just as regular data is\n5. A single language must be able to define data, views, integrity\nconstraints, *authorization*, *transactions*, and data manipulation\n1. *Views* must show the updates of their *base tables* and vice versa\n2. A single operation must be available to do each of the following\noperations: retrieve data, insert data, update data, or delete data\n1. Batch and end-user operations are *logically separate* from physical\nstorage and access methods\n1. Batch and end-user operations can change the database schema without having to recreate it or the applications built upon it\n2.  *Integrity* constraints must be available and stored in the metadata, not in\nan application program\n1.  The data manipulation language of the relational system should not care\nwhere or how the physical data is distributed and should not require\nalteration if the physical data is centralized or distributed\n1.  Any *row processing* done in the system must obey the same *integrity rules* and *constraints* that set-processing operations do\n\n\n\n\n\n\n:::\n\n\n---\n\n# Droits  {background-color=\"#1c191c\"}\n\n---\n\n## Problème\n\nUn *serveur* de BD met à la disposition d'une collectivité\nd'usagers un multitude de bases formées d'une collection de\ntables, de vues, de routines...\n\n- Les usagers ne sont pas tous égaux...\n\n--\n\nCertains utilisateurs doivent pouvoir créer des bases, d'autres les mettre à jour, d'autres les consulter\n\n--\n\n- {{< fa ban >}}  Le contrôle de l'accès...\n\nPeut être motivé par un désir de maintenir l'*intégrité* ou la *confidentialité* des données.\n\nLe niveau de contrôle (granularité) désirable peut varier : base, schema, table, colonne, ligne....\n\n\n\n---\n\n\n## Confidentialité et sécurité\n\n*Objectif :*\n\nProtéger les données gérées contre tout accès (malveillant ou accidentel) non autorisé\n\n. . .\n\n- Quels outils ?\n\nUn système de **privilèges** implémenté dans SQL pour définir l'accès des usagers et plus généralement\ndes rôles aux différents objets\n\n---\n\n##  Commandes\n\nPour octroyer ou retirer des droits d'accès (par exemple sur une relation ou une vue) :\n\n`GRANT` et `REVOKE`\n\nLes droits d'accès donnent la possibilité d'exécuter des requêtes SQL\n\n{{< fa hand-point-right >}} Le propriétaire (créateur) d'une relation à tous les droits sur cette relation et on ne peut lui les retirer\n\n\n---\n\n## Les commandes\n\nDépendent du type d'objet auquel on s'intéresse.\n\nPour une table ou une vue :\n\n::::: {.columns}\n::: {.column}\n\nSyntaxe :\n\n```{.sql}\nGRANT {ALL PRIVILEGES |\n   privilege {,privilege*}\nON {[TABLE] table_name [, ...]\n    | ALL TABLES IN SCHEMA schema_name}\nTO role-specification [, ...]\n[WITH GRANT OPTION]\n```\n:::\n\n::: {.column}\n\n`role-specification` :\n\n```{.sql}\nrole_name, PUBLIC, ...\n```\n\n:::\n\n\n::: {.column}\n\n`privilege` :\n\n```{.sql}\nSELECT, DELETE, INSERT,\nUPDATE [(nom-attribut\n    {, nom-attribut})],\nREFERENCES [(nom-attribut\n     {, nom-attribut})]\n```\n\n:::\n\n:::::\n\n\n\n\n\n\n{{< fa hand-point-right >}}  *`WITH GRANT OPTION`:]  si spécifié, donne le droit  de transmettre les droits obtenus\n\n{{< fa binoculars >}}  voir : [https://www.postgresql.org/docs/current/sql-grant.html](https://www.postgresql.org/docs/current/sql-grant.html)\n\n\n---\n\n\n## Les commandes  (suite) : granularité\n\nOn peut aller plus loin et spécifier le droit d'accès à seulement une ou plusieurs colonnes d'une table\n\nPour d'autres objets, comme les domaines, fonction, bases de données, schémas ou rôles d'autres types de droits sont pertinents:\n\n- le droit de *créer* une BD ou un schéma dans une BD existante\n- le droit de se *connecter* à une BD existante\n- le droit d'*exécuter* une fonction\n- le droit d'*usage* d'un schéma (i.e. d'en voir les objets existants)\n- le droit d'*attribuer* des rôles à des utilisateurs\n\n---\n\n\nExemples de syntaxe pour une BD:\n\n```{.sql}\nGRANT { { CREATE | CONNECT | TEMPORARY | TEMP } [, ...]\n        | ALL [ PRIVILEGES ] }\nON DATABASE database_name [, ...]\nTO role_specification [, ...]\n[ WITH GRANT OPTION ]\n[ GRANTED BY role_specification ]\n```\n\nCommentaire sur\n\n- `TEMPORARY`\n- `GRANTED BY ...`\n\n\n---\n\n\n## Révoquer des droits\n\nvia le mot clé `REVOKE`\n\nSyntaxe (simplifiée) :\n\n```{.sql}\nREVOKE [ GRANT OPTION FOR ]\n{ { SELECT | INSERT | UPDATE | DELETE }\n| ALL [ PRIVILEGES ] }\n\nON { [ TABLE ] table_name [, ...]\n      | ALL TABLES IN SCHEMA schema_name }\n\nFROM role_spec [, ...]\n[ GRANTED BY role_spec ]\n[ CASCADE | RESTRICT ]\n```\n\n\n {{< fa binoculars >}}  *syntaxe complète:] voir [https://www.postgresql.org/docs/current/sql-revoke.html](https://www.postgresql.org/docs/current/sql-revoke.html)\n\n\nCommentaire\n\n- `GRANT OPTION FOR`\n- `CASCADE`\n- `RESTRICT`\n\n\n---\n\n\n\n## Exemples\n\n```{.sql}\nGRANT USAGE\nON SCHEMA durand\nTO thomas007\n```\n\n. . .\n\n```{.sql}\nGRANT SELECT\nON ALL TABLES IN SCHEMA durand\nTO thomas007\n```\n\n. . .\n\nOn peut se mettre \"à la place\" de l'utilisateur thomas007 par la commande :\n\n```{.sql}\nset role thomas007\n```\n\n. . .\n\n```{.sql}\nREVOKE SELECT\nON ALL TABLES IN SCHEMA durand\nFROM thomas007\n```\n\n```{.sql}\nREVOKE USAGE\nON SCHEMA durand\nFROM thomas007\n```\n\nOn pouvait donner directement les mêmes droits à tous\nles utilisateurs d'un même rôle `etudiant` par exemple plutôt qu'un seul utilisateur\n\n\n- `USAGE`\n- `SELECT`\n- `EXECUTE`\n\n\n---\n\n## Exemples  (suite)\n\nSupposons que le schema `durand` contiennent une table `resultat`\ndont une des colonnes se nomme `identifiant`.\n\nQue peut faire (et ne pas faire) l'utilisateur `thomas007` après ces trois commandes ?\n\n- `GRANT INSERT (identifiant) ON TABLE durand.resultat TO thomas007;`\n\n- `GRANT USAGE ON SCHEMA durand  TO thomas007`\n\n- `GRANT SELECT ON TABLE durand.resultat TO thomas007;`\n\n. . .\n\nIl peut selectionner les infos de la table `resultat`,\ninserer un tuple avec une valeur pour\nl'attribut `identifiant` et null pour les autres attributs\n\nIl ne peut pas effacer son insertion...\n\n\n\n\n## Politique de droits\n\n\n- Lors de la conception d'une base de données, on anticipe le fait que tous les utilisateurs ne vont pas avoir les mêmes droits\n\n- Il peut y avoir plusieurs niveaux d'administrateurs aussi\n\n- L'architecture des droits doit être pensée le plus finement possible pour éviter les problèmes de sécurité\n\n- SQL permet d'implémenter directement cela (et ne pas le laisser à la couche applicative au dessus)\n\n\nRenvoyer aux principes de Codd\n\n\n# Administration  {background-color=\"#1c191c\"}\n\n\n\n## Administrer : utilisation d'une \"métabase\"\n\n\n- Les SGBD relationnels contiennent des schémas particuliers qui décrivent totalement l'état des bases :\n  + schéma existants,\n  + tables,\n  + colonnes,\n  + utilisateurs,\n  + fonction stockées,\n  + contraintes,\n  + etc\n\n- Ces schémas  constituent  une **métabase**\n\n- On peut utiliser SQL pour interroger ces tables et donc (presque) tout savoir de l'état du SGBD sans faire appel à un langage extérieur\n\n- On peut aussi apporter des modifications en utilisant les instructions SQL classiques `INSERT`, `UPDATE`, `DELETE`, etc\n\n---\n\nRelier aux principes de Codd\n\n> Méta est un préfixe qui provient du grec μετά (meta) (après, au-delà de, avec).\n> Il exprime tout à la fois la réflexion, le changement, la succession, le fait d'aller au-delà,\n> à côté de, entre ou avec. Selon le contexte, le préfixe équivaut au sens de profond\n> (comme les métadonnées ou le métalangage), haut ou grand (comme méta-revue).\n\n.fr[Wikipedia]\n\n\n\n---\n\n\n## Administrer : utilisation d'une \"méta-base\"\n\nDeux schémas jouent un rôle essentiel dans l'administration de Postgres (situation similaire dans tous les SGBD)\n\n#### `information_schema`\n\n- les définitions de tables, de vues, de colonnes, les contraintes, ...\n- il est formé de tables et surtout de (très nombreuses) vues\n- comme pour les autres tables, les instructions, `CREATE, ALTER, DROP` modifient le contenu\nde ce schéma (une seule instruction `ALTER TABLE` peut\nengendrer en cascade plusieurs mises à jours dans les tables de\n`information_schema`)\n- contient, en théorie, des informations compatibles avec le standard SQL (identique sur tout SGBD respectant la norme)\n\n#### `pg_catalog`\n\n- Contient des informations de nature similaire à `information_schema`  mais  spécifiques à l'organisation de Postgres\n\n\n\n\n\n---\n\n\n\n## Quelques tables et vues de `information_schema`\n\n{{< fa binoculars >}} Une liste complète des tables et vues de `information_schema` se trouve ici :\n\n[https://www.postgresql.org/docs/current/information-schema.html](https://www.postgresql.org/docs/current/information-schema.html)\n\nQuelques exemples:\n\n\n- `schemata` contient la liste des schémas, leurs propriétaires, leurs catalogue d'appartenance, etc\n\n- `tables` contient la liste des noms de toutes les tables et vues et, entre autres, leurs BD et schémas d'appartenance\n\n- `columns` contient les noms de colonnes, les tables (et donc schémas et BD) auxquels elles appartiennent.\n\n- `role_table_grants` contient la liste de tous les droits alloués, à qui, par qui etc\n\n\n---\n\n\n## Quelques tables et vues de `pg_catalog`\n\n\nUne liste complète des tables et vues de `pg_catalog` se trouve ici :\n\n{{< fa binoculars >}} [https://www.postgresql.org/docs/current/catalogs.html](https://www.postgresql.org/docs/current/catalogs.html)\n\nQuelques exemples:\n\n\n- `pg_user` contient la liste des utilisateurs, leur id système\n\n- `pg_tables` contient des informations similaires à `information_schema.tables`\n\n- `pg_views` contient la liste des vues\n\n- `pg_roles` contient la liste des roles\n\n- `pg_auth_members` met en relation les rôles entre eux (quel rôle est contenu dans tel autre)\n\n\n---\n\n\n\n## Exemples\n\n```\nSELECT *\nFROM information_schema.tables;\n```\n\n```{.sql}\nSELECT table_name\nFROM information_schema.tables\nWHERE table_type='VIEW' AND table_schema='durand';\n```\n\n```{.sql}\n    +------------------+\n    | table_name       |\n    |------------------|\n    | listevuecc1      |\n    | notescc1         |\n    | listevuecc1_isif |\n    | q4               |\n    | q5               |\n    | q6               |\n    | defi1            |\n    | q1               |\n    | q2               |\n    | q3               |\n    +------------------+\n```\n\n---\n\n## Exemple : Représentation des droits dans la metabase\n\n```{.sql}\nSELECT table_schema, table_name, privilege_type\nFROM information_schema.role_table_grants\nWHERE grantee='durand'\n```\n\n\n\n\n```{.default}\n +----------------+--------------------+------------------+\n | table_schema   | table_name         | privilege_type   |\n |----------------+--------------------+------------------|\n | gestion_2022   | etudiantsmiashs    | INSERT           |\n | gestion_2022   | etudiantsmiashs    | SELECT           |\n | gestion_2022   | etudiantsmiashs    | UPDATE           |\n | gestion_2022   | etudiantsmiashs    | DELETE           |\n | gestion_2022   | etudiantsmiashs    | TRUNCATE         |\n | gestion_2022   | etudiantsmiashs    | REFERENCES       |\n | gestion_2022   | etudiantsmiashs    | TRIGGER          |\n```\n\n\n\n\n---\n\n## `information_schema.table_privileges`\n\nThe view `table_privileges` identifies all privileges granted on tables or views to a currently enabled role or by a currently enabled role.\n\nThere is one row for each combination of table, grantor, and grantee.\n\n\n```{.sql}\n\n```\n\n\nLe role `PUBLIC` dispose du privilège de `SELECT` sur les tables de `pg_catalog`  et  de `information_schema`\n\n\n# Fin  {background-color=\"#1c191c\"}\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}