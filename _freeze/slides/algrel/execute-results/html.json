{
  "hash": "3f03c4f4227857826ac3dd967478dfa6",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"BD I: Algèbre Relationnelle\"\nsubtitle: \"Bases de Données Licences MIASHS et Mathématiques\"\nauthor: \"Équipe BD\"\ninstitute: \"Université de Paris\"\n---\n\n\n\n\n# Plan\n\n- Un peu d'histoire\n\n- Schémas et relations\n\n- Formalisation alternative\n\n- Premiers opérateurs du langage de manipulation de données \n\n- Opérations complémentaires : les jointures\n\n- Variations sur les jointures\n\n\n\n# Le modèle relationnel {background-color=\"#1c191c\"}\n\n\n\n- Formulé par [E. Codd](https://en.wikipedia.org/wiki/Edgar_F._Codd) en 1970\n\n- Fondé sur la théorie des relations (partie de la théorie naïve des ensembles)\n\n- Propose une solution pour\n \n  + la modélisation et \n  + l'interrogation de données\n\n- Facile à traduire/mettre en œuvre dans des langages *réels* exemple~: `Structured Query Language (SQL)`\n\n\n\n\n## Un peu de formalisation\n\nRappel sur la notion de relation (au sens classique)\n\n\n::: {.callout-important}\n\n### Definition : Domaine \n\nUn ensemble d'éléments\n\n:::\n\nExemples :  entiers, flottants, chaines de caractères, date, ...\n\nLes types d'un langage de programmation comme `C`, `Java`, ...\n\n\n\n\n## Remarque \n\n- Un *domaine* peut se définir \n\n  - en *extension* (en donnant la\nliste de toutes les valeurs possibles) ou\n\n  -  en *intention* (en donnant une propriété caractéristique).\n\n\n\n## Produit cartésien\n\n::: {.callout-important}\n\n### Définition \n\nLe *Produit cartésien*  d'une liste de domaines $D_1, D_2, \\dots, D_k$, noté \n\n$$D_1 \\times D_2 \\times \\dots \\times D_k$$\n\nest l'ensemble\n\n$$\\Bigl\\{(t_1,t_2,\\dots,t_k);\\ t_i\\in D_i \\text{ pour } i=1,\\dots,k\\Bigr\\}$$\n\n\nUn élément $t=(t_1,t_2,\\dots,t_k)\\in D_1 \\times D_2 \\times \\dots \\times  D_k$ est appelé  $k$ -uplet\n\n:::\n\n\n\n\n## Relations (classiques)\n\n\n\n\nUne *Relation* $R$ est un  sous-ensemble de \n\n$$D_1\\times D_2\\times \\cdots \\times D_k$$\n\noù $D_1,...,D_k$ sont des domaines\n\n\n$$R\\subset D_1  \\times D_2\\times \\cdots \\times D_k$$\n\n\n\n\n## Exemple  \n\n\n\n\n\n\n\n::::: {.columns}\n::: {.column}\n\nDeux domaines \n\n$$D_1=\\left\\{1,2,5\\right\\} \\quad D_2=\\left\\{2,4\\right\\}$$\n\nUn produit cartésien \n\n$$D_1 \\times D_2 =\n\\left\\{(1,2),(1,4),(2,2),(2,4),(5,2),(5,4)\\right\\}$$\n\nUne relation \n\n$$R =\\left\\{(1,2),(1,4),(5,2),(5,4)\\right\\}$$\n\nUne relation est un (sous-) ensemble (d'un produit cartésien)\n\n:::\n\n::: {.column}\n\nOn peut  représenter $R$  par le tableau :\n\n| $X_1$  | $X_2$ |\n|:---:|:---:|\n|  1    |  2 |\n|  1    |  4 |\n|  5    |  2 |\n|  5    |  4 |\n\nChaque ligne de la table correspond à  un élément de la relation $R$ \n\n:::\n\n::::: \n\n\n\n\n\n## Relations (classiques)\n\nDans ce cours, toutes les relations ont  un nombre fini d'éléments !\n\n## *Cardinalité* de la relation $R$: $|R|$\n\nOn appelle *cardinalité* d'une relation $R$, notée $|R|$, le nombre d'éléments  de $R$.\n\n\n## *Arité* de la relation $R$\n\nSoit $R\\subset D_1\\times D_2\\times \\cdots \\times D_k$, l'entier $k$ est appelé *arité* de $R$.\n\nOn parle parfois aussi de *degré* d'une relation.\n\nUne relation binaire est une relation d'arité $2$\n\n\n\n# Schémas et relations  {background-color=\"#1c191c\"}\n\n\n\n## Relations et schémas\n\n\n- Une *relation* (au sens classique) peut se voir comme une table\nà deux dimensions :\n\n- chaque ligne correspond alors à un $k$-uplet (si la relation est d'arité $k$),\n\n- chaque élément d'une colonne est à valeur dans  un domaine.\n\n\n- Un *domaine* peut apparaître plusieurs fois dans la définition d'une relation.\n\n. . .\n\nEn BD relationnelle, on veut pouvoir donner un nom à chaque colonne\n\n- *Attribut*:  nom/rôle de la colonne. Précise la sémantique de celle-ci. \n \n{{< fa  triangle-exclamation >}}  Pas deux attributs identiques dans une même table\n\n\n::: {.callout-note}\n\nL'idée de nommer les colonnes plutôt que de les désigner par une position/un numéro se retrouve dans les sytèmes qui manipulent des données tabulaires (`Pandas/Python`, `R`, `Spark`, ...). \n\n:::\n\n\n## Schéma d'une relation \n\n\n::: {.callout-important}\n\n### Définition\n\nLe *Schéma* d'une relation $R$ est la donnée  des  attributs et domaines de la relation\n\n:::\n\nLe schéma peut se noter\n\n$$R(A_1\\! :\\!\nD_1,A_2\\! :\\! D_2,\\dots,A_k\\! :\\! D_k)$$\n\noù $A_i$ : attribut et $D_i$ : domaine.\n\n\n\n\n## Exemple de schéma\n\n*ville* :  ensemble de chaînes de caractères (noms de villes).\n\n*heure* :\nensemble de chaînes de caractères de la forme $XYhZT$ où\n$X,Y,Z,T$ sont des chiffres\n\nEn notation ISO une heure s'écrit 'HH:MM:SS' (s' on oublie le fuseau horaire) 2024-06-27 17:07:32.958393\n\n\n\n| h-dep |   dest | h-arr |  prov |\n|:-------:|:-------|:-------:|:---------|\n| 13h15    | Lyon    |   15h15   | Paris   |\n| 13h22    | Nantes  |    15h30  | Paris  |\n\n*Schéma*:  Train(h-dep:*heure*,\ndest:*ville* , h-arr:*heure* , prov:*ville*)\n\nArité : $4$, Cardinalité : $2$\n\nL'ordre (des lignes ou colonnes) n'a pas vraiment d'importance\n\n\n\n\n\n\n# Relations et schémas : formalisation alternative   {background-color=\"#1c191c\"}\n\n\n\n##  Formalisation alternative\n\n\n- En BD, l'ordre des éléments et l'ordre des colonnes n'a pas d'importance (on désigne les membres d'un $k$-uplet par leur nom plutôt que par leur position/rang)\n\n- La définition formelle diffère donc de celle \td'une relation classique\n\n- Soient $\\{A_1,...,A_k\\}$ un ensemble fini et $D_1,...,D_k$ suite de domaines.\n\n::: {.callout-important}\n\n### Notation\n\nUne relation $R$ de schéma $R(A_1\\! :\\! D_1,A_2\\! :\\! D_2,\\dots,A_k\\! :\\! D_k)$ est la donnée d'un ensemble d'éléments, noté $\\mathcal{R}$ et de $k$  fonctions $\\mathcal{A}_1: \\mathcal{R}\\rightarrow D_1$, ..., $\\mathcal{A}_k: \\mathcal{R}\\rightarrow D_k$.\n\nPour tout $t\\in \\mathcal{R}$ et $i\\leq k$, on note $t.A_i=\\mathcal{A}_i(t)$ l'image par $\\mathcal{A}_i$ de $t$.\n\nUn élément $t$ de $\\mathcal{R}$ est appelé *tuple* de la relation $R$\n\n:::\n\n\n---\n\n\nL'ensemble des valeurs $t.A_1,...., t.A_k$ associées à un $t\\in \\mathcal{R}$.\n\non fixe un ordre arbitraire et on note $t=(t.A_1,...., t.A_k)$ un tuple.\n\n- A un tuple $t$ de $\\mathcal{R}$ correspond les $k$ valeurs $t.A_1, \\dots, t.A_k$\n\n- On notera aussi $R$ le domaine $\\mathcal{R}$ d'une relation $R$.\n\n\n---\n\n::: {.callout-note}\n\n### Remarque\n\nL'idée de désigner les membres d'un $k$-uplet par leur nom plutôt que par leur position est reprise dans les formalismes de représentationn des données tabulaires proposés par `Python` (`Pandas`) et `R` (les `data.frame` et autres `tibble`).  \n\n:::\n\n\n## Relations et schémas : formalisation\n\n\nLa relation `{Train}(h-dep:*heure*, dest:*ville* , harr:*heure* , prov:*ville*)`\n\n\n|\t\t\t\t**hdep**   | **dest**     |   **harr**       |  **prov** | \n|:------------------:|:---------------|:----------------:|:-----------|\n|\t\t\t\t13h15        | Lyon           |     15h15        | Paris      |\n|\t\t\t\t13h22        | Nantes         |     15h30        | Paris      |\n\nest constituée de deux tuples $e_1$, $e_2$ avec :\n\n- $e_1.\\textrm{hdep}=\\textrm{'13h15'}$,\n- $e_1.\\textrm{dest}=\\textrm{'Lyon'}$,\n- $e_1.\\textrm{harr}=\\textrm{'15h15'}$,\n- $e_1.\\textrm{prov}=\\textrm{'Paris'}$\n\n\n\n\n## Résumé informel\n\n- RELATION =  TABLE A DEUX DIMENSIONS\n\n- (NOM DE) COLONNE =  ATTRIBUT\n\n- EN-TÊTE DU TABLEAU = SCHEMA DE LA RELATION\n\n- LIGNE = TUPLE\n\n- ENSEMBLE DES LIGNES = CONTENU DE LA RELATION\n\n\n\n# LMD : Opérateurs  {background-color=\"#1c191c\"}\n\n\n\n## Opérateurs de base\n\n\n::: {.callout-important}\n\n\n### Liste des opérateurs\n\nL'algèbre relationnelle est d'abord un *Langage de Manipulation de Données& (LMD)}.\n\n\n- Union: $\\Large{\\cup}$  \n\n- Intersection: $\\Large{\\cap}$ \n\n- Différence: $\\Large{\\backslash}$ \n\n- Projection:  $\\Large{\\Pi}$  \n\n- Sélection: $\\Large{\\sigma}$ \n\n- Produit cartésien:  $\\Large{\\times}$ \n\n- Renommage:  $\\Large{\\rho}$ \n\n\ns'appliquent à des relations pour produire d'autres relations (le résultat).\n\n:::\n\n\n## Union $\\cup$ et intersection  $\\cap$\n\n::: {.callout-important}\n\n### Définition\n\n- L'*union* et l'*intersection* sont des  opérations portant sur deux relations $R_1$ et $R_2$ de **même  schéma**\n\n - $T=R_1\\cup R_2$  est  constituée des tuples appartenant à $R_1$ *ou* à\n$R_2$.\n\n- $T=R_1\\cap R_2$  est  constituée des tuples appartenant à $R_1$ *et* à\n$R_2$.\n\n- Schémas de  $R_1\\cup R_2$, $R_1\\cap R_2$ sont les mêmes que ceux de $R_1$  et  $R_2$\n\n:::\n\n## Union et intersection\n\n## Exemple\n\n::::: {.columns}\n\n::: {.column}\n\n**Train 1**\n\n| **h-dep**   | **dest**            | **num**           |\n|:--------:|:-----------------|:----------------|\n|    13h15    | Lyon         |     213         |\n|    13h29    | Marseille    |    1024         |\n|    14h15    | Lyon         |    214          |\n\n\n**Train 2**\n\n| **h-dep**   | **dest**             | **num**            |\n|:--------:|:-----------------|:----------------|\n|    13h39   | Avignon       |     43          |\n|    14h15   | Lyon          |     214         |\n\n:::\n\n::: {.column}\n\n**Train 1 $\\cup$ Train 2**\n\n| **h-dep**   | **dest**     |    **num**      |\n|:-----------:|:-------------|:----------------|\n|    13h15    | Lyon         |     213         |\n|    13h29    | Marseille    |    1024         |\n|    14h15    | Lyon         |    214          |\n|    13h39    | Avignon      |     43          |\n\n\n**Train 1 $\\cap$ Train 2**\n\n| **h-dep**   | **dest**             | **num**            |\n|:--------:|:-----------------|----------------:|\n|    14h15    | Lyon         |    214          |\n\n:::\n\n:::::\n\n\n\n## Différence\n\n\n::: {.callout-important}\n\n### Définition\n\n\n- La **différence** de deux relations $R_1$ et $R_2$ (de même schéma) est une relation $T$\n\n- de même schéma que $R_1$ et $R_2$ \n\n-  constituée des tuples appartenant à $R_1$ et n'appartenant pas à $R_2$.\n\n\n- On note $T = R_1 - R_2$.\n\n:::\n\nOpération non *commutative* : $R_1 - R_2\\neq  R_2 - R_1$ (en général).\n\n\n\n## Différence : exemple\n\n\n::::: {.columns}\n\n\n::: {.column}\n**Train 1**\n\n| **h-dep**   | **dest**            | **num**           |\n|:--------:|:-----------------|:----------------|\n|    13h15    | Lyon         |     213         |\n|    13h29    | Marseille    |    1024         |\n|    14h15    | Lyon         |    214          |\n\n\n**Train 2**\n\n| **h-dep**   | **dest**             | **num**            |\n|:--------:|:-----------------|:----------------|\n|    13h39   | Avignon       |     43          |\n|    14h15   | Lyon          |     214         |\n\n:::\n\n::: {.column}\n\n**Train 1 $\\backslash$ Train 2**\n\n| **h-dep**   | **dest**             | **num**             |\n|:--------:|:-----------------|----------------:|\n|    13h15    | Lyon         |     213         |\n|    13h29    | Marseille    |    1024         |\n\n\n:::\n\n:::::\n\n\n\n\n## Produit Cartésien\n\n\n\n::: {.callout-important}\n\n### Définition\n\n- Soient:\n  -  $R_1$ de schéma $R_1(A_1,A_2,...,A_k)$\n  -  $R_2$ de schéma $R_2(B_1,B_2,...,B_\\ell)$\n  -  avec $A_i\\neq B_j$, pour tout $i=1,...,k$, $j=1,..,\\ell$\n\n-  Dans le contexte \"classique\" : $R_1 \\times R_2= \\{(e_1,e_2): e_1\\in R_1, e_2\\in R_2\\}$\n\n- $R=R_1 \\times R_2$  de schéma $R(A_1,A_2,...,A_k,B_1,B_2,...,B_\\ell)$. Le schéma de $R$ est .red[l'union] des schémas de $R_1$ et $R_2$\n\n:::\n\n::: {.callout-caution}\n\nEn algèbre relationnelle, cette opération est commutative  ( $R_1\\times R_2 = R_2\\times R_1$ ) et associative\n \n:::\n\n## Produit cartésien :\n\n\n::: {.callout-important}\n\n###  Définition formelle\n\n$R=R_1\\times R_2$ est la relation de schéma $R(A_1,A_2,...,A_k,B_1,B_2,...,B_\\ell)$ vérifiant~:\n\n\n- Pour tout $t\\in R$, il existe $t_1\\in R_1$, $t_2\\in R_2$ tels que :\n\n$$t.A_1=t_1.A_1, \\ldots, t.A_k=t_1.A_k,\\quad t.B_1=t_2.B_1, \\ldots, t.B_\\ell=t_2.B_\\ell$$\n\n- Réciproquement, pour tout $t_1\\in R_1$, $t_2\\in R_2$ , il existe $t\\in R$ tels que :\n\n$$t.A_1=t_1.A_1, \\ldots, t.A_k=t_1.A_k,\\quad t.B_1=t_2.B_1, \\ldots, t.B_\\ell=t_2.B_\\ell$$\n\n\n:::\n\n\n\n## Produit cartésien : exemple\n\n\n**Train 1  $\\times$ Train 2** \n\n| **h-dep(1)**   | **dest(1)**       |  **num(1)**         | **h-dep(2)**   | **dest(2)**             | **num(2)**            |\n|:--------|:-----------------|:----------------|:--------|:-----------------|:----------------|\n|    13h15    | Lyon         |     213         | 13h39   | Avignon       |     43          |\n|    13h15    | Lyon         |     213         | 14h15   | Lyon          |     214         |\n|    13h29    | Marseille    |    1024         | 13h39   | Avignon       |     43          |\n|    13h29    | Marseille    |    1024         | 14h15   | Lyon          |     214         |\n|    14h15    | Lyon         |    214          | 13h39   | Avignon       |     43          |\n|    14h15    | Lyon         |    214          | 14h15   | Lyon          |     214         |\n\n\n\n\n\n\n\n## Projection  ( $\\Large{\\pi}$ )\n\n\n::: {.callout-important}\n\n### Définition\n\n- La *projection* d'une relation $R$ de schéma $R(A_1,\\dots, A_k)$\n sur les attributs $A_{i_1}, \\dots, A_{i_p}$, $i_1,..., i_p\\in \\{1,...,k\\}$,  est la relation $S$\n\n- de schéma $S(A_{i_1}, \\dots,A_{i_p})$\n\n- dont les tuples sont obtenus par élimination des attributs\nnon mentionnés dans $A_{i_1}, \\dots, A_{i_p}$ (et par élimination\ndes doublons).\n\n- On note $S = \\pi_{A_{i_1}, \\dots, A_{i_p}} (R)$.\n\n- Définition formelle :\n\n$$s\\in S\\quad  \\iff \\quad \\exists t\\in R\\ \\forall n\\in\\left\\{1,\\dots,p\\right\\}\\ s.A_{i_n}=t.A_{i_n}$$\n\n:::\n\n\n*Élimination des doublons* car une projection peut produire plusieurs fois le même tuple.\n\n\n\n## Projection : Exemple\n\n\n$\\Large{\\Pi_{\\text{dest, num}}(\\text{Train})}$\n\n| **dest**             | **num**             |\n|:----------------|----------------:|\n| Lyon             |     213         |\n| Marseille        |     1024         |\n| Lyon             |     214          |\n\n\n\n\n## Sélection  ( $\\Large{\\sigma}$ ) \n\n\n::: {.callout-important}\n\n### Définition\n\n- La *sélection* d'une relation $R$\npar une condition $C$ est une relation $S$\n\n  - de même schéma que $R$ \n\n  - dont les tuples sont ceux de $R$ qui satisfont la condition $C$.\n\n- On note $S = \\sigma_C (R)$.\n\n- La condition $C$  \n\n  - s'exprime à l'aide des noms d'attributs de la relation ou de constantes (pour les opérandes)\n\n  - on peut utiliser des opérateurs arithmétiques de comparaison ( $=, \\neq, \\leq, \\geq, <, >$ ) ainsi que des connecteurs logiques ( $\\lnot, \\land, \\lor$ )..\n\n:::\n\n\n## Sélection : Exemple\n\n\n$\\Large{\\sigma_{\\text{dest}=\\text{'Lyon'}} \\text{Train 1}}$\n\n| **h-dep**   | **dest**             | **num** |\n|:--------:|:-----------------|---------------:|\n|    13h15    | Lyon         |     213         |\n|    14h15    | Lyon         |    214          |\n\n\n$\\Large{\\sigma_{\\text{dest}=\\text{'Lyon'} \\wedge \\text{hdep} > 14h} \\text{Train 1}}$\n\n| **h-dep**   | **dest**             | **num**    |\n|:--------:|:-----------------|----------------:|\n|    14h15    | Lyon         |    214          |\n\n\n\n## Renommage\n\n::: {.callout-important}\n\n### Définition\n\n- Soit  $R$ de schéma $R(A_1,\\dots, A_k)$, le *renommage* d'un attribut $A_i$, $i\\leq k$, en $B$ est une relation $S$ :\n\n- de même contenu\n\n- de schéma $S(A_1,...,A_{i-1},B,A_{i+1},..., A_k)$\n\n- On le note $S=\\rho_{A_i\\mapsto B}(R)$\n\n:::\n\n\n## Exemple\n\n\t\nTrain :\n\n|  **h-dep**   | **dest**   | **num** | \n|:---------------:|:--------------|--------------:|\n|\t\t13h15         | Lyon          |     213       |\n|\t\t13h29         | Marseille     |    1024       |\n|\t\t14h15         | Lyon          |     214       |\n\t\n\t\n$$\\rho_{\\text{num}\\mapsto \\text{numero}}(\\text{Train})$$\n\n\n|  **h-dep**   | **dest**   | **numero** | \n|:---------------:|:--------------|--------------:|\n|\t\t13h15         | Lyon          |     213       |\n|\t\t13h29         | Marseille     |    1024       |\n|\t\t14h15         | Lyon          |     214       |\n\t\n\n\n\n\n*Utilité* Va permettre d'étendre certains opérateurs pour des relations de schémas non-disjoints\n\n\n\n# Résumé   {background-color=\"#1c191c\"}\n\n\n## Algèbre relationnelle\n\n- Opérations ensemblistes classiques.\n\n- Projection : élimine des colonnes\n\n- Sélection : élimine des lignes\n\nPour interroger une BD, on *compose* ces opérateurs :\n\n\n## Exemple\n\n$\\pi_{num}(\\sigma_{dest='Lyon'}(Train))$\n\nNuméro des trains dont la ville de destination est 'Lyon'.\n\n\n# Opérations complémentaires : les jointures  {background-color=\"#1c191c\"}\n\n\n## Les jointures\n\nOn va définir des opérations pratiques pour la manipulation de données~: les *jointures*\n\n- Jointure\n\n- Jointure *naturelle*\n\n- $\\theta$-jointure et équi-jointure\n\n\n\n## Jointure\n\n\n::: {.callout-important}\n\n### Définition\n\nLa jointure $T=R_1\\bowtie_C R_2$ de deux relations $R_1$ et $R_2$ de schémas disjoints sous la condition $C$ est la relation $T$:\n\n- de schéma la *concaténation* des schémas de $R_1$ et $R_2$\n\n- formée des tuples du produit cartésien $R_1  \\times R_2$ qui satisfont la condition $C$\n\n\nRègles de formation de la *condition de jointure* : comme pour la sélection\n\n\n:::\n\n\n::: {.callout-important}\n\n### Définition formelle\n\n$$R_1 \\bowtie_C R_2 = \\sigma_C(R_1\\times R_2)$$\n\n:::\n\n\n## Exemple\n\n`TrDep`\n\n|  **hdep**   | **dest**   | **numdep** |\n|:----------------:|:--------------|--------:|\n|    13h15         | Lyon          |     213 |\n|    13h29         | Marseille     |    1024 |\n\n\n`TrArr`\n\n| **harr**      | **prov**     | **numarr**   |\n|:----------------:|:--------------|--------:|\n|    13h39         | Avignon        |     43       |\n|    15h15         | Paris          |     213       |\n\n\n\n$\\texttt{TrDep} \\bowtie_{\\text{numdep} > \\text{numar}} \\texttt{TrArr}$\n\n| **hdep**         | **dest**         | **numdep** | **harr**       | **prov**         | **numarr** |\n|:----------------:|:--------------|--------:|:----------------:|:--------------|--------:|\n|    13h15              | Lyon               |     213           |     13h39          | Avignon            |     43  |        |\n|    13h29              | Marseille          |    1024           |     13h39          | Avignon            |     43   |        |\n|    13h29              | Marseille          |    1024           |     15h15          | Paris              |     213   |       |\n\n\n## Équi-jointure, $\\theta$-jointure\n\n\n::: {.callout-important}\n\n### Équi-jointure  \n\nJointure avec égalité entre attributs de types comparables\n\n:::\n\n\n$$\\texttt{TrDep} \\bowtie_{\\text{numdep} = \\text{numarr}} \\texttt{TrArr}$$\n\n|**hdep**         | **dest**         | **numdep** | **harr**       | **prov**         | **numarr** |\n|:----------------:|:--------------|--------:|:----------------:|:--------------|--------:|\n|  13h15          | Lyon             |     213    |     15h15      | Paris            |     213    |\n\n\n. . .\n\n::: {.callout-important}\n\n### $\\theta$-*jointure*\n\nCondition de jointure entre attributs de types comparables et avec un opérateur différent de l'égalité, c'est-à-dire dans $\\left\\{<,>,\\leq,\\geq, \\neq\\right\\}$.\n\n$$\\text{TrDep} \\bowtie_{\\text{numdep} > \\text{numarr}} \\text{TrArr}$$\n\n:::\n \n\n\n\n\n\n## Jointure naturelle\n\n::: {.callout-important}\n\n### Définition\n\nC'est une équi-jointure concernant les attributs communs (même nom et même type) de deux relations   \n\nOn ne garde dans le résultat qu'une copie des attributs communs {{< fa  triangle-exclamation >}}\n\n:::\n\n\nOn considère\n\n- $R_1$ d'attributs $A_1,..,A_k,B_1,...,B_h$\n\n- $R_2$ d'attributs $A_1,..,A_k,B_{h+1},...,B_\\ell$\n\n- $A_1,..., A_k$ : attributs communs et $\\{B_1,...,B_h\\}\\cap \\{ B_{h+1},...,B_\\ell \\}=\\emptyset$\n\n- Soit $A'_1, ...., A'_k$ tels que $\\{A_1,..., A_k\\}\\cap \\{ A'_1, ...., A'_k \\}=\\emptyset$\n\n\n\n## Jointure naturelle  (formalisation)\n\nConsidérons $S$ d'attributs $A_1',..,A_k',B_{h+1},...,B_l$ définie par :\n\n$$S=\\rho_{A_1\\mapsto A_1'}(\\rho_{A_2\\mapsto A_2'}(\\cdots (\\rho_{A_k\\mapsto A_k'}(R_2)\\cdots ))$$\n\n\nLa *jointure naturelle* sur deux relations $R_1$ et $R_2$ est la relation\n\n- d'attributs $A_1,..,A_k,B_1,...,B_h, B_{h+1},...,B_\\ell$\n\n- définie par :\n\n$$\\pi_{A_1,..,A_k,B_1,...,B_h, B_{h+1},...,B_\\ell}(R_1\\bowtie_{C} S)$$\n\n\noù $C$ est $(A_1=A_1') \\wedge (A_2=A'_2) \\wedge \\ldots \\wedge (A_k=A_k')$\n\n{{< fa  hand-point-right >}} on réalise une équi-jointure sur tous les attributs communs et on ne garde qu'un seul \"exemplaire\" de ces attributs communs par projection.\n\nOn note cette opération : $R_1 \\bowtie R_2$.\n\n. . .\n\n\n\nPour éviter le renommage, on peut décider de préfixer les noms des attributs par ceux de la relation. La condition $C$ devient :\n\n$$(R_1.A_1=R_2.A_1) \\wedge \\ldots \\wedge (R_1.A_k=R_2.A_k)$$\n\n\n\n\n\n## Exemple de Jointure naturelle\n\n::::: {.columns}\n::: {.column}\n\n`TrDep`\n\n|  **hdep**   | **dest**   | **num** |\n|:----------------:|:--------------|--------:|\n|    13h15         | Lyon          |     213 |\n|    13h29         | Marseille     |    1024 |\n\n\n`TrArr`\n\n| **harr**      | **prov**     | **num**   |\n|:----------------:|:--------------|--------:|\n|    13h39         | Avignon        |     43       |\n|    15h15         | Paris          |     213       |\n\n:::\n::: {.column}\n\n\n$$\\text{TrDep} \\bowtie \\text{TrArr}$$ \n\n| **hdep**         | **dest**         | **num** | **harr**       | **prov**      |\n|:-----------------:|:----------------|--------:|:--------------:|--------------:|\n|    13h15          | Lyon            |     213 |     15h15      | Paris         |\n\n:::\n\n:::::\n\n\n## Exemples de requêtes\n\nBase constituée des trois tables suivantes:\n\n\n`fournisseurs(fno, nom, adresse, ville)`\n\n`produits(pno, design, prix, poids, couleur)`\n\n`commandes(cno, fno, pno, qte)`\n\n\n\n## Exemples de requêtes (suite) \n\n- déterminer les numéros des fournisseurs ayant comme nom \"Durand\"\n\n\n$$\\pi_{\\text{fno}} \\bigl( \\sigma_{\\text{nom}=\\text{'Durand'}} (\\text{fournisseurs})\\bigr)$$\n\n\n- déterminer les références, prix et quantités des produits commandés à plus de 10 exemplaires.\n\n\n$$\\pi_{\\text{pno,prix,qte}} \\bigl( \\sigma_{\\text{qte}>10} (\\text{commandes} \\bowtie \\text{produits})\\bigr)$$\n\n\n\n\n\n# Encore des opérations...  {background-color=\"#1c191c\"}\n\n\n\n\n## Jointure externe\n\n::: {.callout-note}\n\n### Perte d'information dans jointure naturelle\n\nLes tuples ne satisfaisant pas la condition (non appariés) disparaissent\n\n:::\n\n::: {.callout-important}\n\n### Définition\n\n<!-- TODO -->\n\nOn ajoute symboliquement\" une ligne dont les valeurs sont vides (ou avec valeur spéciale `NULL`) pour garder les tuples initiaux \"non satisfaisants\" après la jointure\n\nOn note cette opération entre deux relations $R$ et $S$  :\n\n$$R \\bowtie^+ S$$\n\n:::\n\n\n## Jointure externe (exemple)\n\n\n::::: {.columns}\n::: {.column}\n\n`TrDep`\n\n|  **hdep**   | **dest**   | **num** |\n|:----------------:|:--------------|--------:|\n|    13h15         | Lyon          |     213 |\n|    13h29         | Marseille     |    1024 |\n\n\n`TrArr`\n\n| **harr**      | **prov**     | **num**   |\n|:----------------:|:--------------|--------:|\n|    13h39         | Avignon        |     43       |\n|    15h15         | Paris          |     213       |\n\n:::\n::: {.column}\n\n$$\\text{TrDep} \\bowtie^+ \\text{TrArr}$$\n\n\n| **hdep**         | **dest**         | **num** | **harr**       | **prov**     |\n|:-----------------:|:------------------|------:|:----------------:|:----------------|\n|    13h15              | Lyon               |     213           |     15h15         | Paris       |\n|    13h29              | Marseille          |    1024           |     -          |  -              |\n|   -              | -           |    43          |     13h39          | Avignon                    |\n\n:::\n:::::\n\n## Division\n\n::: {.callout-important}\n\n### Définition\n\nLa *division* ou *quotient*\n\n- d'une relation $R$ de schéma\n$R(A_1,A_2,\\dots,A_k)$\n\n- par une relation $S$ de schéma\n$S(A_{p+1},\\dots ,A_k)$\n\nest la relation $T$ de schéma $T(A_1, \\dots, A_p)$ formée des tuples qui complétés par chaque tuple\nde $S$ donnent un tuple de $R$.\n\nAutrement dit\n\n$$\\begin{array}{l} t\\in T(A_1,\\dots,A_p)  \\quad \\Longleftrightarrow \\\\\n\\forall s\\in S(A_{p+1},\\dots ,A_k) \\quad \\exists r\\in R \\quad \\begin{cases}\nt.A_1=r.A_1, \\dots, t.A_p=r.A_p\\\\ s.A_{p+1}=r.A_{p+1},\\dots, s.A_{k}=r.A_{k} \\end{cases} \\end{array}$$\n\n\nOn note \n$$T = R \\div S$$\n\n\n\n:::\n\n\n## Division (exemple)\n\n\n::: {.columns}\n::: {.column}\n\n`Voyage` : contient  pour chaque numéro de\nclient la ville de départ et d'arrivée des voyages qu'il a\neffectué\n\n\n| **numclient**  | **vdep**   | **varr**|\n|---------------:|:-----------------|:----------------|\n|   1           | Paris              | Marseille    |\n|   3           | Marseille          | Lyon  |\n|   1            | Paris              | Nantes |\n|   5            | Marseille          | Avignon |\n|   4           | Paris              | Nantes   |\n|   3           | Paris              | Marseille |\n|   2           | Caen               | Le Mans   |\n|   3           | Paris              | Nantes |\n\n:::\n::: {.column}\n\n\n`Villes` contient des couples  villes de départ/villes d'arrivée\n\n\n| **vdep**   | **varr** |\n|:-------------|:---------------|\n|  Paris             | Marseille       |\n|  Paris             | Nantes          |\n\n:::\n\n:::\n\n\n\n\n## Division (exemple, suite)\n\n\n$$\\texttt{Voyage} \\div \\texttt{Villes}$$\n\n\n| **numclient** |\n|-------------:|\n|  1          |\n|  3             |\n\n*Résultat* :  numéros des clients ayant\neffectué tous les voyages entre les villes de la table `Villes` (i.e. à la fois un Paris-Marseille et un Paris-Nantes.)\n\n\n\n## Interdéfinissabilité des opérateurs\n\n\n- L'union, la différence, le produit cartésien, la sélection et la projection et le renommage sont *suffisants* pour définir tous les opérateurs que l'on a vu.\n\n- Mais avoir un panier  plus large d'opérateurs simplifie l'écriture des requêtes.\n\n\n\n\n\nQuelques définitions\n\n- Pour la *Jointure* : $R \\bowtie_C S \\equiv \\sigma_C (R \\times S)$\n\n\n- Pour l'*intersection* : $A \\cap B = A \\cup B - ((B - A) \\cup (A - B))$\n\n\n\n## Définition de la division\n\n::: {.callout-important}\n\n### Formalisation\n\nSoient  $R$ de schéma\n$R(A_1,A_2,\\dots,A_k)$, $S$ de schéma\n$S(A_{p+1},\\dots ,A_k)$\n\nest la relation $T= R \\div S$ de schéma $T(A_1, \\dots, A_p)$.\n\n\\begin{center}\n\\begin{tikzpicture}\n%\\Tree [.$\\pi_{pno,prix,qte}$ [.$\\sigma_{qte>10}$ [.$\\bowtie_{pno}$ [.commandes ] [.produit ] ] ] ]\n\\Tree [.$-$ [.$\\pi_{A_1,...,A_p}$ $R$ ] [.$\\pi_{A_1,...,A_p}$ [.$-$ [.$\\times$ [.$\\pi_{A_1,...,A_p}$ $R$ ] [.S ] ] [.R ] ] ] ]\n%[.$\\pi_{A_1,...,A_p}$ [.- [.\\times [.$\\pi_{A_1,...,A_p}$ $R$ ] [.S ] ] [.R ] ]\n\\end{tikzpicture}\n\\end{center}\n\n:::\n\n# The story    {background-color=\"#1c191c\"}\n\n\n##  From Wikipedia {smaller}\n\n> In the 1960s and 1970s he worked out his theories of data arrangement, issuing his paper \"A Relational Model of Data for Large Shared Data Banks\"[14] in 1970, after an internal IBM paper one year earlier.[15] To his disappointment, IBM proved slow to exploit his suggestions until commercial rivals started implementing them.[16]\n\n> Initially, IBM refused to implement the relational model to preserve revenue from IMS/DB.[citation needed] Codd then showed IBM customers the potential of the implementation of its model, and they in turn pressured IBM. Then IBM included in its Future Systems project a System R subproject – but put in charge of it developers who were not thoroughly familiar with Codd's ideas, and isolated the team from Codd.[citation needed] As a result, they did not use Codd's own Alpha language but created a non-relational one, SEQUEL. Even so, SEQUEL was so superior to pre-relational systems that it was copied, in 1979, based on pre-launch papers presented at conferences, by Larry Ellison, of Relational Software Inc, in his Oracle Database, which actually reached market before SQL/DS – because of the then-already proprietary status of the original name, SEQUEL had been renamed SQL.\n\n> Codd continued to develop and extend his relational model, sometimes in collaboration with Christopher J. Date. One of the normalised forms, the Boyce–Codd normal form, is named after him.\n\n> Codd's theorem, a result proven in his seminal work on the relational model, equates the expressive power of relational algebra and relational calculus.[14]\n\n\n\n\n# Fin  {background-color=\"#1c191c\"}\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}