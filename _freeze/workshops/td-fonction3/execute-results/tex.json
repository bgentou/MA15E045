{
  "hash": "f36b10f473edd31de9277c9e6ca5cb64",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"TD Fonctions II (Fonctions PL/PgSQL)\"\nformat:\n  pdf:\n    code-annotations: below\n    keep-tex: false\n    code-fold: false\n    toc: false\n    output-file: td-fonction3.pdf\n    include-in-header:\n      - text: \"\\\\lhead{{\\\\sf  Base de données \\\\\\\\ TD Fonctions 3}}\"\n  html:\n    embed-resources: true\n    code-fold: true\n    output-file: td-fonction3.html\nparams:\n    year: 2024 \n    curriculum: \"L3 MIASHS/Ingémath\"\n    university: \"Université Paris Cité\"\n    homepage: \"https://stephane-v-boucheron.fr/courses/bdd\"\n    moodle: \"https://moodle.u-paris.fr/course/view.php?id=2313\"\n\nengine: knitr \n---\n\n\n\n\n\n\n::: {.content-visible when-profile='solution'} \n\n::: {.callout-warning}\n\n### Avec solutions\n\n::: \n\n:::\n\n::: {layout=\"[80,20]\"}\n\n::: {#first-column}\n\n\n- **L3 MIASHS/Ingémath**\n- **[Université Paris Cité](https://www.u-paris.fr)**\n- Année 2024-2025\n- [Course Homepage](https://stephane-v-boucheron.fr/courses/bdd)  \n- [Moodle](https://moodle.u-paris.fr/course/view.php?id=2313)\n\n::: \n\n::: {#second-column}\n![](../images/UniversiteParis_monogramme_couleur_RVB.png){align=\"right\" style=\"size:50px;\" width=75}\n:::\n\n:::\n\n\nOn donne ci-dessous une requête renvoyant les paires d'acteurs ayant joué dans un même film.\n\n```{.sql}\nselect DISTINCT a.actor_id, b.actor_id from sakila.actor a , sakila.actor b where\nexists (\nselect * from sakila.film_actor c where c.actor_id = a.actor_id and\nexists ( select * from film_actor d where d.film_id = c.film_id and d.actor_id = b.actor_id\n));\n```\n\nPour toute paire de numéro d'acteur $x,y$, on pose $m(x,y)$ ssi $x$ et $y$ on joué dans un même film.\nOn définit la distance $d$ entre deux acteurs de la façon suivante. Si $x$ est un numéro d'acteur alors $d(x,x)=0$. Pour tout entier $k>0$, pour toute paire d'acteurs $x,y$, la fonction distance obéit à la définition inductive suivante:\n\n$$d(x,y)=k \\mbox{ ssi } \\exists z \\ m(x,z) \\wedge d(z,y)=k-1. $$\n\nDonc la distance entre deux acteurs différents est $1$ s'ils ont joué dans un même film, $2$ s'ils n'ont pas joué ensemble mais s'il  existe un acteur qui a joué avec les deux, etc. On pose $d(x,y)=\\infty$ s'il n'existe aucune façon d'aller de $x$ à $y$ en suivant un chemin de la relation \"avoir joué ensemble dans un film\".\n\n\n- Écrire une fonction pl/pgsql prenant en entrée deux numéros d'acteurs et renvoyant leur distance si celle-ci est inférieure  à $5$ et renvoyant $5$ sinon. L'en-tête de la fonction sera la suivante:\n\n```{.sql}\ncreate or replace function nb_co_actors (act1 int,act2 int)\nreturns int as $plpgsql$\n...\n$plpgsql$ language plpgsql ;\n```\n\n- Généraliser votre fonction pour déterminer si la distance entre deux acteurs est finie ou pas.\n\n::: {.content-visible when-profile=\"solution\"}\n\n```{.sql}\n-- Creer dans une table\ncreate or replace table avigny59.co_actors as (\nselect DISTINCT a.actor_id actor1, b.actor_id actor2 from sakila.actor a , sakila.actor b where\nexists (\nselect * from sakila.film_actor c where c.actor_id = a.actor_id and\nexists ( select * from film_actor d where d.film_id = c.film_id and d.actor_id = b.actor_id\n)\n)\n)\n;\n\n-- Distance si <6, 5 sinon\ncreate or replace function avigny59.nb_co_actors (act1 int,act2 int)\nreturns int as\n$$\nDeclare\nc integer;\nr integer;\nbegin\ncreate temporary table tmp (actor1 INT , actor2 INT) on commit drop;\ncreate temporary table tmp2 (actor1 INT , actor2 INT) on commit drop;\ninsert into tmp (select * from avigny59.co_actors where actor1 = act1);\nc:=0;\nloop\nc:=c+1;\nperform * from tmp where actor1 = act1 and actor2 = act2;\nif found or c > 4 then\nexit;\nend if;\ndelete from tmp2;\ninsert into tmp2 (select distinct a.actor1, b.actor2 from tmp a join avigny59.co_actors b on a.actor2 = b.actor1 );\ndelete from tmp;\ninsert into tmp (select * from tmp2);\nend loop;\ndrop table tmp;\ndrop table tmp2;\nreturn c;\nEND ;\n$$language plpgsql\n\n-- Fonction renvoyant la distance entre un acteur et tous les autres\nDECLARE\nactor smallint ;\nc integer;\nBEGIN\nFOR actor in select distinct actor_id from sakila.film_actor\nLOOP\nselect * into c from ardurand.nb_co_actors(act1,actor);\nRETURN QUERY VALUES(actor,c);\nEND LOOP ;\nEND\n$$ LANGUAGE plpgsql;\n```\n\n:::\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}