{
  "hash": "3073d3e4a5bd37884ac869f355c18c4e",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"TD 2: SQL\"\nsubtitle: \"SQL Interrogation de données\"\ncategories: [Algèbre relationnelle, world, psql, pgcli, WITH, SQL]\ndate: \"2024-09-27\"\n\n\nformat:\n  pdf:\n    code-annotations: below\n    keep-tex: false\n    code-fold: false\n    toc: false\n    output-file: td2.pdf\n    include-in-header:\n      - text: \"\\\\lhead{{\\\\sf  Base de données \\\\\\\\ TD 2}}\"\n  html:\n    embed-resources: true\n    code-fold: true\n    output-file: td2.html\n    \nparams:\n    year: 2024 \n    curriculum: \"L3 MIASHS/Ingémath\"\n    university: \"Université Paris Cité\"\n    homepage: \"https://bgentou.github.io/MA15E045/\"\n    moodle: \"https://moodle.u-paris.fr/course/view.php?id=2313\"\n---\n\n\n\n\n\n\n::: {.content-visible when-profile='solution'} \n\n::: {.callout-warning}\n\n### Avec solutions\n\n::: \n\n:::\n\n::: {layout=\"[80,20]\"}\n\n::: {#first-column}\n\n\n\n- **L3 MIASHS/Ingémath**\n- **[Université Paris Cité](https://www.u-paris.fr)**\n- Année 2024-2025\n- [Course Homepage](https://bgentou.github.io/MA15E045/)  \n- [Moodle](https://moodle.u-paris.fr/course/view.php?id=2313)\n\n::: \n\n::: {#second-column}\n![](/images/UniversiteParis_monogramme_couleur_RVB.png){align=\"right\" style=\"size:50px;\" width=75}\n:::\n\n:::\n\n\n## Schéma `world` (rappel)\n\n\nUtiliser les commandes suivantes pour retrouver les schémas de tables `country`, `countrylanguage` et `city`.\n\n\n```{.sql}\nbd_2023> \\d world.\"nom de table\"\n```\n\n[Vue d'ensemble du schéma `world`](/schemas/schema-world.qmd)\n\n## Écriture de requêtes\n\nPour extraire des informations d'une base de données, on utilise l'algèbre relationnelle (pour la théorie) et le langage SQL (pour la pratique).\n\n|  Opération | Algèbre rel. | SQL |\n|:-----------------|:--------------------:|:--------------------|\n|  Projection| $\\Pi_{\\text{liste d'attributs}}(R)$ | `SELECT attributs FROM  R` |\n| Sélection  | ${\\Large \\sigma}_{\\text{condition}}{R}$  | `SELECT * FROM R WHERE condition` |\n| Renommage  | $\\rho_{\\text{nom1} \\rightarrow \\text{nom2}}(R)$ |  `SELECT nom1 AS nom2 FROM table1 AS table2`  |\n| Union      | $R \\cup S$ | `(SELECT * FROM R) UNION (SELECT * FROM S)` |\n| Différence | $R - S$ | `(SELECT * FROM R) EXCEPT (SELECT * FROM S)`  |\n|  Produit   | $R \\times S$ | `SELECT * FROM R,S` |\n| Intersection | $R \\cap S$ | `(SELECT * FROM R) INTERSECT (SELECT * FROM S)`  |\n\n## Opérations avancées\n\n### Jointures\n\nLa jointure est une opération qui permet de recoller deux relations ensemble. On la note avec le signe $\\bowtie_C$ où $C$ est une condition. Formellement, ce n'est qu'une sélection selon la condition $C$ d'un produit cartésien, c'est-à-dire, par définition :\n$$R {\\Large \\bowtie}_C S = {\\Large \\sigma}_{C}{(R \\times S)}.$$\n\nCette opération est très courante dans les requêtes. Cela vient du fait que les bases de données sont conçues pour ne pas avoir d'information redondante. \n\n\nPrenons l'exemple du schéma `world` et des tables `world.country` et `world.city`. La table `world.country` possède une colonne `capital` qui contient le numéro d'identification d'une ville de la table `world.city`. Par exemple, pour la France, la colonne `capital` vaut 2974 et la ville numéro 2974 est Paris:\n\n```{.sql}\nbd_2023-24> SELECT capital \nFROM world.country \nWHERE countrycode='FRA';\nbd_2023-24> SELECT name \nFROM world.city \nWHERE id = 2974;\n```\n\nPour lister les noms des capitales mondiales, on va avoir besoin de recoller les deux tables en prenant soin de respecter la condition d'égalité entre la capitale et le numéro d'identification de la ville. Cela peut s'écrire en SQL comme suit:\n\n```{.sql}\nSELECT name\nFROM world.city AS V JOIN \n     world.country AS P ON \n     V.id = P.capital;\n```\n\nParfois, on veut recoller deux tables avec la condition que les colonnes qui ont le même nom doivent être égales. Cela arrive souvent si la base de données a bien été conçue. On appelle cette jointure une jointure *naturelle*, qu'on peut écrire avec `NATURAL JOIN`. La requête\n\n```{.sql}\nSELECT name \nFROM world.city NATURAL JOIN world.country\nWHERE continent = 'Oceania';\n```\n\nrenvoie la liste des villes d'Océanie. La jointure est faite\nimplicitement sur la condition \n\n```\nworld.city.countrycode = world.country.countrycode\n```\n\nla table résultante n'aura qu'une seule\ncolonne `countrycode`. Si l'on souhaite ne faire la jointure\nnaturelle que sur un sous-ensemble `a1,...,ak` des attributs\ncommuns, on peut utiliser `JOIN ... USING (a1,...,ak)`.\n\n### Requêtes nommées : utilisation de `WITH`\n\nLorsque les requêtes se compliquent, il est parfois commode de la découper en plusieurs requêtes qu'on manipulera par la suite. Par exemple, trouver le nom des capitales européennes ayant plus d'un million d'habitants peut se découper ainsi: on résout la requête `CAP` qui contient le nom, le continent et la population des capitales. Puis on résout la requête finale en filtrant `CAP`. Cela peut s'écrire avec l'opérateur `WITH`:\n\n```{.sql}\nWITH CAP AS (\n  SELECT name, continent, population\n  FROM world.city AS V JOIN \n    world.country AS P ON  V.id=P.capital\n)\n\nSELECT name\nFROM CAP\nWHERE continent = 'Europe' AND population > 1000000;\n```\n\n## Requêtes\n\n- Quels sont les noms des capitales Sud-Américaines ? (14 lignes)\n\n::: {.content-visible when-profile=\"solution\"}\n::: {.callout-tip title=\"Solution\"}\n\n```{.sql}\nSELECT name\nFROM world.city JOIN \n  world.country ON capital=id\nWHERE continent = 'South America';\n```\n::: \n:::\n\n- Quels sont les noms des pays où le français est langue officielle ? (18 lignes)\n\n::: {.content-visible when-profile=\"solution\"}\n::: {.callout-tip title=\"Solution\"}\n\n```{.sql}\nSELECT name_country\nFROM world.country NATURAL JOIN world.countrylanguage\nWHERE isofficial AND language='French';\n```\n::: \n:::\n\n- Quels sont les pays dont le gouvernement est monarchique (constitutionnelle ou pas) ? (43 lignes)\n  \n::: {.content-visible when-profile=\"solution\"}\n::: {.callout-tip title=\"Solution\"}\n\n```{.sql}\nSELECT name_country \nFROM world.country \nWHERE governmentform LIKE '%Monarchy%';\n```\n\n::: \n:::\n\n- Quelles sont les monarchies d'Europe dont la capitale compte moins d'un million d'habitants ? (8 lignes)\n\n::: {.content-visible when-profile=\"solution\"}\n::: {.callout-tip title=\"Solution\"}\n```{.sql}\nWITH T1 AS (\n  SELECT *\n  FROM world.country\n  WHERE governmentform LIKE '%Monarchy%' AND continent='Europe' )\n\nSELECT name_country\nFROM T1 JOIN world.city ON capital=id\nWHERE population < 1000000;\n```\n:::\n:::\n\n-  Quelles sont les régions où on ne trouve pas de monarchie ? (9 lignes)\n\n::: {.content-visible when-profile=\"solution\"}\n::: {.callout-tip title=\"Solution\"}\n```{.sql}\nWITH monarchy AS (\n  SELECT region\n  FROM world.country\n  WHERE governmentform LIKE '%Monarchy%')\n\n(SELECT region \n FROM world.country) \nEXCEPT \n(SELECT * \n FROM monarchy);\n```\n::: \n:::\n\n- Quelles sont les langues qui ne sont langues officielles dans aucun pays ? (355 lignes)\n\n::: {.content-visible when-profile=\"solution\"}\n::: {.callout-tip title=\"Solution\"}\n```{.sql}\nWITH R AS (\n  SELECT language \n  FROM world.countrylanguage \n  WHERE isofficial\n)\n\n(SELECT DISTINCT language \nFROM world.countrylanguage) \nEXCEPT \n(SELECT * \nFROM R);\n```\n::: \n:::\n\n- Quels sont les pays qui n'ont pas de langue officielle ? (49 lignes)\n\n::: {.content-visible when-profile=\"solution\"}\n::: {.callout-tip title=\"Solution\"}\n\n```{.sql}\nWITH R AS (\n  SELECT countrycode \n  FROM world.countrylanguage\n  WHERE isofficial\n),\nS AS (\n  SELECT countrycode \n  FROM world.country\n  EXCEPT \n  SELECT * FROM R\n)\n\nSELECT name_country \nFROM world.country NATURAL JOIN S;\n```\n::: \n:::\n\n-  Quels sont les pays dont la seule langue officielle est le français ? (9 lignes)\n\n::: {.content-visible when-profile=\"solution\"}\n::: {.callout-tip title=\"Solution\"}\n```{.sql}\nWITH R AS(\n  SELECT DISTINCT T1.countrycode \n  FROM world.countrylanguage as T1 JOIN\n      world.countrylanguage as T2 ON \n      T1.countrycode = T2.countrycode\n  WHERE T1.language <> T2.language AND\n      T1.isofficial AND\n      T2.isofficial),\nS AS (\n  SELECT countrycode \n  FROM world.countrylanguage\n  WHERE language='French' AND isofficial\n  EXCEPT \n  (SELECT * FROM R)\n)\n\nSELECT name_country \nFROM world.country NATURAL JOIN S;\n```\n\n\nEn utilisant `EXCEPT` :\n```{.sql}\nWITH OnlyFrench AS (\n  (SELECT countrycode\n  FROM countrylanguage\n  WHERE isofficial AND language = 'French')\n  EXCEPT\n  (SELECT countrycode\n  FROM countrylanguage\n  WHERE isofficial AND language <> 'French')\n)\n\nSELECT name_country \nFROM world.country NATURAL JOIN OnlyFrench;\n```\n::: \n:::\n\n-  Les noms des pays où  le français n'est pas la seule langue officielle. (9 lignes)\n\n::: {.content-visible when-profile=\"solution\"}\n::: {.callout-tip title=\"Solution\"}\n```{.sql}\nWITH R AS (\nSELECT DISTINCT T1.countrycode FROM world.countrylanguage as T1\n                     JOIN world.countrylanguage as T2\n                     ON T1.countrycode = T2.countrycode\nWHERE T1.language <> T2.language AND\n     T1.language = 'French' AND\n     T1.isofficial AND\n     T2.isofficial)\n\nSELECT name_country FROM R NATURAL JOIN world.country;\n```\nEn utilisant `INTERSECT` :\n```{.sql}\nWITH AlsoFrench AS (\n  (SELECT countrycode\n  FROM world.countrylanguage\n  WHERE isofficial AND language = 'French')\n  INTERSECT\n  (SELECT countrycode\n  FROM world.countrylanguage\n  WHERE isofficial AND language <> 'French')\n)\n\nSELECT name_country \nFROM world.country NATURAL JOIN \n     AlsoFrench;\n```\n::: \n:::\n\n- Quelles sont les régions qui ne comportent qu'une seule forme de gouvernement ? (3 lignes)\n\n::: {.content-visible when-profile=\"solution\"}\n::: {.callout-tip title=\"Solution\"}\n\n```{.sql}\nWITH R AS (\n  SELECT T1.region \n  FROM world.country AS T1 JOIN \n       world.country AS T2 ON \n       T1.region = T2.region\n  WHERE T1.governmentform <> T2.governmentform)\n\nSELECT region \nFROM world.country \nEXCEPT \nSELECT * \nFROM R;\n```\n\n::: \n:::\n\n-  Quelles sont les langues officielles des pays dont la capitale compte plus de 5 000 000 d'habitants ? (12 lignes)\n\n::: {.content-visible when-profile=\"solution\"}\n::: {.callout-tip title=\"Solution\"}\n\n```{.sql}\nSELECT DISTINCT language\nFROM world.countrylanguage NATURAL JOIN \n     world.city JOIN world.country ON capital=id\nWHERE population > 5000000 and isofficial;\n```\n::: \n:::\n\n- Quels sont les pays où au moins trois langues sont parlées chacune par strictement plus de $10\\%$ de la population ? (35 lignes)\n\n::: {.content-visible when-profile=\"solution\"}\n::: {.callout-tip title=\"Solution\"}\n\n```{.sql}\nWITH R AS (\n  SELECT T1.countrycode \n  FROM  world.countrylanguage AS T1 JOIN \n        world.countrylanguage AS T2 ON T1.countrycode = T2.countrycode JOIN \n        world.countrylanguage AS T3 ON T1.countrycode = T3.countrycode\n  WHERE T1.language <> T2.language AND\n        T2.language <> T3.language AND\n        T1.language <> T3.language AND\n        T1.percentage > 10 AND\n        T2.percentage > 10 AND\n        T3.percentage > 10\n)\n\nSELECT DISTINCT name_country \nFROM world.country NATURAL JOIN R;\n```\n\nou \n\n```{.sql}\nWITH tpc AS (\n  SELECT *\n  FROM world.countrylanguage\n  WHERE percentage > 10), \nthree AS (\n    SELECT DISTINCT t1.countrycode\n    FROM tpc AS t1 JOIN \n         tpc AS t2 ON (t1.countrycode=t2.countrycode AND t1.language < t2.language) JOIN\n         tpc AS t3 ON (t1.countrycode=t3.countrycode AND t3.language > t2.language)\n)\n\nSELECT co.*\nFROM world.country co NATURAL JOIN three ;\n```\n::: \n:::\n\n-  Quelles sont les régions où il existe deux pays dont les espérances de vie diffèrent par au moins $10$ ans ? (16 lignes)\n\n\n::: {.content-visible when-profile=\"solution\"}\n::: {.callout-tip title=\"Solution\"}\n```{.sql}\nSELECT DISTINCT T1.region\nFROM world.country AS T1 JOIN \n     world.country AS T2 ON T1.region = T2.region\nWHERE T1.countrycode <> T2.countrycode AND \n      (T1.lifeexpectancy - T2.lifeexpectancy >= 10 OR \n       T2.lifeexpectancy - T1.lifeexpectancy >= 10);\n```\n::: \n:::\n\n-  Quels sont les pays où  l'anglais et le français sont des *langues officielles* ? (3 lignes)\n\n::: {.content-visible when-profile=\"solution\"}\n::: {.callout-tip title=\"Solution\"}\n\n```{.sql}\nWITH R AS (\n  SELECT T1.countrycode\n  FROM world.countrylanguage AS T1 JOIN \n       world.countrylanguage AS T2 USING (countrycode)\n  WHERE T1.language='French' AND \n        T2.language='English' AND \n        T1.isofficial AND \n        T2.isofficial)\n      \nSELECT name_country \nFROM R NATURAL JOIN \n     world.country;\n```\n\n::: \n:::\n\n- Montrer comment calculer l'*intersection* de deux tables avec une *jointure* (sous certaines conditions).\n\n::: {.content-visible when-profile=\"solution\"}\n::: {.callout-tip title=\"Solution\"}\n\nSi `R`  et `S` sont deux tables de même schéma, une jointure naturelle des\ndeux tables devrait (en première approximation) calculer l'intersection des deux tables. \n\nPourtant\n```{.sql}\n(SELECT * FROM R)\nINTERSECT\n(SELECT * FROM S)\t;\n```\nne donne pas toujours le même résultat que\n```{.sql}\nSELECT *\nFROM \tR NATURAL JOIN S ;\n```\n\nEssayez par exemple pour l'intersection de la table `country`\navec elle-même :\n```{.sql}\n(SELECT * FROM country) \nINTERSECT \n(SELECT * FROM country);\n```\nretourne la table `country`, soit 239 lignes.\n\nLa jointure naturelle\n```{.sql}\nSELECT * \nFROM country AS c1 NATURAL JOIN \n     country AS c2;\n```\nne donne que 167 lignes. On peut réconcilier les deux résultats\nen ne conservant que les lignes pour lesquelles aucune colonne ne\nprend la valeur `NULL`. \n\nEn vérifiant quels attributs peuvent prendre la valeur `NULL` dans le schéma, \non peut tester cela par la requête\n\n```{.sql}\nSELECT * \nFROM world.country\nWHERE indepyear IS NOT NULL AND \n      lifeexpectancy IS NOT NUL AND \n      gnp IS NOT NULL AND \n      gnpold IS NOT NULL AND \n      headofstate IS NOT NULL AND \n      capital IS NOT NULL;\n```\nqui retourne bien 167 lignes.\n\n\n::: \n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}