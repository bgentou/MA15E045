{
  "hash": "128a6efda42c8771dbbf694734b94781",
  "result": {
    "engine": "knitr",
    "markdown": "---\nformat:\n  pdf:\n    code-annotations: below\n    keep-tex: false\n    code-fold: false\n    toc: false\n    output-file: cc3-2022-11-03.pdf\n    include-in-header:\n      - text: \"\\\\lhead{{\\\\sf  Base de données (BD5) \\\\\\\\ CC 2022-23 3}}\"\n  html:\n    standalone: true\n    code-fold: true\n    output-file: cc3-2022-11-03.html\nparams:\n    year: 2023 \n    curriculum: \"L3 MIASHS/Ingémath\"\n    university: \"Université Paris Cité\"\n    homepage: \"https://stephane-v-boucheron.fr/courses/bdd\"\n    moodle: \"https://moodle.u-paris.fr/course/view.php?id=2313\"\n---\n\n\n\n\n\n::: {layout=\"[80,20]\"}\n\n::: {#first-column}\n\n\n\n- **L3 MIASHS/Ingémath**\n- **[Université Paris Cité](https://www.u-paris.fr)**\n- Année 2023-2024\n- [Course Homepage](https://stephane-v-boucheron.fr/courses/bdd)  \n- [Moodle](https://moodle.u-paris.fr/course/view.php?id=2313)\n\n::: \n\n::: {#second-column}\n![](/images/UniversiteParis_monogramme_couleur_RVB.png){align=\"right\" style=\"size:50px;\" width=75}\n:::\n\n:::\n\nCréer les fonctions `SQL` et vues correspondant aux questions suivantes.\n\nLes questions portent sur le schéma `nycflights13` issu de [https://github.com/tidyverse/nycflights13](https://github.com/tidyverse/nycflights13).\n\nVoir [Documentation package R nycflights13](https://nycflights13.tidyverse.org)\n\n\n\n::: {.content-visible when-format=\"html\"}\n\nDiagramme synthétique en pattes de corbeaux :\n\n![Diagramme en pattes de corbeaux](https://stephane-v-boucheron.fr/slides/img/relational-nycflights.png)\n\nDiagramme sur `bd_2023` :\n\n![Diagramme sur `bd_2023`](https://stephane-v-boucheron.fr/slides/img/bd_2023-nycflights13.png)\n\n:::\n\n\n\n### Exercice \n\n- Nombre vols retardés d'un délai minimal à l'arrivée à un aéroport donné\n- Donnés sur schéma `nycflights13`\n\nÉcrire une fonction `SQL` nommée `cc_fonc_11` qui prend en argument un code\nd'aéroport `p_faa` de type `text`, une année `p_year` (`int4`), un  mois `p_month` (`int4`), un délai plancher `p_delay` (`int4`) et renvoie le nombre de vols retardés de strictement plus de `p_delay` minutes à l'arrivée à l'aéroport `faa`, pendant le mois   `month`  de l'année `year`.\n\nLa fonction retourne un entier (`bigint`)\n\n::: {.callout-tip}\n\nRéponse attendue pour \n\n```{.sql}\nSELECT * \nFROM cc_fonc_11('LAX', 2013, 3, 40) ;` \n```\n\n```\n73\n```\n\n:::\n\n\n::: {.content-visible when-profile=\"solution\"}\n::: {.callout-tip title=\"solution\"}\n\n```{.sql}\nCREATE OR REPLACE FUNCTION correction_cc3.cc_fonc_11(p_faa TEXT, \n            p_year int4, \n            p_month int4, \n            p_delay int4)\n\tRETURNS bigint\n\tLANGUAGE sql\nAS $function$\nSELECT COUNT(*) as n\nFROM nycflights13.flights f\nWHERE f.arr_delay > p_delay AND \n      f.dest = p_faa AND \n      f.\"year\" = p_year AND \n      f.\"month\" = p_month;\n$function$\n```\n\n:::\n:::\n\n---\n\n### Exercice\n\nDonnés sur schéma `nycflights`.\n\nÉcrire une fonction `SQL` nommée `cc_fonc_12` qui prend en argument une année  `p_year`,\nun mois `p_month`, une compagnie aérienne `p_carrier` (`text`) et renvoie\nle nombre de couples aéroport d'origine  `origin`/aéroports de destination  `dest` distincts\ndesservis  par cette compagnie `p_carrier` pendant le mois `p_month` de l'année `p_year`.\n\nLa fonction retourne un entier (`bigint`)\n\nRéponse attendue pour `SELECT * FROM cc_fonc_12('UA', 2013, 2);`\n\n```\n39\n```\n\n::: {.content-visible when-profile=\"solution\"}\n::: {.callout-tip title=\"solution\"}\n\n \n\n```{.sql}\nCREATE OR REPLACE FUNCTION correction_cc3.cc_fonc_12(p_carrier TEXT, p_year int4, p_month int4)\n\tRETURNS bigint\n\tLANGUAGE sql\nAS $function$\nSELECT COUNT(DISTINCT (origin, dest)) AS n\nFROM nycflights13.flights f\nWHERE f.carrier =p_carrier AND \n      f.year=p_year AND \n      f.month=p_month ;\n$function$\n```\n\n:::\n:::\n\n---\n\n### Exercice\n\nDonnées dans le schéma `nycflights13`\n\nÉcrire une vue nommée `cc_vue_13` de schema `(origin, dest, year, month, carrier, model, maxspeed)`\nqui indique pour chaque couple `(origin, dest)`, pour chaque couple  `(year,month)`, la vitesse maximale `maxspeed` (`numeric`) d'un vol  reliant `origin` à `dest` pendant  le mois `month` de l'année `year`, le modèle de l'avion qui a réalisé le vol le plus rapide, et la compagnie aérienne qui  a assuré ce vol.\n\n`maxspeed` sera exprimée en km/h. `distance` est exprimée en [milles nautiques (1 mille = 1.852 km)]().\n\nÉcrire une vue  nommée `cc_vue_13` de schéma:\n\n```\n(year INT4, month INT4, origin TEXT, dest TEXT, name TEXT, model TEXT, maxspeed numeric)\n```\n\nRéponse attendue pour\n\n```{.sql}\nSELECT *\nFROM cc_vue_13\nWHERE dest='LAX' AND month=4 ;\n```\n\n```\n+----+-----+------+----+---------------------+--------+-----------------+\n|year|month|origin|dest|name                 |model   |maxspeed         |\n+----+-----+------+----+---------------------+--------+-----------------+\n|2013|    4|EWR   |LAX |United Air Lines Inc.|A320-232|921.6133333333335|\n|2013|    4|JFK   |LAX |United Air Lines Inc.|757-222 |951.9362068965518|\n```\n\n\nPrécision pour `maxspeed` : (1 km/h)\n\n::: {.content-visible when-profile=\"solution\"}\n::: {.callout-tip title=\"solution\"}\n\n```{.sql}\nCREATE MATERIALIZED VIEW correction_cc3.cc_vue_13 AS (\nWITH r AS (\n\tSELECT f.year, f.month, f.origin, f.dest, max(1.852 *60*f.distance/f.air_time) as maxspeed\n\tFROM nycflights13.flights f \n\twhere f.distance > 0 and f.air_time > 0 \n\tGROUP BY f.year, f.month, f.origin, f.dest\n), s AS (\n\tSELECT r.year, r.month, r.origin, r.dest, r.maxspeed, ff.tailnum, ff.carrier\n\tFROM nycflights13.flights ff  JOIN r ON (r.\"month\"=ff.\"month\" AND r.\"year\"=ff.\"year\" AND r.origin=ff.origin AND r.dest=ff.dest)\n\tWHERE ff.distance > 0 and ff.air_time > 0  AND (1.852 * 60* ff.distance/ff.air_time) >=  r.maxspeed\n)\nSELECT s.year, s.month, s.origin, s.dest, a.name, p.model ,s.maxspeed \nFROM s  \n     JOIN nycflights13.planes p ON (s.tailnum=p.tailnum) \n     JOIN nycflights13.airlines a ON (s.carrier=a.carrier))\nWITH DATA ;\n```\n\n:::\n:::\n\n---\n\n### Exercice\n\nDonnés sur schéma `nycflights13`.\n\nCréer dans votre schéma, une vue  nommée `cc_vue_14` de schéma:\n\n```\n(origin , year int4, month int4, day int4, hour int4, avg_depdelay bigint, n_cancelled bigint, n_scheduled_flights bigint)\n```\n\nqui donne pour chaque aéroport d'origine `origin`, chaque heure `yyyy:mm:dd hh:00:00`, le retard moyen au départ `avg_depdelay` des vols qui ont (effectivement) décollé de `origin` pendant l'heure qui a précédé `yyyy:mm:dd hh:00:00`, et `n_canceled` le nombre de vols annulés sur cet aéroport pendant cette heure, et enfin `n_scheduled_flights` le nombre de vols prévus pendant cette heure.\n\nRéponse attendue pour :\n\n```{.sql}\nSELECT date_time,\n       round(avg_delay::numeric, 1) as avg_delay,\n       n_cancelled,\n       n_scheduled_flights\nFROM cc_vue_14\nWHERE origin='JFK' AND\n      n_cancelled > .25 * n_scheduled_flights\nORDER BY date_time\nLIMIT 10 ;\n```\n\n```\n+-----------------------+---------+-----------+-------------------+\n|date_time              |avg_delay|n_cancelled|n_scheduled_flights|\n+-----------------------+---------+-----------+-------------------+\n|2013-01-30 20:00:00.000|     30.7|          7|                 23|\n|2013-02-08 12:00:00.000|      5.8|          5|                 11|\n|2013-02-08 15:00:00.000|     25.9|          7|                 17|\n|2013-02-08 16:00:00.000|     10.6|         17|                 24|\n|2013-02-08 17:00:00.000|      6.7|         19|                 25|\n|2013-02-08 18:00:00.000|         |         24|                 24|\n|2013-02-08 19:00:00.000|         |         24|                 24|\n|2013-02-08 20:00:00.000|         |         23|                 23|\n|2013-02-08 21:00:00.000|         |         17|                 17|\n|2013-02-08 22:00:00.000|         |          6|                  6|\n```\n\n::: {.content-visible when-profile=\"solution\"}\n::: {.callout-tip title=\"solution\"}\n\n\n```{.sql}\nCREATE MATERIALIZED VIEW correction_cc3.cc_vue_14 AS (\nSELECT f.origin, \n\tf.\"year\", \n\tf.\"month\", \n\tf.\"day\", \n\tf.\"hour\"+ 1 AS \"hour\", \n\tAVG(dep_delay) AS avg_delay,  \n\tSUM(CASE WHEN f.arr_time IS NULL THEN 1 ELSE 0 END) AS n_cancelled, \n\tCOUNT(*) as n_scheduled_flights\nFROM nycflights13.flights f \nGROUP  BY f.origin, f.year, f.month, f.\"day\", f.\"hour\")\nWITH DATA ;\n```\n\n\n:::\n:::\n\n---\n\n### Exercice \n\nDonnés sur schéma `nycflights13`.\n\nCréer  une vue `cc_vue_15` de schéma:\n\n\n```\n(tailnum text, year int4, woy int4, cumdist numeric, model text)\n```\n\nqui recense pour chaque semaine (commencant le dimanche) les avions (identifiés par `tailnum`) qui ont parcouru la plus grande distance durant cette semaine, la distance parcourue pendant la semaine (en [milles nautiques](https://fr.wikipedia.org/wiki/Mille_marin)), on indiquera aussi le modèle (`model`) de l'avion\n\nRéponse attendue pour :\n\n```{.sql}\nSELECT \t*\nFROM cc_vue_15\nWHERE  woy>=26 AND woy <= 30\n```\n\n```\n+-------+----+---+-------+-------+\n|tailnum|year|woy|cumdist|model  |\n+-------+----+---+-------+-------+\n|N320AA |2013| 30|22497.0|767-223|\n|N324AA |2013| 28|22497.0|767-223|\n|N327AA |2013| 26|23697.0|767-223|\n|N327AA |2013| 27|22386.0|767-223|\n|N332AA |2013| 29|23475.0|767-223|\n```\n\n---\n\n**Indications**\n\nManipulation du temps\n\n- [Doc PostgreSQL : types](https://www.postgresql.org/docs/current/datatype-datetime.html)\n- [Doc PostgreSQL : fonctions](https://www.postgresql.org/docs/current/functions-datetime.html)\n\n```{.sql}\nSELECT extract(week from now()), now(), now() + '1 week'::interval ;\n```\n```\n+---------+-----------------------------+-----------------------------+\n|date_part|now                          |?column?                     |\n+---------+-----------------------------+-----------------------------+\n|     46.0|2022-11-20 11:46:59.322 +0100|2022-11-27 11:46:59.322 +0100|\n```\n\nVoir aussi `datetime` pour `Python` ou `lubridate` pour `R`.\n\n\n::: {.content-visible when-profile=\"solution\"}\n::: {.callout-tip title=\"solution\"}\n\n```{.sql}\nCREATE MATERIALIZED VIEW correction_cc3.cc_vue_15 AS (\nWITH r AS (\n\tSELECT f.tailnum, \n    f.year, \n    extract(week from f.time_hour)::int4 as woy, \n    sum(distance) as cumdist\n\tFROM nycflights13.flights f\n\tWHERE tailnum is not null\n\tGROUP BY  f.year, extract(week from f.time_hour), f.tailnum\n),\ns AS (\n\tSELECT DISTINCT r.tailnum, \n    r.year, \n    r.woy, \n    r.cumdist, \n    rank() OVER v AS rnk\n\tFROM r \n\tWINDOW v AS (PARTITION BY (r.year, r.woy) \n               ORDER BY cumdist DESC  NULLS LAST)),\nt AS (\n\tSELECT s.tailnum, s.year, s.woy, s.cumdist\n\tFROM s \n\tWHERE rnk = 1)\n\nSELECT t.*, p.model\nFROM t JOIN nycflights13.planes p ON (t.tailnum=p.tailnum)\n)\n\nWITH DATA  ;\n```\n\n:::\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}