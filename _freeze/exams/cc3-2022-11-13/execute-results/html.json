{
  "hash": "c2b8fbfa8b6e2361599b08556abe0218",
  "result": {
    "engine": "knitr",
    "markdown": "---\nformat:\n  pdf:\n    code-annotations: below\n    keep-tex: false\n    code-fold: false\n    toc: false\n    output-file: cc3-2022-11-13.pdf\n    include-in-header:\n      - text: \"\\\\lhead{{\\\\sf  Base de données (BD5) \\\\\\\\ CC 2023-24: 3}}\"\n  html:\n    embed-resources: true\n    code-fold: true\n    output-file: cc3-2022-11-13.html\nparams:\n    year: 2023 \n    curriculum: \"L3 MIASHS/Ingémath\"\n    university: \"Université Paris Cité\"\n    homepage: \"https://stephane-v-boucheron.fr/courses/bdd\"\n    moodle: \"https://moodle.u-paris.fr/course/view.php?id=2313\"\n---\n\n\n\n\n\n\n\n::: {layout=\"[80,20]\"}\n\n::: {#first-column}\n\n\n\n- **L3 MIASHS/Ingémath**\n- **[Université Paris Cité](https://www.u-paris.fr)**\n- Année 2023-2024\n- [Course Homepage](https://stephane-v-boucheron.fr/courses/bdd)  \n- [Moodle](https://moodle.u-paris.fr/course/view.php?id=2313)\n\n::: \n\n::: {#second-column}\n![](/images/UniversiteParis_monogramme_couleur_RVB.png){align=\"right\" style=\"size:50px;\" width=75}\n:::\n\n:::\n\n\n\nÉcrire une fonction `SQL` nommée `cc_fonc_16` qui prend en argument une année `p_year`, un mois `p_month`\nun jour `p_day`  et un aéroport de départ `p_origin` et renvoie une table \nde schéma \n\n```\n(avg_temp float8, avg_visib float8,  avg_wind_speed float8, avg_month_temp float8)\n```\n\nqui contient pour la journée définie par `p_year`, `p_month` et  `p_day`, l'aéroport défini par `p_origin`,\nla température moyenne de la journée `avg_temp`, la visibilité moyenne de la journée `avg_visib`, la vitesse \nmoyenne du vent `avg_wind_speed`  de la journée, et la température moyenne du mois `avg_month_temp`.  \n\n\nRéponse attendue pour  :\n\n```{.sql}\nSELECT round(avg_temp::numeric, 2) AS avg_temp, \n\t   round(avg_visib::numeric, 2) AS avg_visib,\n\t   round(avg_wind_speed::numeric, 2) AS avg_wind_speed,\n\t   round(avg_month_temp::NUMERIC, 2) AS avg_month_temp\nFROM cc_fonc_16(2013, 2, 16, 'EWR');\n```\n\n```\n+--------+---------+--------------+--------------+\n|avg_temp|avg_visib|avg_wind_speed|avg_month_temp|\n+--------+---------+--------------+--------------+\n|   36.07|     9.71|         12.37|         34.26|\n```\n\n\n```{.sql}\nCREATE OR REPLACE FUNCTION correction_cc3.cc_fonc_16(\n\tp_year int4,  p_month int4, p_day int4, p_origin text)\n\tRETURNS TABLE(avg_temp float8, avg_visib float8,  avg_wind_speed float8, avg_month_temp float8)\n\tLANGUAGE sql\nAS $function$\nWITH v AS (\n   \tSELECT AVG(w.temp) AS avg_month_temp\n    FROM nycflights13.weather w \n    WHERE w.\"year\"=p_year AND w.\"month\"=p_month AND w.origin=p_origin\n),\nx AS (\n   \tSELECT AVG(w.temp) AS avg_temp,\n           AVG(w.visib) AS avg_visib,\n           AVG(w.wind_speed) AS avg_wind_speed\n    FROM nycflights13.weather w \n    WHERE w.\"year\"=p_year AND w.\"month\"=p_month AND w.\"day\"=p_day AND w.origin=p_origin\n) \nSELECT x.avg_temp, x.avg_visib, x.avg_wind_speed, v.avg_month_temp\nFROM x, v \n$function$ ;\n```\n\n---\n\nDonnées dans le schéma `nycflights13 `.\n\nÉcrire une fonction `SQL` nommée `cc_fonc_17` qui prend en argument un constructeur d'avion \net qui renvoie une table de schéma \n\n```\n(n_planes int8, n_carriers int8)\n```\n\nchaque ligne donne pour chaque modèle vendu par le constructeur, \n\n- le nombre d'avions de ce modèle qui ont circulé sur des vols domestiques partis de New York d'après la table `flights`\n- le nombre de compagnies qui exploitent ce modèle (d'après la base `nycflights13`)\n- le nombre de vols effectués par les exemplaires du modèle à partir de New York  d'après la table `flights`\n\nRéponse attendue pour :\n\n```{.sql}\nSELECT * \nFROM cc_fonc_17('AIRBUS') \nWHERE model='A330-243' ;\n```\n\n```\n+--------+--------+----------+---------+\n|model   |n_planes|n_carriers|n_flights|\n+--------+--------+----------+---------+\n|A330-243|      14|         1|      342|\n```\n\n\n::: {.content-visible when-profile=\"solution\"}\n::: {.callout-tip title=\"solution\"}\n\nTODO \n\n:::\n:::\n\n---\n\nDonnées dans le schéma `nycflights13`\n\nÉcrire une vue nommée `cc_vue_18` de schéma\n\n```\n(origin  text, time_hour timestamptz, flight int4, dep_delay float8, next_flight int4, next_dep_delay float8)\n```\n\nPour chaque vol effectué `f`, la vue contient l'aéroport de départ (`origin`), la date et l'heure de départ programmée arrondie (`time_hour`), le numéro du vol `flight`, le retard au départ `dep_delay`, et aussi  le numéro `next_flight` et  le retard au départ du vol  `next_dep_delay`,  qui a décollé juste après le vol `f` du  même aéroport de départ.  \n\nRéponse attendue pour\n\n```{.sql}\nSELECT r.origin, r.time_hour::timestamp, r.flight, r.dep_time, r.dep_delay, r.next_flight, r.next_dep_delay\nFROM cc_vue_18 AS r \nWHERE  r.origin ='EWR' AND r.time_hour = to_timestamp('2013-01-01 06:00:00', 'YYYY-MM-DD HH:MI:SS') \nLIMIT 5 ;\n```\n\n```\n+------+-----------------------+------+--------+---------+-----------+--------------+\n|origin|time_hour              |flight|dep_time|dep_delay|next_flight|next_dep_delay|\n+------+-----------------------+------+--------+---------+-----------+--------------+\n|EWR   |2013-01-01 06:00:00.000|   507|     555|     -5.0|       1124|          -2.0|\n|EWR   |2013-01-01 06:00:00.000|  1124|     558|     -2.0|       1187|          -1.0|\n|EWR   |2013-01-01 06:00:00.000|  1187|     559|     -1.0|        343|           1.0|\n|EWR   |2013-01-01 06:00:00.000|   343|     601|      1.0|       1895|          -4.0|\n|EWR   |2013-01-01 06:00:00.000|  1895|     606|     -4.0|       1077|           0.0|\n\n```\n\n\n\nNB:  précision demandée pour la popularité  0.01\n\n::: {.content-visible when-profile=\"solution\"}\n::: {.callout-tip title=\"solution\"}\n\nTODO \n\n:::\n:::\n\n---\n\nDonnées dans le schéma `nycflights13`\n\nÉcrire une vue  nommée `cc_vue_19` de schéma:\n\n`(origin text, dest text, year int4, month int4, carrier text)\n\nPour chaque liaison `(origin, dest)`, chaque mois `(year, month)`, `carrier` contient le code de la \n*compagnie du mois*, celles dont le retard moyen à l'arrivée sur cette liaison, pendant ce mois est minimal.\n\n```{.sql}\nSELECT * \nFROM cc_vue_19 t\nWHERE t.origin='JFK' AND t.dest='ATL' \nORDER BY t.\"year\", t\"month\" \nLIMIT 5\n;\n``` \n\n```\n+--------+------+------+-------+---------+\n| origin | dest | year | month | carrier |\n|--------+------+------+-------+---------|\n| JFK    | ATL  | 2013 | 1     | 9E      |\n| JFK    | ATL  | 2013 | 2     | DL      |\n| JFK    | ATL  | 2013 | 3     | DL      |\n| JFK    | ATL  | 2013 | 4     | DL      |\n| JFK    | ATL  | 2013 | 5     | DL      |\n```\n\n::: {.content-visible when-profile=\"solution\"}\n::: {.callout-tip title=\"solution\"}\n\nTODO \n\n:::\n:::\n\n\n---\n\nDonnées dans le schéma `babynames`\n\nCréer une vue `cc_vue_20` de schéma\n\n```\n(origin TEXT, dest TEXT, flight int4, time_hour  TIMESTAMP, arr_delay , carrier TEXT, model TEXT, speedy_model TEXT, speedy_carrier TEXT)\n```\n\nqui liste pour chaque vol de la table `flights`, l'aéroport de départ, l'aéroport de destination,  la date et l'heure de départ prévues trinquée à l'heure (`time_hour`), le modèle (`model`)  de l'avion, sa compagnie (`carrier`), son retard à l'arrivée, ainsi que pour un des vols les plus rapides sur cette liaison pendant le mois défini par `time_hour`, le modèle `speedy_model` et la compagnie `speedy_carrier`.  \n\n\n::: {.content-visible when-profile=\"solution\"}\n::: {.callout-tip title=\"solution\"}\n\nTODO \n\n:::\n:::\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}