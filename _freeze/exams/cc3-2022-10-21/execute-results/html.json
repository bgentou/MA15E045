{
  "hash": "0f956d8417b389cc1511b42b7ef1c4b5",
  "result": {
    "engine": "knitr",
    "markdown": "---\nformat:\n  pdf:\n    code-annotations: below\n    keep-tex: false\n    code-fold: false\n    toc: false\n    output-file: cc3-2022-10-21.pdf\n    include-in-header:\n      - text: \"\\\\lhead{{\\\\sf  Base de données (BD5) \\\\\\\\ CC 2022-23: 3}}\"\n  html:\n    standalone: true\n    code-fold: true\n    output-file: cc3-2022-10-21.html\nparams:\n    year: 2023 \n    curriculum: \"L3 MIASHS/Ingémath\"\n    university: \"Université Paris Cité\"\n    homepage: \"https://stephane-v-boucheron.fr/courses/bdd\"\n    moodle: \"https://moodle.u-paris.fr/course/view.php?id=2313\"\n\nengine: knitr\n---\n\n\n\n\n\n\n\n::: {layout=\"[80,20]\"}\n\n::: {#first-column}\n\n\n\n- **L3 MIASHS/Ingémath**\n- **[Université Paris Cité](https://www.u-paris.fr)**\n- Année 2023-2024\n- [Course Homepage](https://stephane-v-boucheron.fr/courses/bdd)  \n- [Moodle](https://moodle.u-paris.fr/course/view.php?id=2313)\n\n::: \n\n::: {#second-column}\n\n![](/images/UniversiteParis_monogramme_couleur_RVB.png){align=\"right\" style=\"size:50px;\" width=75}\n\n:::\n\n\n:::\n\nSur le serveur, dans votre schéma personnel (celui dont le nom est votre `username`), créer les fonctions `SQL` et vues correspondant aux cinq questions suivantes.\n\n## Popularité\n\n::: {.callout-note}\n\n### Question\n\nÉcrire une fonction `SQL` nommée `top_k_names_by_year` qui prend en argument une année  `yyyy` et un entier `n` et renvoie une table `(name TEXT, sex integer, rank integer)` qui contient, selon la table `babynames.bebes`, les `k` prénoms les plus populaires (attribués) de l'année `yyyy` pour chaque sexe.\n\n:::\n\n::: {.callout-tip  collapse=\"false\"}\n\nRéponse attendue pour `SELECT * FROM top_k_names_by_year(1950, 5);` :\n\n```\n+----+---------+----+\n|F   |MARIE    |   1|\n|F   |MARTINE  |   2|\n|F   |FRANÇOISE|   3|\n|F   |MONIQUE  |   4|\n|F   |NICOLE   |   5|\n|H   |JEAN     |   1|\n|H   |MICHEL   |   2|\n|H   |ALAIN    |   3|\n|H   |GÉRARD   |   4|\n|H   |BERNARD  |   5|\n```\n\n:::\n\n::: {.content-visible when-profile=\"solution\"}\n\n::: {.callout-tip title=\"solution\"}\n\nPremière question posée au chatbot :\n\n\n\n\n\n```{.default}\nFor every year and sex, find the 5 most popular names.\n```\n\n\n\n\nRéponse :\n\n\n\n\n\n```{.markdown}\nTo find the 5 most popular names for each year and sex \nin the babynames.bebes table, you can use `ROW_NUMBER()`. \nHere's a query that retrieves the top 5 names \nfor each combination of year and sex:\n```\n\n\n\n\n\n```{.sql}\nWITH RankedNames AS (\n    SELECT\n        name, year, sex, count,\n        ROW_NUMBER() OVER (PARTITION BY year, sex ORDER BY count DESC) AS rank\n    FROM\n        babynames.bebes\n)\n\nSELECT\n    name, year, sex, count\nFROM\n    RankedNames\nWHERE\n    rank <= 5\nORDER BY\n    year, sex, rank;\n```\n\n\n\n\n\n```{.default}\nExplanation:\n\n- The `ROW_NUMBER()` function ranks names \nwithin each `year` and `sex` partition,   \nordered by the `count` of babies in descending order.\n- The `PARTITION BY year, sex` groups the data by each year and sex.\n- The `ORDER BY count DESC` ensures that the most popular names \n(with the highest counts) are ranked first.\n- In the `WHERE` clause, we filter for the top 5 names (`rank <= 5`) \nfor each year and sex.\n\nThis query will return the most popular 5 names \nfor both males and females for each year in the dataset.\n```\n\n\n\n\n\nPour définir la fonction, on peut demander de l'aide au chatbot:\n\n\n\n\n\n```{.default}\nDesign a sql function that takes as input a year y and an integer k, \nand returns a table wih columns name, sex and rank \ncontaining the k most popular names in year y for each sex\n```\n\n\n\n\nLa réponse est\n\n```{.sql}\nCREATE OR REPLACE FUNCTION top_k_names_by_year(y INT, k INT)\nRETURNS TABLE(name VARCHAR(500), sex INT, rank INT) AS $$\nBEGIN\n    RETURN QUERY\n    WITH RankedNames AS (\n        SELECT\n            name, sex, count,\n            ROW_NUMBER() OVER (PARTITION BY sex ORDER BY count DESC) AS rank\n        FROM\n            babynames.bebes\n        WHERE\n            year = y\n    )\n    SELECT\n        name, sex, rank\n    FROM\n        RankedNames\n    WHERE\n        rank <= k\n    ORDER BY\n        sex, rank;\nEND;\n$$ LANGUAGE plpgsql;\n```\n\nEn insistant pour obtenir une fonction `SQL` on obtient:\n\n```{.sql}\nCREATE OR REPLACE FUNCTION top_k_names_by_year(y INT, k INT)\nRETURNS TABLE(name VARCHAR(500), sex INT, rank INT) AS $$\n    WITH RankedNames AS (\n        SELECT\n            name, sex, count,\n            ROW_NUMBER() OVER (PARTITION BY sex ORDER BY count DESC) AS rank\n        FROM\n            babynames.bebes\n        WHERE\n            year = y\n    )\n    SELECT\n        name, sex, rank\n    FROM\n        RankedNames\n    WHERE\n        rank <= k\n    ORDER BY\n        sex, rank;\n$$ LANGUAGE sql;\n```\n\nSure! If you'd prefer a **pure SQL function** (without using PL/pgSQL), here's how you can implement it. In PostgreSQL, you can create a function using SQL that performs the required query:\n\n```{.sql}\nCREATE OR REPLACE FUNCTION top_k_names_by_year(y INT, k INT)\nRETURNS TABLE(name VARCHAR(500), sex INT, rank INT) AS $$\n    WITH RankedNames AS (\n        SELECT\n            name, sex, count,\n            ROW_NUMBER() OVER (PARTITION BY sex ORDER BY count DESC) AS rank\n        FROM\n            babynames.bebes\n        WHERE\n            year = y\n    )\n    SELECT\n        name, sex, rank\n    FROM\n        RankedNames\n    WHERE\n        rank <= k\n    ORDER BY\n        sex, rank;\n$$ LANGUAGE sql;\n```\n\n\n\n\n\n```{.markdown}\n\nExplanation:\n- **Function Definition:**\n  - The function `top_k_names_by_year` accepts  \n  two parameters: `y` (year) and `k` (number of top names).\n  - It returns a table with three columns:  \n  `name` (name of the baby),  \n  `sex` (gender: 1 for male, 2 for female), and  \n  `rank` (the rank of the name by popularity).\n\n- **WITH Clause:**\n  - The `WITH RankedNames AS` clause ranks names \n  by the count of babies for each sex \n  in the specified year (`y`) using the `ROW_NUMBER()` window function. \n  It partitions by `sex` and orders by `count DESC` to assign ranks \n  starting from the most popular.\n\n- **WHERE Clause:**\n  - The main query filters for names with a rank less \n  than or equal to `k` to get only the top `k` names for each sex.\n\n- **Language:**\n  - The function is written in **pure SQL** (as specified by `LANGUAGE sql`).\n\nThis SQL function will return the top `k` names for each sex in the specified year (`y`).\n```\n\n\n\n\n:::\n:::\n\n\n\n## Nombre de naissances\n\nDonnées dans le schéma `babynames`.\n\n::: {.callout-note}\n\n### Question \n\nÉcrire une fonction `SQL` nommée `cc_fonc_7` qui prend en argument une année  `yyyy`  et renvoie le rapport entre le nombre total de naissances féminines et le nombre total de naissances masculines cette année là selon la table `babynames.bebes`.\n\n:::\n\n\n::: {.callout-tip}\n\nRéponse attendue pour `SELECT * FRON cc_fonc_7(1922);`\n\n```\n+---------+\n|cc_fonc_7|\n+---------+\n|     1.05|\n```\n\nNB:  précision demandée : 0.1\n\n:::\n\n::: {.content-visible when-profile=\"solution\"}\n\n::: {.callout-tip title=\"solution\"}\n\nTODO \n\n:::\n\n:::\n\n\n## Popularité relative et rang de popularité\n\nDonnées dans le schéma `babynames`\n\n::: {.callout-note}\n\n### Question\n\nÉcrire une vue nommée `cc_vue_8` de schema\n```\n(sexe text, prenom text, annee integer, rang integer, popularite numeric)\n```\nqui donne pour chaque prénom, année, sexe, la popularité  relative (nombre sur nombre total de naissance de ce sexe cette année là) et le rang par popularité décroissante.\n\n:::\n\n\n::: {.callout-tip}\n\nRéponse attendue pour\n```\nSELECT *\nFROM cc_vue_8\nWHERE prenom='THÉO' AND\n      sexe = 'H' AND\n      annee >1999 AND\n      annee < 2005;\n```\n\n```\n+----+------+-----+----+----------+\n|sexe|prenom|annee|rang|popularite|\n+----+------+-----+----+----------+\n|H   |THÉO  | 2000|   6|     0.019|\n|H   |THÉO  | 2001|   6|     0.022|\n|H   |THÉO  | 2002|   5|     0.022|\n|H   |THÉO  | 2003|   5|     0.020|\n|H   |THÉO  | 2004|   7|     0.016|\n```\n\n\nNB:  précision demandée pour la popularité  0.01\n\n:::\n\n\n::: {.content-visible when-profile=\"solution\"}\n\n::: {.callout-tip title=\"solution\"}\n\nTODO \n\n:::\n\n:::\n\n\n## Requête fenêtre\n\nDonnées dans le schéma `world`\n\n::: {.callout-note}\n\n### Question\n\nÉcrire une vue  nommée `cc_vue_9` de schéma:\n\n```{.sql}\n(region TEXT,\n min_gnp_cap NUMERIC, poorest_country_name TEXT,\n max_gnp_per_cap NUMERIC, richest_country_name TEXT)\n```\n\noù chaque ligne indique pour une région donnée, le minimum du PIB (`gnp`) par habitant, un des pays de la région où ce minimum est réalisé, le maximum du PIB par habitant et un des pays où ce maximum est réalisé.\n\n:::\n\n::: {.callout-tip}\n\n```{.sql}\nSELECT region, richest_country, poorest_country\nFROM cc_vue_9\nWHERE region='Eastern Asia' ;\n```\n\n```\n+------------+---------------+---------------+\n|region      |richest_country|poorest_country|\n+------------+---------------+---------------+\n|Eastern Asia|Japan          |North Korea    |\n```\n:::\n\n::: {.content-visible when-profile=\"solution\"}\n\n::: {.callout-tip title=\"solution\"}\n\nTODO \n\n:::\n\n:::\n\n## Fenêtre glissante\n\nDonnées dans le schéma `babynames`\n\n::: {.callout-note}\n\n### Question\n\nCréer une vue `cc_vue_10` de schéma `(prenom  TEXT, sexe TEXT, annee INTEGER, moy NUMERIC)` qui, pour chaque prénom, sexe et année, donne le nombre moyen d'attributions du prénom aux enfants du sexe en question durant l'intervalle formé par les deux années qui précèdent et les deux années qui suivent l'année courante (incluse).\n\n:::\n\n\n::: {.callout-tip collapse=\"true\"}\n\n```{.sql}\nSELECT *\nFROM cc_vue_10\nWHERE prenom='PATRICK' AND\n      annee BETWEEN 1955 AND 1960 ;\n```\n\n```\n+-------+----+-----+--------+\n|prenom |sexe|annee|moy     |\n+-------+----+-----+--------+\n|PATRICK|F   | 1959|    3.00|\n|PATRICK|H   | 1955|20381.00|\n|PATRICK|H   | 1956|20673.80|\n|PATRICK|H   | 1957|20532.20|\n|PATRICK|H   | 1958|20173.80|\n|PATRICK|H   | 1959|19443.20|\n|PATRICK|H   | 1960|18479.60|\n```\n\n:::\n\nLa manière la plus simple de répondre à cette question 10 est d'utiliser une *fenêtre glissante*. Les fenêtres glissantes étendent les fenêtres définies par `PARTITION BY ... ORDER BY ...`.\n\nLa syntaxe de l'invocation des fonctions fenêtres est décrite dans la documentation [PostgreSQL](https://www.postgresql.org/docs/current/sql-expressions.html#SYNTAX-WINDOW-FUNCTIONS).\n\nL'invocation d'une fonction opérant sur une fenêtre suit la forme :\n\n```{.sql}\nfunction_name ([expression [, expression ... ]])\n      [ FILTER ( WHERE filter_clause ) ]\n      OVER ( window_definition )\n\n-- OU\n\nfunction_name ( * )\n      [ FILTER ( WHERE filter_clause ) ]\n      OVER ( window_definition )\n```\n\nNous n'avons pas eu besoin d'utiliser la clause `FILTER (WHERE filter_clause)`\n\nLa définition de la fenêtre  `window definition` est de la forme \n\n```{.sql}\n[ PARTITION BY expression [, ...] ]\n[ ORDER BY expression [ ASC | DESC | USING operator ] [ NULLS { FIRST | LAST } ] [, ...] ]\n[ frame_clause ]\n```\n\nRappel : une expression entre [] est optionnelle.\n\nLa dernière clause optionnelle `frame_clause`  permet de calculer des fenêtres glissantes et d'autres types de fenêtres. Elle peut se décliner en\n\n```{.sql}\n{ RANGE | ROWS | GROUPS } frame_start [ frame_exclusion ]\n{ RANGE | ROWS | GROUPS } BETWEEN frame_start AND frame_end [ frame_exclusion ]\n```\n\noù `frame_start` (début du cadre/de la fenêtre) peut prendre les formes suivantes :\n\n```{.sql}\nUNBOUNDED PRECEDING  -- ou\noffset PRECEDING  -- ou\nCURRENT ROW   --ou\noffset FOLLOWING  -- ou\nUNBOUNDED FOLLOWING  -- ou\n```\n\n`frame_end`  se définit de la même manière.\n\nSi on veut calculer le nombre cumulé  d'attributions d'un prénom depuis l'origine des temps  on pourra procéder ainsi:\n\n```{.sql}\nWITH R AS (\nSELECT prenom, sexe, annee, SUM(nombre)\n      OVER (PARTITION BY prenom, sexe\n            ORDER BY annee\n            RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)\n      as cumule\nFROM babynames.bebes\n)\n\nSELECT * FROM R\nWHERE prenom IN ('PATRICK', 'MICHEL') ;  -- pour limiter la taille du résultat\n```\n\n\n::: {.content-visible when-profile=\"solution\"}\n\n::: {.callout-tip title=\"solution\"}\n\nTODO \n\n:::\n\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}